import {
  _extends
} from "./chunk-EQCCHGRT.js";
import {
  createSvgIcon_default,
  require_classnames
} from "./chunk-6R6JAAOL.js";
import {
  require_react_dom
} from "./chunk-XQLYTHWV.js";
import {
  require_react
} from "./chunk-VJA5E53X.js";
import {
  __commonJS,
  __toESM
} from "./chunk-SNAQBZPT.js";

// node_modules/rsuite-table/node_modules/react-is/cjs/react-is.development.js
var require_react_is_development = __commonJS({
  "node_modules/rsuite-table/node_modules/react-is/cjs/react-is.development.js"(exports) {
    "use strict";
    if (true) {
      (function() {
        "use strict";
        var REACT_ELEMENT_TYPE = 60103;
        var REACT_PORTAL_TYPE = 60106;
        var REACT_FRAGMENT_TYPE = 60107;
        var REACT_STRICT_MODE_TYPE = 60108;
        var REACT_PROFILER_TYPE = 60114;
        var REACT_PROVIDER_TYPE = 60109;
        var REACT_CONTEXT_TYPE = 60110;
        var REACT_FORWARD_REF_TYPE = 60112;
        var REACT_SUSPENSE_TYPE = 60113;
        var REACT_SUSPENSE_LIST_TYPE = 60120;
        var REACT_MEMO_TYPE = 60115;
        var REACT_LAZY_TYPE = 60116;
        var REACT_BLOCK_TYPE = 60121;
        var REACT_SERVER_BLOCK_TYPE = 60122;
        var REACT_FUNDAMENTAL_TYPE = 60117;
        var REACT_SCOPE_TYPE = 60119;
        var REACT_OPAQUE_ID_TYPE = 60128;
        var REACT_DEBUG_TRACING_MODE_TYPE = 60129;
        var REACT_OFFSCREEN_TYPE = 60130;
        var REACT_LEGACY_HIDDEN_TYPE = 60131;
        if (typeof Symbol === "function" && Symbol.for) {
          var symbolFor = Symbol.for;
          REACT_ELEMENT_TYPE = symbolFor("react.element");
          REACT_PORTAL_TYPE = symbolFor("react.portal");
          REACT_FRAGMENT_TYPE = symbolFor("react.fragment");
          REACT_STRICT_MODE_TYPE = symbolFor("react.strict_mode");
          REACT_PROFILER_TYPE = symbolFor("react.profiler");
          REACT_PROVIDER_TYPE = symbolFor("react.provider");
          REACT_CONTEXT_TYPE = symbolFor("react.context");
          REACT_FORWARD_REF_TYPE = symbolFor("react.forward_ref");
          REACT_SUSPENSE_TYPE = symbolFor("react.suspense");
          REACT_SUSPENSE_LIST_TYPE = symbolFor("react.suspense_list");
          REACT_MEMO_TYPE = symbolFor("react.memo");
          REACT_LAZY_TYPE = symbolFor("react.lazy");
          REACT_BLOCK_TYPE = symbolFor("react.block");
          REACT_SERVER_BLOCK_TYPE = symbolFor("react.server.block");
          REACT_FUNDAMENTAL_TYPE = symbolFor("react.fundamental");
          REACT_SCOPE_TYPE = symbolFor("react.scope");
          REACT_OPAQUE_ID_TYPE = symbolFor("react.opaque.id");
          REACT_DEBUG_TRACING_MODE_TYPE = symbolFor("react.debug_trace_mode");
          REACT_OFFSCREEN_TYPE = symbolFor("react.offscreen");
          REACT_LEGACY_HIDDEN_TYPE = symbolFor("react.legacy_hidden");
        }
        var enableScopeAPI = false;
        function isValidElementType(type) {
          if (typeof type === "string" || typeof type === "function") {
            return true;
          }
          if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || type === REACT_DEBUG_TRACING_MODE_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || type === REACT_LEGACY_HIDDEN_TYPE || enableScopeAPI) {
            return true;
          }
          if (typeof type === "object" && type !== null) {
            if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_BLOCK_TYPE || type[0] === REACT_SERVER_BLOCK_TYPE) {
              return true;
            }
          }
          return false;
        }
        function typeOf(object) {
          if (typeof object === "object" && object !== null) {
            var $$typeof = object.$$typeof;
            switch ($$typeof) {
              case REACT_ELEMENT_TYPE:
                var type = object.type;
                switch (type) {
                  case REACT_FRAGMENT_TYPE:
                  case REACT_PROFILER_TYPE:
                  case REACT_STRICT_MODE_TYPE:
                  case REACT_SUSPENSE_TYPE:
                  case REACT_SUSPENSE_LIST_TYPE:
                    return type;
                  default:
                    var $$typeofType = type && type.$$typeof;
                    switch ($$typeofType) {
                      case REACT_CONTEXT_TYPE:
                      case REACT_FORWARD_REF_TYPE:
                      case REACT_LAZY_TYPE:
                      case REACT_MEMO_TYPE:
                      case REACT_PROVIDER_TYPE:
                        return $$typeofType;
                      default:
                        return $$typeof;
                    }
                }
              case REACT_PORTAL_TYPE:
                return $$typeof;
            }
          }
          return void 0;
        }
        var ContextConsumer = REACT_CONTEXT_TYPE;
        var ContextProvider = REACT_PROVIDER_TYPE;
        var Element2 = REACT_ELEMENT_TYPE;
        var ForwardRef6 = REACT_FORWARD_REF_TYPE;
        var Fragment = REACT_FRAGMENT_TYPE;
        var Lazy = REACT_LAZY_TYPE;
        var Memo = REACT_MEMO_TYPE;
        var Portal = REACT_PORTAL_TYPE;
        var Profiler = REACT_PROFILER_TYPE;
        var StrictMode = REACT_STRICT_MODE_TYPE;
        var Suspense = REACT_SUSPENSE_TYPE;
        var hasWarnedAboutDeprecatedIsAsyncMode = false;
        var hasWarnedAboutDeprecatedIsConcurrentMode = false;
        function isAsyncMode(object) {
          {
            if (!hasWarnedAboutDeprecatedIsAsyncMode) {
              hasWarnedAboutDeprecatedIsAsyncMode = true;
              console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 18+.");
            }
          }
          return false;
        }
        function isConcurrentMode(object) {
          {
            if (!hasWarnedAboutDeprecatedIsConcurrentMode) {
              hasWarnedAboutDeprecatedIsConcurrentMode = true;
              console["warn"]("The ReactIs.isConcurrentMode() alias has been deprecated, and will be removed in React 18+.");
            }
          }
          return false;
        }
        function isContextConsumer(object) {
          return typeOf(object) === REACT_CONTEXT_TYPE;
        }
        function isContextProvider(object) {
          return typeOf(object) === REACT_PROVIDER_TYPE;
        }
        function isElement3(object) {
          return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
        }
        function isForwardRef(object) {
          return typeOf(object) === REACT_FORWARD_REF_TYPE;
        }
        function isFragment3(object) {
          return typeOf(object) === REACT_FRAGMENT_TYPE;
        }
        function isLazy(object) {
          return typeOf(object) === REACT_LAZY_TYPE;
        }
        function isMemo(object) {
          return typeOf(object) === REACT_MEMO_TYPE;
        }
        function isPortal(object) {
          return typeOf(object) === REACT_PORTAL_TYPE;
        }
        function isProfiler(object) {
          return typeOf(object) === REACT_PROFILER_TYPE;
        }
        function isStrictMode(object) {
          return typeOf(object) === REACT_STRICT_MODE_TYPE;
        }
        function isSuspense(object) {
          return typeOf(object) === REACT_SUSPENSE_TYPE;
        }
        exports.ContextConsumer = ContextConsumer;
        exports.ContextProvider = ContextProvider;
        exports.Element = Element2;
        exports.ForwardRef = ForwardRef6;
        exports.Fragment = Fragment;
        exports.Lazy = Lazy;
        exports.Memo = Memo;
        exports.Portal = Portal;
        exports.Profiler = Profiler;
        exports.StrictMode = StrictMode;
        exports.Suspense = Suspense;
        exports.isAsyncMode = isAsyncMode;
        exports.isConcurrentMode = isConcurrentMode;
        exports.isContextConsumer = isContextConsumer;
        exports.isContextProvider = isContextProvider;
        exports.isElement = isElement3;
        exports.isForwardRef = isForwardRef;
        exports.isFragment = isFragment3;
        exports.isLazy = isLazy;
        exports.isMemo = isMemo;
        exports.isPortal = isPortal;
        exports.isProfiler = isProfiler;
        exports.isStrictMode = isStrictMode;
        exports.isSuspense = isSuspense;
        exports.isValidElementType = isValidElementType;
        exports.typeOf = typeOf;
      })();
    }
  }
});

// node_modules/rsuite-table/node_modules/react-is/index.js
var require_react_is = __commonJS({
  "node_modules/rsuite-table/node_modules/react-is/index.js"(exports, module) {
    "use strict";
    if (false) {
      module.exports = null;
    } else {
      module.exports = require_react_is_development();
    }
  }
});

// node_modules/react-is/cjs/react-is.development.js
var require_react_is_development2 = __commonJS({
  "node_modules/react-is/cjs/react-is.development.js"(exports) {
    "use strict";
    if (true) {
      (function() {
        "use strict";
        var hasSymbol = typeof Symbol === "function" && Symbol.for;
        var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for("react.element") : 60103;
        var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for("react.portal") : 60106;
        var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for("react.fragment") : 60107;
        var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for("react.strict_mode") : 60108;
        var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for("react.profiler") : 60114;
        var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for("react.provider") : 60109;
        var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for("react.context") : 60110;
        var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for("react.async_mode") : 60111;
        var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for("react.concurrent_mode") : 60111;
        var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for("react.forward_ref") : 60112;
        var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for("react.suspense") : 60113;
        var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for("react.suspense_list") : 60120;
        var REACT_MEMO_TYPE = hasSymbol ? Symbol.for("react.memo") : 60115;
        var REACT_LAZY_TYPE = hasSymbol ? Symbol.for("react.lazy") : 60116;
        var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for("react.block") : 60121;
        var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for("react.fundamental") : 60117;
        var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for("react.responder") : 60118;
        var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for("react.scope") : 60119;
        function isValidElementType(type) {
          return typeof type === "string" || typeof type === "function" || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
          type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === "object" && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
        }
        function typeOf(object) {
          if (typeof object === "object" && object !== null) {
            var $$typeof = object.$$typeof;
            switch ($$typeof) {
              case REACT_ELEMENT_TYPE:
                var type = object.type;
                switch (type) {
                  case REACT_ASYNC_MODE_TYPE:
                  case REACT_CONCURRENT_MODE_TYPE:
                  case REACT_FRAGMENT_TYPE:
                  case REACT_PROFILER_TYPE:
                  case REACT_STRICT_MODE_TYPE:
                  case REACT_SUSPENSE_TYPE:
                    return type;
                  default:
                    var $$typeofType = type && type.$$typeof;
                    switch ($$typeofType) {
                      case REACT_CONTEXT_TYPE:
                      case REACT_FORWARD_REF_TYPE:
                      case REACT_LAZY_TYPE:
                      case REACT_MEMO_TYPE:
                      case REACT_PROVIDER_TYPE:
                        return $$typeofType;
                      default:
                        return $$typeof;
                    }
                }
              case REACT_PORTAL_TYPE:
                return $$typeof;
            }
          }
          return void 0;
        }
        var AsyncMode = REACT_ASYNC_MODE_TYPE;
        var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
        var ContextConsumer = REACT_CONTEXT_TYPE;
        var ContextProvider = REACT_PROVIDER_TYPE;
        var Element2 = REACT_ELEMENT_TYPE;
        var ForwardRef6 = REACT_FORWARD_REF_TYPE;
        var Fragment = REACT_FRAGMENT_TYPE;
        var Lazy = REACT_LAZY_TYPE;
        var Memo = REACT_MEMO_TYPE;
        var Portal = REACT_PORTAL_TYPE;
        var Profiler = REACT_PROFILER_TYPE;
        var StrictMode = REACT_STRICT_MODE_TYPE;
        var Suspense = REACT_SUSPENSE_TYPE;
        var hasWarnedAboutDeprecatedIsAsyncMode = false;
        function isAsyncMode(object) {
          {
            if (!hasWarnedAboutDeprecatedIsAsyncMode) {
              hasWarnedAboutDeprecatedIsAsyncMode = true;
              console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.");
            }
          }
          return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
        }
        function isConcurrentMode(object) {
          return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
        }
        function isContextConsumer(object) {
          return typeOf(object) === REACT_CONTEXT_TYPE;
        }
        function isContextProvider(object) {
          return typeOf(object) === REACT_PROVIDER_TYPE;
        }
        function isElement3(object) {
          return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
        }
        function isForwardRef(object) {
          return typeOf(object) === REACT_FORWARD_REF_TYPE;
        }
        function isFragment3(object) {
          return typeOf(object) === REACT_FRAGMENT_TYPE;
        }
        function isLazy(object) {
          return typeOf(object) === REACT_LAZY_TYPE;
        }
        function isMemo(object) {
          return typeOf(object) === REACT_MEMO_TYPE;
        }
        function isPortal(object) {
          return typeOf(object) === REACT_PORTAL_TYPE;
        }
        function isProfiler(object) {
          return typeOf(object) === REACT_PROFILER_TYPE;
        }
        function isStrictMode(object) {
          return typeOf(object) === REACT_STRICT_MODE_TYPE;
        }
        function isSuspense(object) {
          return typeOf(object) === REACT_SUSPENSE_TYPE;
        }
        exports.AsyncMode = AsyncMode;
        exports.ConcurrentMode = ConcurrentMode;
        exports.ContextConsumer = ContextConsumer;
        exports.ContextProvider = ContextProvider;
        exports.Element = Element2;
        exports.ForwardRef = ForwardRef6;
        exports.Fragment = Fragment;
        exports.Lazy = Lazy;
        exports.Memo = Memo;
        exports.Portal = Portal;
        exports.Profiler = Profiler;
        exports.StrictMode = StrictMode;
        exports.Suspense = Suspense;
        exports.isAsyncMode = isAsyncMode;
        exports.isConcurrentMode = isConcurrentMode;
        exports.isContextConsumer = isContextConsumer;
        exports.isContextProvider = isContextProvider;
        exports.isElement = isElement3;
        exports.isForwardRef = isForwardRef;
        exports.isFragment = isFragment3;
        exports.isLazy = isLazy;
        exports.isMemo = isMemo;
        exports.isPortal = isPortal;
        exports.isProfiler = isProfiler;
        exports.isStrictMode = isStrictMode;
        exports.isSuspense = isSuspense;
        exports.isValidElementType = isValidElementType;
        exports.typeOf = typeOf;
      })();
    }
  }
});

// node_modules/react-is/index.js
var require_react_is2 = __commonJS({
  "node_modules/react-is/index.js"(exports, module) {
    "use strict";
    if (false) {
      module.exports = null;
    } else {
      module.exports = require_react_is_development2();
    }
  }
});

// node_modules/object-assign/index.js
var require_object_assign = __commonJS({
  "node_modules/object-assign/index.js"(exports, module) {
    "use strict";
    var getOwnPropertySymbols = Object.getOwnPropertySymbols;
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var propIsEnumerable = Object.prototype.propertyIsEnumerable;
    function toObject(val) {
      if (val === null || val === void 0) {
        throw new TypeError("Object.assign cannot be called with null or undefined");
      }
      return Object(val);
    }
    function shouldUseNative() {
      try {
        if (!Object.assign) {
          return false;
        }
        var test1 = new String("abc");
        test1[5] = "de";
        if (Object.getOwnPropertyNames(test1)[0] === "5") {
          return false;
        }
        var test2 = {};
        for (var i = 0; i < 10; i++) {
          test2["_" + String.fromCharCode(i)] = i;
        }
        var order2 = Object.getOwnPropertyNames(test2).map(function(n) {
          return test2[n];
        });
        if (order2.join("") !== "0123456789") {
          return false;
        }
        var test3 = {};
        "abcdefghijklmnopqrst".split("").forEach(function(letter) {
          test3[letter] = letter;
        });
        if (Object.keys(Object.assign({}, test3)).join("") !== "abcdefghijklmnopqrst") {
          return false;
        }
        return true;
      } catch (err) {
        return false;
      }
    }
    module.exports = shouldUseNative() ? Object.assign : function(target, source) {
      var from;
      var to = toObject(target);
      var symbols;
      for (var s = 1; s < arguments.length; s++) {
        from = Object(arguments[s]);
        for (var key in from) {
          if (hasOwnProperty.call(from, key)) {
            to[key] = from[key];
          }
        }
        if (getOwnPropertySymbols) {
          symbols = getOwnPropertySymbols(from);
          for (var i = 0; i < symbols.length; i++) {
            if (propIsEnumerable.call(from, symbols[i])) {
              to[symbols[i]] = from[symbols[i]];
            }
          }
        }
      }
      return to;
    };
  }
});

// node_modules/prop-types/lib/ReactPropTypesSecret.js
var require_ReactPropTypesSecret = __commonJS({
  "node_modules/prop-types/lib/ReactPropTypesSecret.js"(exports, module) {
    "use strict";
    var ReactPropTypesSecret = "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";
    module.exports = ReactPropTypesSecret;
  }
});

// node_modules/prop-types/lib/has.js
var require_has = __commonJS({
  "node_modules/prop-types/lib/has.js"(exports, module) {
    module.exports = Function.call.bind(Object.prototype.hasOwnProperty);
  }
});

// node_modules/prop-types/checkPropTypes.js
var require_checkPropTypes = __commonJS({
  "node_modules/prop-types/checkPropTypes.js"(exports, module) {
    "use strict";
    var printWarning = function() {
    };
    if (true) {
      ReactPropTypesSecret = require_ReactPropTypesSecret();
      loggedTypeFailures = {};
      has = require_has();
      printWarning = function(text) {
        var message = "Warning: " + text;
        if (typeof console !== "undefined") {
          console.error(message);
        }
        try {
          throw new Error(message);
        } catch (x) {
        }
      };
    }
    var ReactPropTypesSecret;
    var loggedTypeFailures;
    var has;
    function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
      if (true) {
        for (var typeSpecName in typeSpecs) {
          if (has(typeSpecs, typeSpecName)) {
            var error;
            try {
              if (typeof typeSpecs[typeSpecName] !== "function") {
                var err = Error(
                  (componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`."
                );
                err.name = "Invariant Violation";
                throw err;
              }
              error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
            } catch (ex) {
              error = ex;
            }
            if (error && !(error instanceof Error)) {
              printWarning(
                (componentName || "React class") + ": type specification of " + location + " `" + typeSpecName + "` is invalid; the type checker function must return `null` or an `Error` but returned a " + typeof error + ". You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument)."
              );
            }
            if (error instanceof Error && !(error.message in loggedTypeFailures)) {
              loggedTypeFailures[error.message] = true;
              var stack = getStack ? getStack() : "";
              printWarning(
                "Failed " + location + " type: " + error.message + (stack != null ? stack : "")
              );
            }
          }
        }
      }
    }
    checkPropTypes.resetWarningCache = function() {
      if (true) {
        loggedTypeFailures = {};
      }
    };
    module.exports = checkPropTypes;
  }
});

// node_modules/prop-types/factoryWithTypeCheckers.js
var require_factoryWithTypeCheckers = __commonJS({
  "node_modules/prop-types/factoryWithTypeCheckers.js"(exports, module) {
    "use strict";
    var ReactIs3 = require_react_is2();
    var assign = require_object_assign();
    var ReactPropTypesSecret = require_ReactPropTypesSecret();
    var has = require_has();
    var checkPropTypes = require_checkPropTypes();
    var printWarning = function() {
    };
    if (true) {
      printWarning = function(text) {
        var message = "Warning: " + text;
        if (typeof console !== "undefined") {
          console.error(message);
        }
        try {
          throw new Error(message);
        } catch (x) {
        }
      };
    }
    function emptyFunctionThatReturnsNull() {
      return null;
    }
    module.exports = function(isValidElement, throwOnDirectAccess) {
      var ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
      var FAUX_ITERATOR_SYMBOL = "@@iterator";
      function getIteratorFn(maybeIterable) {
        var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
        if (typeof iteratorFn === "function") {
          return iteratorFn;
        }
      }
      var ANONYMOUS = "<<anonymous>>";
      var ReactPropTypes = {
        array: createPrimitiveTypeChecker("array"),
        bigint: createPrimitiveTypeChecker("bigint"),
        bool: createPrimitiveTypeChecker("boolean"),
        func: createPrimitiveTypeChecker("function"),
        number: createPrimitiveTypeChecker("number"),
        object: createPrimitiveTypeChecker("object"),
        string: createPrimitiveTypeChecker("string"),
        symbol: createPrimitiveTypeChecker("symbol"),
        any: createAnyTypeChecker(),
        arrayOf: createArrayOfTypeChecker,
        element: createElementTypeChecker(),
        elementType: createElementTypeTypeChecker(),
        instanceOf: createInstanceTypeChecker,
        node: createNodeChecker(),
        objectOf: createObjectOfTypeChecker,
        oneOf: createEnumTypeChecker,
        oneOfType: createUnionTypeChecker,
        shape: createShapeTypeChecker,
        exact: createStrictShapeTypeChecker
      };
      function is(x, y) {
        if (x === y) {
          return x !== 0 || 1 / x === 1 / y;
        } else {
          return x !== x && y !== y;
        }
      }
      function PropTypeError(message, data) {
        this.message = message;
        this.data = data && typeof data === "object" ? data : {};
        this.stack = "";
      }
      PropTypeError.prototype = Error.prototype;
      function createChainableTypeChecker(validate) {
        if (true) {
          var manualPropTypeCallCache = {};
          var manualPropTypeWarningCount = 0;
        }
        function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
          componentName = componentName || ANONYMOUS;
          propFullName = propFullName || propName;
          if (secret !== ReactPropTypesSecret) {
            if (throwOnDirectAccess) {
              var err = new Error(
                "Calling PropTypes validators directly is not supported by the `prop-types` package. Use `PropTypes.checkPropTypes()` to call them. Read more at http://fb.me/use-check-prop-types"
              );
              err.name = "Invariant Violation";
              throw err;
            } else if (typeof console !== "undefined") {
              var cacheKey = componentName + ":" + propName;
              if (!manualPropTypeCallCache[cacheKey] && // Avoid spamming the console because they are often not actionable except for lib authors
              manualPropTypeWarningCount < 3) {
                printWarning(
                  "You are manually calling a React.PropTypes validation function for the `" + propFullName + "` prop on `" + componentName + "`. This is deprecated and will throw in the standalone `prop-types` package. You may be seeing this warning due to a third-party PropTypes library. See https://fb.me/react-warning-dont-call-proptypes for details."
                );
                manualPropTypeCallCache[cacheKey] = true;
                manualPropTypeWarningCount++;
              }
            }
          }
          if (props[propName] == null) {
            if (isRequired) {
              if (props[propName] === null) {
                return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required " + ("in `" + componentName + "`, but its value is `null`."));
              }
              return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required in " + ("`" + componentName + "`, but its value is `undefined`."));
            }
            return null;
          } else {
            return validate(props, propName, componentName, location, propFullName);
          }
        }
        var chainedCheckType = checkType.bind(null, false);
        chainedCheckType.isRequired = checkType.bind(null, true);
        return chainedCheckType;
      }
      function createPrimitiveTypeChecker(expectedType) {
        function validate(props, propName, componentName, location, propFullName, secret) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== expectedType) {
            var preciseType = getPreciseType(propValue);
            return new PropTypeError(
              "Invalid " + location + " `" + propFullName + "` of type " + ("`" + preciseType + "` supplied to `" + componentName + "`, expected ") + ("`" + expectedType + "`."),
              { expectedType }
            );
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createAnyTypeChecker() {
        return createChainableTypeChecker(emptyFunctionThatReturnsNull);
      }
      function createArrayOfTypeChecker(typeChecker) {
        function validate(props, propName, componentName, location, propFullName) {
          if (typeof typeChecker !== "function") {
            return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside arrayOf.");
          }
          var propValue = props[propName];
          if (!Array.isArray(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an array."));
          }
          for (var i = 0; i < propValue.length; i++) {
            var error = typeChecker(propValue, i, componentName, location, propFullName + "[" + i + "]", ReactPropTypesSecret);
            if (error instanceof Error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createElementTypeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          if (!isValidElement(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createElementTypeTypeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          if (!ReactIs3.isValidElementType(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement type."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createInstanceTypeChecker(expectedClass) {
        function validate(props, propName, componentName, location, propFullName) {
          if (!(props[propName] instanceof expectedClass)) {
            var expectedClassName = expectedClass.name || ANONYMOUS;
            var actualClassName = getClassName(props[propName]);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + actualClassName + "` supplied to `" + componentName + "`, expected ") + ("instance of `" + expectedClassName + "`."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createEnumTypeChecker(expectedValues) {
        if (!Array.isArray(expectedValues)) {
          if (true) {
            if (arguments.length > 1) {
              printWarning(
                "Invalid arguments supplied to oneOf, expected an array, got " + arguments.length + " arguments. A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z])."
              );
            } else {
              printWarning("Invalid argument supplied to oneOf, expected an array.");
            }
          }
          return emptyFunctionThatReturnsNull;
        }
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          for (var i = 0; i < expectedValues.length; i++) {
            if (is(propValue, expectedValues[i])) {
              return null;
            }
          }
          var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
            var type = getPreciseType(value);
            if (type === "symbol") {
              return String(value);
            }
            return value;
          });
          return new PropTypeError("Invalid " + location + " `" + propFullName + "` of value `" + String(propValue) + "` " + ("supplied to `" + componentName + "`, expected one of " + valuesString + "."));
        }
        return createChainableTypeChecker(validate);
      }
      function createObjectOfTypeChecker(typeChecker) {
        function validate(props, propName, componentName, location, propFullName) {
          if (typeof typeChecker !== "function") {
            return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside objectOf.");
          }
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an object."));
          }
          for (var key in propValue) {
            if (has(propValue, key)) {
              var error = typeChecker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
              if (error instanceof Error) {
                return error;
              }
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createUnionTypeChecker(arrayOfTypeCheckers) {
        if (!Array.isArray(arrayOfTypeCheckers)) {
          true ? printWarning("Invalid argument supplied to oneOfType, expected an instance of array.") : void 0;
          return emptyFunctionThatReturnsNull;
        }
        for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
          var checker = arrayOfTypeCheckers[i];
          if (typeof checker !== "function") {
            printWarning(
              "Invalid argument supplied to oneOfType. Expected an array of check functions, but received " + getPostfixForTypeWarning(checker) + " at index " + i + "."
            );
            return emptyFunctionThatReturnsNull;
          }
        }
        function validate(props, propName, componentName, location, propFullName) {
          var expectedTypes = [];
          for (var i2 = 0; i2 < arrayOfTypeCheckers.length; i2++) {
            var checker2 = arrayOfTypeCheckers[i2];
            var checkerResult = checker2(props, propName, componentName, location, propFullName, ReactPropTypesSecret);
            if (checkerResult == null) {
              return null;
            }
            if (checkerResult.data && has(checkerResult.data, "expectedType")) {
              expectedTypes.push(checkerResult.data.expectedType);
            }
          }
          var expectedTypesMessage = expectedTypes.length > 0 ? ", expected one of type [" + expectedTypes.join(", ") + "]" : "";
          return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`" + expectedTypesMessage + "."));
        }
        return createChainableTypeChecker(validate);
      }
      function createNodeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          if (!isNode(props[propName])) {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`, expected a ReactNode."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function invalidValidatorError(componentName, location, propFullName, key, type) {
        return new PropTypeError(
          (componentName || "React class") + ": " + location + " type `" + propFullName + "." + key + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + type + "`."
        );
      }
      function createShapeTypeChecker(shapeTypes) {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
          }
          for (var key in shapeTypes) {
            var checker = shapeTypes[key];
            if (typeof checker !== "function") {
              return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
            }
            var error = checker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
            if (error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createStrictShapeTypeChecker(shapeTypes) {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
          }
          var allKeys = assign({}, props[propName], shapeTypes);
          for (var key in allKeys) {
            var checker = shapeTypes[key];
            if (has(shapeTypes, key) && typeof checker !== "function") {
              return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
            }
            if (!checker) {
              return new PropTypeError(
                "Invalid " + location + " `" + propFullName + "` key `" + key + "` supplied to `" + componentName + "`.\nBad object: " + JSON.stringify(props[propName], null, "  ") + "\nValid keys: " + JSON.stringify(Object.keys(shapeTypes), null, "  ")
              );
            }
            var error = checker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
            if (error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function isNode(propValue) {
        switch (typeof propValue) {
          case "number":
          case "string":
          case "undefined":
            return true;
          case "boolean":
            return !propValue;
          case "object":
            if (Array.isArray(propValue)) {
              return propValue.every(isNode);
            }
            if (propValue === null || isValidElement(propValue)) {
              return true;
            }
            var iteratorFn = getIteratorFn(propValue);
            if (iteratorFn) {
              var iterator = iteratorFn.call(propValue);
              var step;
              if (iteratorFn !== propValue.entries) {
                while (!(step = iterator.next()).done) {
                  if (!isNode(step.value)) {
                    return false;
                  }
                }
              } else {
                while (!(step = iterator.next()).done) {
                  var entry = step.value;
                  if (entry) {
                    if (!isNode(entry[1])) {
                      return false;
                    }
                  }
                }
              }
            } else {
              return false;
            }
            return true;
          default:
            return false;
        }
      }
      function isSymbol(propType, propValue) {
        if (propType === "symbol") {
          return true;
        }
        if (!propValue) {
          return false;
        }
        if (propValue["@@toStringTag"] === "Symbol") {
          return true;
        }
        if (typeof Symbol === "function" && propValue instanceof Symbol) {
          return true;
        }
        return false;
      }
      function getPropType(propValue) {
        var propType = typeof propValue;
        if (Array.isArray(propValue)) {
          return "array";
        }
        if (propValue instanceof RegExp) {
          return "object";
        }
        if (isSymbol(propType, propValue)) {
          return "symbol";
        }
        return propType;
      }
      function getPreciseType(propValue) {
        if (typeof propValue === "undefined" || propValue === null) {
          return "" + propValue;
        }
        var propType = getPropType(propValue);
        if (propType === "object") {
          if (propValue instanceof Date) {
            return "date";
          } else if (propValue instanceof RegExp) {
            return "regexp";
          }
        }
        return propType;
      }
      function getPostfixForTypeWarning(value) {
        var type = getPreciseType(value);
        switch (type) {
          case "array":
          case "object":
            return "an " + type;
          case "boolean":
          case "date":
          case "regexp":
            return "a " + type;
          default:
            return type;
        }
      }
      function getClassName(propValue) {
        if (!propValue.constructor || !propValue.constructor.name) {
          return ANONYMOUS;
        }
        return propValue.constructor.name;
      }
      ReactPropTypes.checkPropTypes = checkPropTypes;
      ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
      ReactPropTypes.PropTypes = ReactPropTypes;
      return ReactPropTypes;
    };
  }
});

// node_modules/prop-types/index.js
var require_prop_types = __commonJS({
  "node_modules/prop-types/index.js"(exports, module) {
    if (true) {
      ReactIs3 = require_react_is2();
      throwOnDirectAccess = true;
      module.exports = require_factoryWithTypeCheckers()(ReactIs3.isElement, throwOnDirectAccess);
    } else {
      module.exports = null();
    }
    var ReactIs3;
    var throwOnDirectAccess;
  }
});

// node_modules/lodash/_freeGlobal.js
var require_freeGlobal = __commonJS({
  "node_modules/lodash/_freeGlobal.js"(exports, module) {
    var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
    module.exports = freeGlobal;
  }
});

// node_modules/lodash/_root.js
var require_root = __commonJS({
  "node_modules/lodash/_root.js"(exports, module) {
    var freeGlobal = require_freeGlobal();
    var freeSelf = typeof self == "object" && self && self.Object === Object && self;
    var root = freeGlobal || freeSelf || Function("return this")();
    module.exports = root;
  }
});

// node_modules/lodash/_Symbol.js
var require_Symbol = __commonJS({
  "node_modules/lodash/_Symbol.js"(exports, module) {
    var root = require_root();
    var Symbol2 = root.Symbol;
    module.exports = Symbol2;
  }
});

// node_modules/lodash/_getRawTag.js
var require_getRawTag = __commonJS({
  "node_modules/lodash/_getRawTag.js"(exports, module) {
    var Symbol2 = require_Symbol();
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    var nativeObjectToString = objectProto.toString;
    var symToStringTag = Symbol2 ? Symbol2.toStringTag : void 0;
    function getRawTag(value) {
      var isOwn = hasOwnProperty.call(value, symToStringTag), tag = value[symToStringTag];
      try {
        value[symToStringTag] = void 0;
        var unmasked = true;
      } catch (e) {
      }
      var result = nativeObjectToString.call(value);
      if (unmasked) {
        if (isOwn) {
          value[symToStringTag] = tag;
        } else {
          delete value[symToStringTag];
        }
      }
      return result;
    }
    module.exports = getRawTag;
  }
});

// node_modules/lodash/_objectToString.js
var require_objectToString = __commonJS({
  "node_modules/lodash/_objectToString.js"(exports, module) {
    var objectProto = Object.prototype;
    var nativeObjectToString = objectProto.toString;
    function objectToString(value) {
      return nativeObjectToString.call(value);
    }
    module.exports = objectToString;
  }
});

// node_modules/lodash/_baseGetTag.js
var require_baseGetTag = __commonJS({
  "node_modules/lodash/_baseGetTag.js"(exports, module) {
    var Symbol2 = require_Symbol();
    var getRawTag = require_getRawTag();
    var objectToString = require_objectToString();
    var nullTag = "[object Null]";
    var undefinedTag = "[object Undefined]";
    var symToStringTag = Symbol2 ? Symbol2.toStringTag : void 0;
    function baseGetTag(value) {
      if (value == null) {
        return value === void 0 ? undefinedTag : nullTag;
      }
      return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
    }
    module.exports = baseGetTag;
  }
});

// node_modules/lodash/isObject.js
var require_isObject = __commonJS({
  "node_modules/lodash/isObject.js"(exports, module) {
    function isObject(value) {
      var type = typeof value;
      return value != null && (type == "object" || type == "function");
    }
    module.exports = isObject;
  }
});

// node_modules/lodash/isFunction.js
var require_isFunction = __commonJS({
  "node_modules/lodash/isFunction.js"(exports, module) {
    var baseGetTag = require_baseGetTag();
    var isObject = require_isObject();
    var asyncTag = "[object AsyncFunction]";
    var funcTag = "[object Function]";
    var genTag = "[object GeneratorFunction]";
    var proxyTag = "[object Proxy]";
    function isFunction3(value) {
      if (!isObject(value)) {
        return false;
      }
      var tag = baseGetTag(value);
      return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
    }
    module.exports = isFunction3;
  }
});

// node_modules/lodash/now.js
var require_now = __commonJS({
  "node_modules/lodash/now.js"(exports, module) {
    var root = require_root();
    var now = function() {
      return root.Date.now();
    };
    module.exports = now;
  }
});

// node_modules/lodash/_trimmedEndIndex.js
var require_trimmedEndIndex = __commonJS({
  "node_modules/lodash/_trimmedEndIndex.js"(exports, module) {
    var reWhitespace = /\s/;
    function trimmedEndIndex(string) {
      var index = string.length;
      while (index-- && reWhitespace.test(string.charAt(index))) {
      }
      return index;
    }
    module.exports = trimmedEndIndex;
  }
});

// node_modules/lodash/_baseTrim.js
var require_baseTrim = __commonJS({
  "node_modules/lodash/_baseTrim.js"(exports, module) {
    var trimmedEndIndex = require_trimmedEndIndex();
    var reTrimStart = /^\s+/;
    function baseTrim(string) {
      return string ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, "") : string;
    }
    module.exports = baseTrim;
  }
});

// node_modules/lodash/isObjectLike.js
var require_isObjectLike = __commonJS({
  "node_modules/lodash/isObjectLike.js"(exports, module) {
    function isObjectLike(value) {
      return value != null && typeof value == "object";
    }
    module.exports = isObjectLike;
  }
});

// node_modules/lodash/isSymbol.js
var require_isSymbol = __commonJS({
  "node_modules/lodash/isSymbol.js"(exports, module) {
    var baseGetTag = require_baseGetTag();
    var isObjectLike = require_isObjectLike();
    var symbolTag = "[object Symbol]";
    function isSymbol(value) {
      return typeof value == "symbol" || isObjectLike(value) && baseGetTag(value) == symbolTag;
    }
    module.exports = isSymbol;
  }
});

// node_modules/lodash/toNumber.js
var require_toNumber = __commonJS({
  "node_modules/lodash/toNumber.js"(exports, module) {
    var baseTrim = require_baseTrim();
    var isObject = require_isObject();
    var isSymbol = require_isSymbol();
    var NAN = 0 / 0;
    var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
    var reIsBinary = /^0b[01]+$/i;
    var reIsOctal = /^0o[0-7]+$/i;
    var freeParseInt = parseInt;
    function toNumber(value) {
      if (typeof value == "number") {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      if (isObject(value)) {
        var other = typeof value.valueOf == "function" ? value.valueOf() : value;
        value = isObject(other) ? other + "" : other;
      }
      if (typeof value != "string") {
        return value === 0 ? value : +value;
      }
      value = baseTrim(value);
      var isBinary = reIsBinary.test(value);
      return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
    }
    module.exports = toNumber;
  }
});

// node_modules/lodash/debounce.js
var require_debounce = __commonJS({
  "node_modules/lodash/debounce.js"(exports, module) {
    var isObject = require_isObject();
    var now = require_now();
    var toNumber = require_toNumber();
    var FUNC_ERROR_TEXT = "Expected a function";
    var nativeMax = Math.max;
    var nativeMin = Math.min;
    function debounce3(func, wait, options) {
      var lastArgs, lastThis, maxWait, result, timerId, lastCallTime, lastInvokeTime = 0, leading = false, maxing = false, trailing = true;
      if (typeof func != "function") {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      wait = toNumber(wait) || 0;
      if (isObject(options)) {
        leading = !!options.leading;
        maxing = "maxWait" in options;
        maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
        trailing = "trailing" in options ? !!options.trailing : trailing;
      }
      function invokeFunc(time2) {
        var args = lastArgs, thisArg = lastThis;
        lastArgs = lastThis = void 0;
        lastInvokeTime = time2;
        result = func.apply(thisArg, args);
        return result;
      }
      function leadingEdge(time2) {
        lastInvokeTime = time2;
        timerId = setTimeout(timerExpired, wait);
        return leading ? invokeFunc(time2) : result;
      }
      function remainingWait(time2) {
        var timeSinceLastCall = time2 - lastCallTime, timeSinceLastInvoke = time2 - lastInvokeTime, timeWaiting = wait - timeSinceLastCall;
        return maxing ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;
      }
      function shouldInvoke(time2) {
        var timeSinceLastCall = time2 - lastCallTime, timeSinceLastInvoke = time2 - lastInvokeTime;
        return lastCallTime === void 0 || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
      }
      function timerExpired() {
        var time2 = now();
        if (shouldInvoke(time2)) {
          return trailingEdge(time2);
        }
        timerId = setTimeout(timerExpired, remainingWait(time2));
      }
      function trailingEdge(time2) {
        timerId = void 0;
        if (trailing && lastArgs) {
          return invokeFunc(time2);
        }
        lastArgs = lastThis = void 0;
        return result;
      }
      function cancel() {
        if (timerId !== void 0) {
          clearTimeout(timerId);
        }
        lastInvokeTime = 0;
        lastArgs = lastCallTime = lastThis = timerId = void 0;
      }
      function flush() {
        return timerId === void 0 ? result : trailingEdge(now());
      }
      function debounced() {
        var time2 = now(), isInvoking = shouldInvoke(time2);
        lastArgs = arguments;
        lastThis = this;
        lastCallTime = time2;
        if (isInvoking) {
          if (timerId === void 0) {
            return leadingEdge(lastCallTime);
          }
          if (maxing) {
            clearTimeout(timerId);
            timerId = setTimeout(timerExpired, wait);
            return invokeFunc(lastCallTime);
          }
        }
        if (timerId === void 0) {
          timerId = setTimeout(timerExpired, wait);
        }
        return result;
      }
      debounced.cancel = cancel;
      debounced.flush = flush;
      return debounced;
    }
    module.exports = debounce3;
  }
});

// node_modules/lodash/identity.js
var require_identity = __commonJS({
  "node_modules/lodash/identity.js"(exports, module) {
    function identity(value) {
      return value;
    }
    module.exports = identity;
  }
});

// node_modules/lodash/_coreJsData.js
var require_coreJsData = __commonJS({
  "node_modules/lodash/_coreJsData.js"(exports, module) {
    var root = require_root();
    var coreJsData = root["__core-js_shared__"];
    module.exports = coreJsData;
  }
});

// node_modules/lodash/_isMasked.js
var require_isMasked = __commonJS({
  "node_modules/lodash/_isMasked.js"(exports, module) {
    var coreJsData = require_coreJsData();
    var maskSrcKey = function() {
      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
      return uid ? "Symbol(src)_1." + uid : "";
    }();
    function isMasked(func) {
      return !!maskSrcKey && maskSrcKey in func;
    }
    module.exports = isMasked;
  }
});

// node_modules/lodash/_toSource.js
var require_toSource = __commonJS({
  "node_modules/lodash/_toSource.js"(exports, module) {
    var funcProto = Function.prototype;
    var funcToString = funcProto.toString;
    function toSource(func) {
      if (func != null) {
        try {
          return funcToString.call(func);
        } catch (e) {
        }
        try {
          return func + "";
        } catch (e) {
        }
      }
      return "";
    }
    module.exports = toSource;
  }
});

// node_modules/lodash/_baseIsNative.js
var require_baseIsNative = __commonJS({
  "node_modules/lodash/_baseIsNative.js"(exports, module) {
    var isFunction3 = require_isFunction();
    var isMasked = require_isMasked();
    var isObject = require_isObject();
    var toSource = require_toSource();
    var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
    var reIsHostCtor = /^\[object .+?Constructor\]$/;
    var funcProto = Function.prototype;
    var objectProto = Object.prototype;
    var funcToString = funcProto.toString;
    var hasOwnProperty = objectProto.hasOwnProperty;
    var reIsNative = RegExp(
      "^" + funcToString.call(hasOwnProperty).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
    );
    function baseIsNative(value) {
      if (!isObject(value) || isMasked(value)) {
        return false;
      }
      var pattern = isFunction3(value) ? reIsNative : reIsHostCtor;
      return pattern.test(toSource(value));
    }
    module.exports = baseIsNative;
  }
});

// node_modules/lodash/_getValue.js
var require_getValue = __commonJS({
  "node_modules/lodash/_getValue.js"(exports, module) {
    function getValue(object, key) {
      return object == null ? void 0 : object[key];
    }
    module.exports = getValue;
  }
});

// node_modules/lodash/_getNative.js
var require_getNative = __commonJS({
  "node_modules/lodash/_getNative.js"(exports, module) {
    var baseIsNative = require_baseIsNative();
    var getValue = require_getValue();
    function getNative(object, key) {
      var value = getValue(object, key);
      return baseIsNative(value) ? value : void 0;
    }
    module.exports = getNative;
  }
});

// node_modules/lodash/_WeakMap.js
var require_WeakMap = __commonJS({
  "node_modules/lodash/_WeakMap.js"(exports, module) {
    var getNative = require_getNative();
    var root = require_root();
    var WeakMap2 = getNative(root, "WeakMap");
    module.exports = WeakMap2;
  }
});

// node_modules/lodash/_metaMap.js
var require_metaMap = __commonJS({
  "node_modules/lodash/_metaMap.js"(exports, module) {
    var WeakMap2 = require_WeakMap();
    var metaMap = WeakMap2 && new WeakMap2();
    module.exports = metaMap;
  }
});

// node_modules/lodash/_baseSetData.js
var require_baseSetData = __commonJS({
  "node_modules/lodash/_baseSetData.js"(exports, module) {
    var identity = require_identity();
    var metaMap = require_metaMap();
    var baseSetData = !metaMap ? identity : function(func, data) {
      metaMap.set(func, data);
      return func;
    };
    module.exports = baseSetData;
  }
});

// node_modules/lodash/_baseCreate.js
var require_baseCreate = __commonJS({
  "node_modules/lodash/_baseCreate.js"(exports, module) {
    var isObject = require_isObject();
    var objectCreate = Object.create;
    var baseCreate = /* @__PURE__ */ function() {
      function object() {
      }
      return function(proto) {
        if (!isObject(proto)) {
          return {};
        }
        if (objectCreate) {
          return objectCreate(proto);
        }
        object.prototype = proto;
        var result = new object();
        object.prototype = void 0;
        return result;
      };
    }();
    module.exports = baseCreate;
  }
});

// node_modules/lodash/_createCtor.js
var require_createCtor = __commonJS({
  "node_modules/lodash/_createCtor.js"(exports, module) {
    var baseCreate = require_baseCreate();
    var isObject = require_isObject();
    function createCtor(Ctor) {
      return function() {
        var args = arguments;
        switch (args.length) {
          case 0:
            return new Ctor();
          case 1:
            return new Ctor(args[0]);
          case 2:
            return new Ctor(args[0], args[1]);
          case 3:
            return new Ctor(args[0], args[1], args[2]);
          case 4:
            return new Ctor(args[0], args[1], args[2], args[3]);
          case 5:
            return new Ctor(args[0], args[1], args[2], args[3], args[4]);
          case 6:
            return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
          case 7:
            return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
        }
        var thisBinding = baseCreate(Ctor.prototype), result = Ctor.apply(thisBinding, args);
        return isObject(result) ? result : thisBinding;
      };
    }
    module.exports = createCtor;
  }
});

// node_modules/lodash/_createBind.js
var require_createBind = __commonJS({
  "node_modules/lodash/_createBind.js"(exports, module) {
    var createCtor = require_createCtor();
    var root = require_root();
    var WRAP_BIND_FLAG = 1;
    function createBind(func, bitmask, thisArg) {
      var isBind = bitmask & WRAP_BIND_FLAG, Ctor = createCtor(func);
      function wrapper() {
        var fn = this && this !== root && this instanceof wrapper ? Ctor : func;
        return fn.apply(isBind ? thisArg : this, arguments);
      }
      return wrapper;
    }
    module.exports = createBind;
  }
});

// node_modules/lodash/_apply.js
var require_apply = __commonJS({
  "node_modules/lodash/_apply.js"(exports, module) {
    function apply(func, thisArg, args) {
      switch (args.length) {
        case 0:
          return func.call(thisArg);
        case 1:
          return func.call(thisArg, args[0]);
        case 2:
          return func.call(thisArg, args[0], args[1]);
        case 3:
          return func.call(thisArg, args[0], args[1], args[2]);
      }
      return func.apply(thisArg, args);
    }
    module.exports = apply;
  }
});

// node_modules/lodash/_composeArgs.js
var require_composeArgs = __commonJS({
  "node_modules/lodash/_composeArgs.js"(exports, module) {
    var nativeMax = Math.max;
    function composeArgs(args, partials, holders, isCurried) {
      var argsIndex = -1, argsLength = args.length, holdersLength = holders.length, leftIndex = -1, leftLength = partials.length, rangeLength = nativeMax(argsLength - holdersLength, 0), result = Array(leftLength + rangeLength), isUncurried = !isCurried;
      while (++leftIndex < leftLength) {
        result[leftIndex] = partials[leftIndex];
      }
      while (++argsIndex < holdersLength) {
        if (isUncurried || argsIndex < argsLength) {
          result[holders[argsIndex]] = args[argsIndex];
        }
      }
      while (rangeLength--) {
        result[leftIndex++] = args[argsIndex++];
      }
      return result;
    }
    module.exports = composeArgs;
  }
});

// node_modules/lodash/_composeArgsRight.js
var require_composeArgsRight = __commonJS({
  "node_modules/lodash/_composeArgsRight.js"(exports, module) {
    var nativeMax = Math.max;
    function composeArgsRight(args, partials, holders, isCurried) {
      var argsIndex = -1, argsLength = args.length, holdersIndex = -1, holdersLength = holders.length, rightIndex = -1, rightLength = partials.length, rangeLength = nativeMax(argsLength - holdersLength, 0), result = Array(rangeLength + rightLength), isUncurried = !isCurried;
      while (++argsIndex < rangeLength) {
        result[argsIndex] = args[argsIndex];
      }
      var offset = argsIndex;
      while (++rightIndex < rightLength) {
        result[offset + rightIndex] = partials[rightIndex];
      }
      while (++holdersIndex < holdersLength) {
        if (isUncurried || argsIndex < argsLength) {
          result[offset + holders[holdersIndex]] = args[argsIndex++];
        }
      }
      return result;
    }
    module.exports = composeArgsRight;
  }
});

// node_modules/lodash/_countHolders.js
var require_countHolders = __commonJS({
  "node_modules/lodash/_countHolders.js"(exports, module) {
    function countHolders(array, placeholder) {
      var length = array.length, result = 0;
      while (length--) {
        if (array[length] === placeholder) {
          ++result;
        }
      }
      return result;
    }
    module.exports = countHolders;
  }
});

// node_modules/lodash/_baseLodash.js
var require_baseLodash = __commonJS({
  "node_modules/lodash/_baseLodash.js"(exports, module) {
    function baseLodash() {
    }
    module.exports = baseLodash;
  }
});

// node_modules/lodash/_LazyWrapper.js
var require_LazyWrapper = __commonJS({
  "node_modules/lodash/_LazyWrapper.js"(exports, module) {
    var baseCreate = require_baseCreate();
    var baseLodash = require_baseLodash();
    var MAX_ARRAY_LENGTH = 4294967295;
    function LazyWrapper(value) {
      this.__wrapped__ = value;
      this.__actions__ = [];
      this.__dir__ = 1;
      this.__filtered__ = false;
      this.__iteratees__ = [];
      this.__takeCount__ = MAX_ARRAY_LENGTH;
      this.__views__ = [];
    }
    LazyWrapper.prototype = baseCreate(baseLodash.prototype);
    LazyWrapper.prototype.constructor = LazyWrapper;
    module.exports = LazyWrapper;
  }
});

// node_modules/lodash/noop.js
var require_noop = __commonJS({
  "node_modules/lodash/noop.js"(exports, module) {
    function noop() {
    }
    module.exports = noop;
  }
});

// node_modules/lodash/_getData.js
var require_getData = __commonJS({
  "node_modules/lodash/_getData.js"(exports, module) {
    var metaMap = require_metaMap();
    var noop = require_noop();
    var getData = !metaMap ? noop : function(func) {
      return metaMap.get(func);
    };
    module.exports = getData;
  }
});

// node_modules/lodash/_realNames.js
var require_realNames = __commonJS({
  "node_modules/lodash/_realNames.js"(exports, module) {
    var realNames = {};
    module.exports = realNames;
  }
});

// node_modules/lodash/_getFuncName.js
var require_getFuncName = __commonJS({
  "node_modules/lodash/_getFuncName.js"(exports, module) {
    var realNames = require_realNames();
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    function getFuncName(func) {
      var result = func.name + "", array = realNames[result], length = hasOwnProperty.call(realNames, result) ? array.length : 0;
      while (length--) {
        var data = array[length], otherFunc = data.func;
        if (otherFunc == null || otherFunc == func) {
          return data.name;
        }
      }
      return result;
    }
    module.exports = getFuncName;
  }
});

// node_modules/lodash/_LodashWrapper.js
var require_LodashWrapper = __commonJS({
  "node_modules/lodash/_LodashWrapper.js"(exports, module) {
    var baseCreate = require_baseCreate();
    var baseLodash = require_baseLodash();
    function LodashWrapper(value, chainAll) {
      this.__wrapped__ = value;
      this.__actions__ = [];
      this.__chain__ = !!chainAll;
      this.__index__ = 0;
      this.__values__ = void 0;
    }
    LodashWrapper.prototype = baseCreate(baseLodash.prototype);
    LodashWrapper.prototype.constructor = LodashWrapper;
    module.exports = LodashWrapper;
  }
});

// node_modules/lodash/isArray.js
var require_isArray = __commonJS({
  "node_modules/lodash/isArray.js"(exports, module) {
    var isArray = Array.isArray;
    module.exports = isArray;
  }
});

// node_modules/lodash/_copyArray.js
var require_copyArray = __commonJS({
  "node_modules/lodash/_copyArray.js"(exports, module) {
    function copyArray(source, array) {
      var index = -1, length = source.length;
      array || (array = Array(length));
      while (++index < length) {
        array[index] = source[index];
      }
      return array;
    }
    module.exports = copyArray;
  }
});

// node_modules/lodash/_wrapperClone.js
var require_wrapperClone = __commonJS({
  "node_modules/lodash/_wrapperClone.js"(exports, module) {
    var LazyWrapper = require_LazyWrapper();
    var LodashWrapper = require_LodashWrapper();
    var copyArray = require_copyArray();
    function wrapperClone(wrapper) {
      if (wrapper instanceof LazyWrapper) {
        return wrapper.clone();
      }
      var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
      result.__actions__ = copyArray(wrapper.__actions__);
      result.__index__ = wrapper.__index__;
      result.__values__ = wrapper.__values__;
      return result;
    }
    module.exports = wrapperClone;
  }
});

// node_modules/lodash/wrapperLodash.js
var require_wrapperLodash = __commonJS({
  "node_modules/lodash/wrapperLodash.js"(exports, module) {
    var LazyWrapper = require_LazyWrapper();
    var LodashWrapper = require_LodashWrapper();
    var baseLodash = require_baseLodash();
    var isArray = require_isArray();
    var isObjectLike = require_isObjectLike();
    var wrapperClone = require_wrapperClone();
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    function lodash(value) {
      if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
        if (value instanceof LodashWrapper) {
          return value;
        }
        if (hasOwnProperty.call(value, "__wrapped__")) {
          return wrapperClone(value);
        }
      }
      return new LodashWrapper(value);
    }
    lodash.prototype = baseLodash.prototype;
    lodash.prototype.constructor = lodash;
    module.exports = lodash;
  }
});

// node_modules/lodash/_isLaziable.js
var require_isLaziable = __commonJS({
  "node_modules/lodash/_isLaziable.js"(exports, module) {
    var LazyWrapper = require_LazyWrapper();
    var getData = require_getData();
    var getFuncName = require_getFuncName();
    var lodash = require_wrapperLodash();
    function isLaziable(func) {
      var funcName = getFuncName(func), other = lodash[funcName];
      if (typeof other != "function" || !(funcName in LazyWrapper.prototype)) {
        return false;
      }
      if (func === other) {
        return true;
      }
      var data = getData(other);
      return !!data && func === data[0];
    }
    module.exports = isLaziable;
  }
});

// node_modules/lodash/_shortOut.js
var require_shortOut = __commonJS({
  "node_modules/lodash/_shortOut.js"(exports, module) {
    var HOT_COUNT = 800;
    var HOT_SPAN = 16;
    var nativeNow = Date.now;
    function shortOut(func) {
      var count = 0, lastCalled = 0;
      return function() {
        var stamp = nativeNow(), remaining = HOT_SPAN - (stamp - lastCalled);
        lastCalled = stamp;
        if (remaining > 0) {
          if (++count >= HOT_COUNT) {
            return arguments[0];
          }
        } else {
          count = 0;
        }
        return func.apply(void 0, arguments);
      };
    }
    module.exports = shortOut;
  }
});

// node_modules/lodash/_setData.js
var require_setData = __commonJS({
  "node_modules/lodash/_setData.js"(exports, module) {
    var baseSetData = require_baseSetData();
    var shortOut = require_shortOut();
    var setData = shortOut(baseSetData);
    module.exports = setData;
  }
});

// node_modules/lodash/_getWrapDetails.js
var require_getWrapDetails = __commonJS({
  "node_modules/lodash/_getWrapDetails.js"(exports, module) {
    var reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/;
    var reSplitDetails = /,? & /;
    function getWrapDetails(source) {
      var match = source.match(reWrapDetails);
      return match ? match[1].split(reSplitDetails) : [];
    }
    module.exports = getWrapDetails;
  }
});

// node_modules/lodash/_insertWrapDetails.js
var require_insertWrapDetails = __commonJS({
  "node_modules/lodash/_insertWrapDetails.js"(exports, module) {
    var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/;
    function insertWrapDetails(source, details) {
      var length = details.length;
      if (!length) {
        return source;
      }
      var lastIndex = length - 1;
      details[lastIndex] = (length > 1 ? "& " : "") + details[lastIndex];
      details = details.join(length > 2 ? ", " : " ");
      return source.replace(reWrapComment, "{\n/* [wrapped with " + details + "] */\n");
    }
    module.exports = insertWrapDetails;
  }
});

// node_modules/lodash/constant.js
var require_constant = __commonJS({
  "node_modules/lodash/constant.js"(exports, module) {
    function constant(value) {
      return function() {
        return value;
      };
    }
    module.exports = constant;
  }
});

// node_modules/lodash/_defineProperty.js
var require_defineProperty = __commonJS({
  "node_modules/lodash/_defineProperty.js"(exports, module) {
    var getNative = require_getNative();
    var defineProperty = function() {
      try {
        var func = getNative(Object, "defineProperty");
        func({}, "", {});
        return func;
      } catch (e) {
      }
    }();
    module.exports = defineProperty;
  }
});

// node_modules/lodash/_baseSetToString.js
var require_baseSetToString = __commonJS({
  "node_modules/lodash/_baseSetToString.js"(exports, module) {
    var constant = require_constant();
    var defineProperty = require_defineProperty();
    var identity = require_identity();
    var baseSetToString = !defineProperty ? identity : function(func, string) {
      return defineProperty(func, "toString", {
        "configurable": true,
        "enumerable": false,
        "value": constant(string),
        "writable": true
      });
    };
    module.exports = baseSetToString;
  }
});

// node_modules/lodash/_setToString.js
var require_setToString = __commonJS({
  "node_modules/lodash/_setToString.js"(exports, module) {
    var baseSetToString = require_baseSetToString();
    var shortOut = require_shortOut();
    var setToString = shortOut(baseSetToString);
    module.exports = setToString;
  }
});

// node_modules/lodash/_arrayEach.js
var require_arrayEach = __commonJS({
  "node_modules/lodash/_arrayEach.js"(exports, module) {
    function arrayEach(array, iteratee) {
      var index = -1, length = array == null ? 0 : array.length;
      while (++index < length) {
        if (iteratee(array[index], index, array) === false) {
          break;
        }
      }
      return array;
    }
    module.exports = arrayEach;
  }
});

// node_modules/lodash/_baseFindIndex.js
var require_baseFindIndex = __commonJS({
  "node_modules/lodash/_baseFindIndex.js"(exports, module) {
    function baseFindIndex(array, predicate, fromIndex, fromRight) {
      var length = array.length, index = fromIndex + (fromRight ? 1 : -1);
      while (fromRight ? index-- : ++index < length) {
        if (predicate(array[index], index, array)) {
          return index;
        }
      }
      return -1;
    }
    module.exports = baseFindIndex;
  }
});

// node_modules/lodash/_baseIsNaN.js
var require_baseIsNaN = __commonJS({
  "node_modules/lodash/_baseIsNaN.js"(exports, module) {
    function baseIsNaN(value) {
      return value !== value;
    }
    module.exports = baseIsNaN;
  }
});

// node_modules/lodash/_strictIndexOf.js
var require_strictIndexOf = __commonJS({
  "node_modules/lodash/_strictIndexOf.js"(exports, module) {
    function strictIndexOf(array, value, fromIndex) {
      var index = fromIndex - 1, length = array.length;
      while (++index < length) {
        if (array[index] === value) {
          return index;
        }
      }
      return -1;
    }
    module.exports = strictIndexOf;
  }
});

// node_modules/lodash/_baseIndexOf.js
var require_baseIndexOf = __commonJS({
  "node_modules/lodash/_baseIndexOf.js"(exports, module) {
    var baseFindIndex = require_baseFindIndex();
    var baseIsNaN = require_baseIsNaN();
    var strictIndexOf = require_strictIndexOf();
    function baseIndexOf(array, value, fromIndex) {
      return value === value ? strictIndexOf(array, value, fromIndex) : baseFindIndex(array, baseIsNaN, fromIndex);
    }
    module.exports = baseIndexOf;
  }
});

// node_modules/lodash/_arrayIncludes.js
var require_arrayIncludes = __commonJS({
  "node_modules/lodash/_arrayIncludes.js"(exports, module) {
    var baseIndexOf = require_baseIndexOf();
    function arrayIncludes(array, value) {
      var length = array == null ? 0 : array.length;
      return !!length && baseIndexOf(array, value, 0) > -1;
    }
    module.exports = arrayIncludes;
  }
});

// node_modules/lodash/_updateWrapDetails.js
var require_updateWrapDetails = __commonJS({
  "node_modules/lodash/_updateWrapDetails.js"(exports, module) {
    var arrayEach = require_arrayEach();
    var arrayIncludes = require_arrayIncludes();
    var WRAP_BIND_FLAG = 1;
    var WRAP_BIND_KEY_FLAG = 2;
    var WRAP_CURRY_FLAG = 8;
    var WRAP_CURRY_RIGHT_FLAG = 16;
    var WRAP_PARTIAL_FLAG = 32;
    var WRAP_PARTIAL_RIGHT_FLAG = 64;
    var WRAP_ARY_FLAG = 128;
    var WRAP_REARG_FLAG = 256;
    var WRAP_FLIP_FLAG = 512;
    var wrapFlags = [
      ["ary", WRAP_ARY_FLAG],
      ["bind", WRAP_BIND_FLAG],
      ["bindKey", WRAP_BIND_KEY_FLAG],
      ["curry", WRAP_CURRY_FLAG],
      ["curryRight", WRAP_CURRY_RIGHT_FLAG],
      ["flip", WRAP_FLIP_FLAG],
      ["partial", WRAP_PARTIAL_FLAG],
      ["partialRight", WRAP_PARTIAL_RIGHT_FLAG],
      ["rearg", WRAP_REARG_FLAG]
    ];
    function updateWrapDetails(details, bitmask) {
      arrayEach(wrapFlags, function(pair) {
        var value = "_." + pair[0];
        if (bitmask & pair[1] && !arrayIncludes(details, value)) {
          details.push(value);
        }
      });
      return details.sort();
    }
    module.exports = updateWrapDetails;
  }
});

// node_modules/lodash/_setWrapToString.js
var require_setWrapToString = __commonJS({
  "node_modules/lodash/_setWrapToString.js"(exports, module) {
    var getWrapDetails = require_getWrapDetails();
    var insertWrapDetails = require_insertWrapDetails();
    var setToString = require_setToString();
    var updateWrapDetails = require_updateWrapDetails();
    function setWrapToString(wrapper, reference, bitmask) {
      var source = reference + "";
      return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
    }
    module.exports = setWrapToString;
  }
});

// node_modules/lodash/_createRecurry.js
var require_createRecurry = __commonJS({
  "node_modules/lodash/_createRecurry.js"(exports, module) {
    var isLaziable = require_isLaziable();
    var setData = require_setData();
    var setWrapToString = require_setWrapToString();
    var WRAP_BIND_FLAG = 1;
    var WRAP_BIND_KEY_FLAG = 2;
    var WRAP_CURRY_BOUND_FLAG = 4;
    var WRAP_CURRY_FLAG = 8;
    var WRAP_PARTIAL_FLAG = 32;
    var WRAP_PARTIAL_RIGHT_FLAG = 64;
    function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
      var isCurry = bitmask & WRAP_CURRY_FLAG, newHolders = isCurry ? holders : void 0, newHoldersRight = isCurry ? void 0 : holders, newPartials = isCurry ? partials : void 0, newPartialsRight = isCurry ? void 0 : partials;
      bitmask |= isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG;
      bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);
      if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
        bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
      }
      var newData = [
        func,
        bitmask,
        thisArg,
        newPartials,
        newHolders,
        newPartialsRight,
        newHoldersRight,
        argPos,
        ary,
        arity
      ];
      var result = wrapFunc.apply(void 0, newData);
      if (isLaziable(func)) {
        setData(result, newData);
      }
      result.placeholder = placeholder;
      return setWrapToString(result, func, bitmask);
    }
    module.exports = createRecurry;
  }
});

// node_modules/lodash/_getHolder.js
var require_getHolder = __commonJS({
  "node_modules/lodash/_getHolder.js"(exports, module) {
    function getHolder(func) {
      var object = func;
      return object.placeholder;
    }
    module.exports = getHolder;
  }
});

// node_modules/lodash/_isIndex.js
var require_isIndex = __commonJS({
  "node_modules/lodash/_isIndex.js"(exports, module) {
    var MAX_SAFE_INTEGER = 9007199254740991;
    var reIsUint = /^(?:0|[1-9]\d*)$/;
    function isIndex(value, length) {
      var type = typeof value;
      length = length == null ? MAX_SAFE_INTEGER : length;
      return !!length && (type == "number" || type != "symbol" && reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length);
    }
    module.exports = isIndex;
  }
});

// node_modules/lodash/_reorder.js
var require_reorder = __commonJS({
  "node_modules/lodash/_reorder.js"(exports, module) {
    var copyArray = require_copyArray();
    var isIndex = require_isIndex();
    var nativeMin = Math.min;
    function reorder(array, indexes) {
      var arrLength = array.length, length = nativeMin(indexes.length, arrLength), oldArray = copyArray(array);
      while (length--) {
        var index = indexes[length];
        array[length] = isIndex(index, arrLength) ? oldArray[index] : void 0;
      }
      return array;
    }
    module.exports = reorder;
  }
});

// node_modules/lodash/_replaceHolders.js
var require_replaceHolders = __commonJS({
  "node_modules/lodash/_replaceHolders.js"(exports, module) {
    var PLACEHOLDER = "__lodash_placeholder__";
    function replaceHolders(array, placeholder) {
      var index = -1, length = array.length, resIndex = 0, result = [];
      while (++index < length) {
        var value = array[index];
        if (value === placeholder || value === PLACEHOLDER) {
          array[index] = PLACEHOLDER;
          result[resIndex++] = index;
        }
      }
      return result;
    }
    module.exports = replaceHolders;
  }
});

// node_modules/lodash/_createHybrid.js
var require_createHybrid = __commonJS({
  "node_modules/lodash/_createHybrid.js"(exports, module) {
    var composeArgs = require_composeArgs();
    var composeArgsRight = require_composeArgsRight();
    var countHolders = require_countHolders();
    var createCtor = require_createCtor();
    var createRecurry = require_createRecurry();
    var getHolder = require_getHolder();
    var reorder = require_reorder();
    var replaceHolders = require_replaceHolders();
    var root = require_root();
    var WRAP_BIND_FLAG = 1;
    var WRAP_BIND_KEY_FLAG = 2;
    var WRAP_CURRY_FLAG = 8;
    var WRAP_CURRY_RIGHT_FLAG = 16;
    var WRAP_ARY_FLAG = 128;
    var WRAP_FLIP_FLAG = 512;
    function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
      var isAry = bitmask & WRAP_ARY_FLAG, isBind = bitmask & WRAP_BIND_FLAG, isBindKey = bitmask & WRAP_BIND_KEY_FLAG, isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG), isFlip = bitmask & WRAP_FLIP_FLAG, Ctor = isBindKey ? void 0 : createCtor(func);
      function wrapper() {
        var length = arguments.length, args = Array(length), index = length;
        while (index--) {
          args[index] = arguments[index];
        }
        if (isCurried) {
          var placeholder = getHolder(wrapper), holdersCount = countHolders(args, placeholder);
        }
        if (partials) {
          args = composeArgs(args, partials, holders, isCurried);
        }
        if (partialsRight) {
          args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
        }
        length -= holdersCount;
        if (isCurried && length < arity) {
          var newHolders = replaceHolders(args, placeholder);
          return createRecurry(
            func,
            bitmask,
            createHybrid,
            wrapper.placeholder,
            thisArg,
            args,
            newHolders,
            argPos,
            ary,
            arity - length
          );
        }
        var thisBinding = isBind ? thisArg : this, fn = isBindKey ? thisBinding[func] : func;
        length = args.length;
        if (argPos) {
          args = reorder(args, argPos);
        } else if (isFlip && length > 1) {
          args.reverse();
        }
        if (isAry && ary < length) {
          args.length = ary;
        }
        if (this && this !== root && this instanceof wrapper) {
          fn = Ctor || createCtor(fn);
        }
        return fn.apply(thisBinding, args);
      }
      return wrapper;
    }
    module.exports = createHybrid;
  }
});

// node_modules/lodash/_createCurry.js
var require_createCurry = __commonJS({
  "node_modules/lodash/_createCurry.js"(exports, module) {
    var apply = require_apply();
    var createCtor = require_createCtor();
    var createHybrid = require_createHybrid();
    var createRecurry = require_createRecurry();
    var getHolder = require_getHolder();
    var replaceHolders = require_replaceHolders();
    var root = require_root();
    function createCurry(func, bitmask, arity) {
      var Ctor = createCtor(func);
      function wrapper() {
        var length = arguments.length, args = Array(length), index = length, placeholder = getHolder(wrapper);
        while (index--) {
          args[index] = arguments[index];
        }
        var holders = length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder ? [] : replaceHolders(args, placeholder);
        length -= holders.length;
        if (length < arity) {
          return createRecurry(
            func,
            bitmask,
            createHybrid,
            wrapper.placeholder,
            void 0,
            args,
            holders,
            void 0,
            void 0,
            arity - length
          );
        }
        var fn = this && this !== root && this instanceof wrapper ? Ctor : func;
        return apply(fn, this, args);
      }
      return wrapper;
    }
    module.exports = createCurry;
  }
});

// node_modules/lodash/_createPartial.js
var require_createPartial = __commonJS({
  "node_modules/lodash/_createPartial.js"(exports, module) {
    var apply = require_apply();
    var createCtor = require_createCtor();
    var root = require_root();
    var WRAP_BIND_FLAG = 1;
    function createPartial(func, bitmask, thisArg, partials) {
      var isBind = bitmask & WRAP_BIND_FLAG, Ctor = createCtor(func);
      function wrapper() {
        var argsIndex = -1, argsLength = arguments.length, leftIndex = -1, leftLength = partials.length, args = Array(leftLength + argsLength), fn = this && this !== root && this instanceof wrapper ? Ctor : func;
        while (++leftIndex < leftLength) {
          args[leftIndex] = partials[leftIndex];
        }
        while (argsLength--) {
          args[leftIndex++] = arguments[++argsIndex];
        }
        return apply(fn, isBind ? thisArg : this, args);
      }
      return wrapper;
    }
    module.exports = createPartial;
  }
});

// node_modules/lodash/_mergeData.js
var require_mergeData = __commonJS({
  "node_modules/lodash/_mergeData.js"(exports, module) {
    var composeArgs = require_composeArgs();
    var composeArgsRight = require_composeArgsRight();
    var replaceHolders = require_replaceHolders();
    var PLACEHOLDER = "__lodash_placeholder__";
    var WRAP_BIND_FLAG = 1;
    var WRAP_BIND_KEY_FLAG = 2;
    var WRAP_CURRY_BOUND_FLAG = 4;
    var WRAP_CURRY_FLAG = 8;
    var WRAP_ARY_FLAG = 128;
    var WRAP_REARG_FLAG = 256;
    var nativeMin = Math.min;
    function mergeData(data, source) {
      var bitmask = data[1], srcBitmask = source[1], newBitmask = bitmask | srcBitmask, isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);
      var isCombo = srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_CURRY_FLAG || srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_REARG_FLAG && data[7].length <= source[8] || srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG) && source[7].length <= source[8] && bitmask == WRAP_CURRY_FLAG;
      if (!(isCommon || isCombo)) {
        return data;
      }
      if (srcBitmask & WRAP_BIND_FLAG) {
        data[2] = source[2];
        newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
      }
      var value = source[3];
      if (value) {
        var partials = data[3];
        data[3] = partials ? composeArgs(partials, value, source[4]) : value;
        data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
      }
      value = source[5];
      if (value) {
        partials = data[5];
        data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
        data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
      }
      value = source[7];
      if (value) {
        data[7] = value;
      }
      if (srcBitmask & WRAP_ARY_FLAG) {
        data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
      }
      if (data[9] == null) {
        data[9] = source[9];
      }
      data[0] = source[0];
      data[1] = newBitmask;
      return data;
    }
    module.exports = mergeData;
  }
});

// node_modules/lodash/toFinite.js
var require_toFinite = __commonJS({
  "node_modules/lodash/toFinite.js"(exports, module) {
    var toNumber = require_toNumber();
    var INFINITY = 1 / 0;
    var MAX_INTEGER = 17976931348623157e292;
    function toFinite(value) {
      if (!value) {
        return value === 0 ? value : 0;
      }
      value = toNumber(value);
      if (value === INFINITY || value === -INFINITY) {
        var sign = value < 0 ? -1 : 1;
        return sign * MAX_INTEGER;
      }
      return value === value ? value : 0;
    }
    module.exports = toFinite;
  }
});

// node_modules/lodash/toInteger.js
var require_toInteger = __commonJS({
  "node_modules/lodash/toInteger.js"(exports, module) {
    var toFinite = require_toFinite();
    function toInteger(value) {
      var result = toFinite(value), remainder = result % 1;
      return result === result ? remainder ? result - remainder : result : 0;
    }
    module.exports = toInteger;
  }
});

// node_modules/lodash/_createWrap.js
var require_createWrap = __commonJS({
  "node_modules/lodash/_createWrap.js"(exports, module) {
    var baseSetData = require_baseSetData();
    var createBind = require_createBind();
    var createCurry = require_createCurry();
    var createHybrid = require_createHybrid();
    var createPartial = require_createPartial();
    var getData = require_getData();
    var mergeData = require_mergeData();
    var setData = require_setData();
    var setWrapToString = require_setWrapToString();
    var toInteger = require_toInteger();
    var FUNC_ERROR_TEXT = "Expected a function";
    var WRAP_BIND_FLAG = 1;
    var WRAP_BIND_KEY_FLAG = 2;
    var WRAP_CURRY_FLAG = 8;
    var WRAP_CURRY_RIGHT_FLAG = 16;
    var WRAP_PARTIAL_FLAG = 32;
    var WRAP_PARTIAL_RIGHT_FLAG = 64;
    var nativeMax = Math.max;
    function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
      var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
      if (!isBindKey && typeof func != "function") {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var length = partials ? partials.length : 0;
      if (!length) {
        bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
        partials = holders = void 0;
      }
      ary = ary === void 0 ? ary : nativeMax(toInteger(ary), 0);
      arity = arity === void 0 ? arity : toInteger(arity);
      length -= holders ? holders.length : 0;
      if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
        var partialsRight = partials, holdersRight = holders;
        partials = holders = void 0;
      }
      var data = isBindKey ? void 0 : getData(func);
      var newData = [
        func,
        bitmask,
        thisArg,
        partials,
        holders,
        partialsRight,
        holdersRight,
        argPos,
        ary,
        arity
      ];
      if (data) {
        mergeData(newData, data);
      }
      func = newData[0];
      bitmask = newData[1];
      thisArg = newData[2];
      partials = newData[3];
      holders = newData[4];
      arity = newData[9] = newData[9] === void 0 ? isBindKey ? 0 : func.length : nativeMax(newData[9] - length, 0);
      if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
        bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
      }
      if (!bitmask || bitmask == WRAP_BIND_FLAG) {
        var result = createBind(func, bitmask, thisArg);
      } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
        result = createCurry(func, bitmask, arity);
      } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
        result = createPartial(func, bitmask, thisArg, partials);
      } else {
        result = createHybrid.apply(void 0, newData);
      }
      var setter = data ? baseSetData : setData;
      return setWrapToString(setter(result, newData), func, bitmask);
    }
    module.exports = createWrap;
  }
});

// node_modules/lodash/curry.js
var require_curry = __commonJS({
  "node_modules/lodash/curry.js"(exports, module) {
    var createWrap = require_createWrap();
    var WRAP_CURRY_FLAG = 8;
    function curry2(func, arity, guard) {
      arity = guard ? void 0 : arity;
      var result = createWrap(func, WRAP_CURRY_FLAG, void 0, void 0, void 0, void 0, void 0, arity);
      result.placeholder = curry2.placeholder;
      return result;
    }
    curry2.placeholder = {};
    module.exports = curry2;
  }
});

// node_modules/lodash/_overArg.js
var require_overArg = __commonJS({
  "node_modules/lodash/_overArg.js"(exports, module) {
    function overArg(func, transform) {
      return function(arg) {
        return func(transform(arg));
      };
    }
    module.exports = overArg;
  }
});

// node_modules/lodash/_getPrototype.js
var require_getPrototype = __commonJS({
  "node_modules/lodash/_getPrototype.js"(exports, module) {
    var overArg = require_overArg();
    var getPrototype = overArg(Object.getPrototypeOf, Object);
    module.exports = getPrototype;
  }
});

// node_modules/lodash/isPlainObject.js
var require_isPlainObject = __commonJS({
  "node_modules/lodash/isPlainObject.js"(exports, module) {
    var baseGetTag = require_baseGetTag();
    var getPrototype = require_getPrototype();
    var isObjectLike = require_isObjectLike();
    var objectTag = "[object Object]";
    var funcProto = Function.prototype;
    var objectProto = Object.prototype;
    var funcToString = funcProto.toString;
    var hasOwnProperty = objectProto.hasOwnProperty;
    var objectCtorString = funcToString.call(Object);
    function isPlainObject2(value) {
      if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
        return false;
      }
      var proto = getPrototype(value);
      if (proto === null) {
        return true;
      }
      var Ctor = hasOwnProperty.call(proto, "constructor") && proto.constructor;
      return typeof Ctor == "function" && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
    }
    module.exports = isPlainObject2;
  }
});

// node_modules/lodash/_isKey.js
var require_isKey = __commonJS({
  "node_modules/lodash/_isKey.js"(exports, module) {
    var isArray = require_isArray();
    var isSymbol = require_isSymbol();
    var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/;
    var reIsPlainProp = /^\w*$/;
    function isKey(value, object) {
      if (isArray(value)) {
        return false;
      }
      var type = typeof value;
      if (type == "number" || type == "symbol" || type == "boolean" || value == null || isSymbol(value)) {
        return true;
      }
      return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object(object);
    }
    module.exports = isKey;
  }
});

// node_modules/lodash/_nativeCreate.js
var require_nativeCreate = __commonJS({
  "node_modules/lodash/_nativeCreate.js"(exports, module) {
    var getNative = require_getNative();
    var nativeCreate = getNative(Object, "create");
    module.exports = nativeCreate;
  }
});

// node_modules/lodash/_hashClear.js
var require_hashClear = __commonJS({
  "node_modules/lodash/_hashClear.js"(exports, module) {
    var nativeCreate = require_nativeCreate();
    function hashClear() {
      this.__data__ = nativeCreate ? nativeCreate(null) : {};
      this.size = 0;
    }
    module.exports = hashClear;
  }
});

// node_modules/lodash/_hashDelete.js
var require_hashDelete = __commonJS({
  "node_modules/lodash/_hashDelete.js"(exports, module) {
    function hashDelete(key) {
      var result = this.has(key) && delete this.__data__[key];
      this.size -= result ? 1 : 0;
      return result;
    }
    module.exports = hashDelete;
  }
});

// node_modules/lodash/_hashGet.js
var require_hashGet = __commonJS({
  "node_modules/lodash/_hashGet.js"(exports, module) {
    var nativeCreate = require_nativeCreate();
    var HASH_UNDEFINED = "__lodash_hash_undefined__";
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    function hashGet(key) {
      var data = this.__data__;
      if (nativeCreate) {
        var result = data[key];
        return result === HASH_UNDEFINED ? void 0 : result;
      }
      return hasOwnProperty.call(data, key) ? data[key] : void 0;
    }
    module.exports = hashGet;
  }
});

// node_modules/lodash/_hashHas.js
var require_hashHas = __commonJS({
  "node_modules/lodash/_hashHas.js"(exports, module) {
    var nativeCreate = require_nativeCreate();
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    function hashHas(key) {
      var data = this.__data__;
      return nativeCreate ? data[key] !== void 0 : hasOwnProperty.call(data, key);
    }
    module.exports = hashHas;
  }
});

// node_modules/lodash/_hashSet.js
var require_hashSet = __commonJS({
  "node_modules/lodash/_hashSet.js"(exports, module) {
    var nativeCreate = require_nativeCreate();
    var HASH_UNDEFINED = "__lodash_hash_undefined__";
    function hashSet(key, value) {
      var data = this.__data__;
      this.size += this.has(key) ? 0 : 1;
      data[key] = nativeCreate && value === void 0 ? HASH_UNDEFINED : value;
      return this;
    }
    module.exports = hashSet;
  }
});

// node_modules/lodash/_Hash.js
var require_Hash = __commonJS({
  "node_modules/lodash/_Hash.js"(exports, module) {
    var hashClear = require_hashClear();
    var hashDelete = require_hashDelete();
    var hashGet = require_hashGet();
    var hashHas = require_hashHas();
    var hashSet = require_hashSet();
    function Hash(entries) {
      var index = -1, length = entries == null ? 0 : entries.length;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    Hash.prototype.clear = hashClear;
    Hash.prototype["delete"] = hashDelete;
    Hash.prototype.get = hashGet;
    Hash.prototype.has = hashHas;
    Hash.prototype.set = hashSet;
    module.exports = Hash;
  }
});

// node_modules/lodash/_listCacheClear.js
var require_listCacheClear = __commonJS({
  "node_modules/lodash/_listCacheClear.js"(exports, module) {
    function listCacheClear() {
      this.__data__ = [];
      this.size = 0;
    }
    module.exports = listCacheClear;
  }
});

// node_modules/lodash/eq.js
var require_eq = __commonJS({
  "node_modules/lodash/eq.js"(exports, module) {
    function eq(value, other) {
      return value === other || value !== value && other !== other;
    }
    module.exports = eq;
  }
});

// node_modules/lodash/_assocIndexOf.js
var require_assocIndexOf = __commonJS({
  "node_modules/lodash/_assocIndexOf.js"(exports, module) {
    var eq = require_eq();
    function assocIndexOf(array, key) {
      var length = array.length;
      while (length--) {
        if (eq(array[length][0], key)) {
          return length;
        }
      }
      return -1;
    }
    module.exports = assocIndexOf;
  }
});

// node_modules/lodash/_listCacheDelete.js
var require_listCacheDelete = __commonJS({
  "node_modules/lodash/_listCacheDelete.js"(exports, module) {
    var assocIndexOf = require_assocIndexOf();
    var arrayProto = Array.prototype;
    var splice = arrayProto.splice;
    function listCacheDelete(key) {
      var data = this.__data__, index = assocIndexOf(data, key);
      if (index < 0) {
        return false;
      }
      var lastIndex = data.length - 1;
      if (index == lastIndex) {
        data.pop();
      } else {
        splice.call(data, index, 1);
      }
      --this.size;
      return true;
    }
    module.exports = listCacheDelete;
  }
});

// node_modules/lodash/_listCacheGet.js
var require_listCacheGet = __commonJS({
  "node_modules/lodash/_listCacheGet.js"(exports, module) {
    var assocIndexOf = require_assocIndexOf();
    function listCacheGet(key) {
      var data = this.__data__, index = assocIndexOf(data, key);
      return index < 0 ? void 0 : data[index][1];
    }
    module.exports = listCacheGet;
  }
});

// node_modules/lodash/_listCacheHas.js
var require_listCacheHas = __commonJS({
  "node_modules/lodash/_listCacheHas.js"(exports, module) {
    var assocIndexOf = require_assocIndexOf();
    function listCacheHas(key) {
      return assocIndexOf(this.__data__, key) > -1;
    }
    module.exports = listCacheHas;
  }
});

// node_modules/lodash/_listCacheSet.js
var require_listCacheSet = __commonJS({
  "node_modules/lodash/_listCacheSet.js"(exports, module) {
    var assocIndexOf = require_assocIndexOf();
    function listCacheSet(key, value) {
      var data = this.__data__, index = assocIndexOf(data, key);
      if (index < 0) {
        ++this.size;
        data.push([key, value]);
      } else {
        data[index][1] = value;
      }
      return this;
    }
    module.exports = listCacheSet;
  }
});

// node_modules/lodash/_ListCache.js
var require_ListCache = __commonJS({
  "node_modules/lodash/_ListCache.js"(exports, module) {
    var listCacheClear = require_listCacheClear();
    var listCacheDelete = require_listCacheDelete();
    var listCacheGet = require_listCacheGet();
    var listCacheHas = require_listCacheHas();
    var listCacheSet = require_listCacheSet();
    function ListCache(entries) {
      var index = -1, length = entries == null ? 0 : entries.length;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    ListCache.prototype.clear = listCacheClear;
    ListCache.prototype["delete"] = listCacheDelete;
    ListCache.prototype.get = listCacheGet;
    ListCache.prototype.has = listCacheHas;
    ListCache.prototype.set = listCacheSet;
    module.exports = ListCache;
  }
});

// node_modules/lodash/_Map.js
var require_Map = __commonJS({
  "node_modules/lodash/_Map.js"(exports, module) {
    var getNative = require_getNative();
    var root = require_root();
    var Map = getNative(root, "Map");
    module.exports = Map;
  }
});

// node_modules/lodash/_mapCacheClear.js
var require_mapCacheClear = __commonJS({
  "node_modules/lodash/_mapCacheClear.js"(exports, module) {
    var Hash = require_Hash();
    var ListCache = require_ListCache();
    var Map = require_Map();
    function mapCacheClear() {
      this.size = 0;
      this.__data__ = {
        "hash": new Hash(),
        "map": new (Map || ListCache)(),
        "string": new Hash()
      };
    }
    module.exports = mapCacheClear;
  }
});

// node_modules/lodash/_isKeyable.js
var require_isKeyable = __commonJS({
  "node_modules/lodash/_isKeyable.js"(exports, module) {
    function isKeyable(value) {
      var type = typeof value;
      return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
    }
    module.exports = isKeyable;
  }
});

// node_modules/lodash/_getMapData.js
var require_getMapData = __commonJS({
  "node_modules/lodash/_getMapData.js"(exports, module) {
    var isKeyable = require_isKeyable();
    function getMapData(map, key) {
      var data = map.__data__;
      return isKeyable(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
    }
    module.exports = getMapData;
  }
});

// node_modules/lodash/_mapCacheDelete.js
var require_mapCacheDelete = __commonJS({
  "node_modules/lodash/_mapCacheDelete.js"(exports, module) {
    var getMapData = require_getMapData();
    function mapCacheDelete(key) {
      var result = getMapData(this, key)["delete"](key);
      this.size -= result ? 1 : 0;
      return result;
    }
    module.exports = mapCacheDelete;
  }
});

// node_modules/lodash/_mapCacheGet.js
var require_mapCacheGet = __commonJS({
  "node_modules/lodash/_mapCacheGet.js"(exports, module) {
    var getMapData = require_getMapData();
    function mapCacheGet(key) {
      return getMapData(this, key).get(key);
    }
    module.exports = mapCacheGet;
  }
});

// node_modules/lodash/_mapCacheHas.js
var require_mapCacheHas = __commonJS({
  "node_modules/lodash/_mapCacheHas.js"(exports, module) {
    var getMapData = require_getMapData();
    function mapCacheHas(key) {
      return getMapData(this, key).has(key);
    }
    module.exports = mapCacheHas;
  }
});

// node_modules/lodash/_mapCacheSet.js
var require_mapCacheSet = __commonJS({
  "node_modules/lodash/_mapCacheSet.js"(exports, module) {
    var getMapData = require_getMapData();
    function mapCacheSet(key, value) {
      var data = getMapData(this, key), size2 = data.size;
      data.set(key, value);
      this.size += data.size == size2 ? 0 : 1;
      return this;
    }
    module.exports = mapCacheSet;
  }
});

// node_modules/lodash/_MapCache.js
var require_MapCache = __commonJS({
  "node_modules/lodash/_MapCache.js"(exports, module) {
    var mapCacheClear = require_mapCacheClear();
    var mapCacheDelete = require_mapCacheDelete();
    var mapCacheGet = require_mapCacheGet();
    var mapCacheHas = require_mapCacheHas();
    var mapCacheSet = require_mapCacheSet();
    function MapCache(entries) {
      var index = -1, length = entries == null ? 0 : entries.length;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    MapCache.prototype.clear = mapCacheClear;
    MapCache.prototype["delete"] = mapCacheDelete;
    MapCache.prototype.get = mapCacheGet;
    MapCache.prototype.has = mapCacheHas;
    MapCache.prototype.set = mapCacheSet;
    module.exports = MapCache;
  }
});

// node_modules/lodash/memoize.js
var require_memoize = __commonJS({
  "node_modules/lodash/memoize.js"(exports, module) {
    var MapCache = require_MapCache();
    var FUNC_ERROR_TEXT = "Expected a function";
    function memoize(func, resolver) {
      if (typeof func != "function" || resolver != null && typeof resolver != "function") {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var memoized2 = function() {
        var args = arguments, key = resolver ? resolver.apply(this, args) : args[0], cache2 = memoized2.cache;
        if (cache2.has(key)) {
          return cache2.get(key);
        }
        var result = func.apply(this, args);
        memoized2.cache = cache2.set(key, result) || cache2;
        return result;
      };
      memoized2.cache = new (memoize.Cache || MapCache)();
      return memoized2;
    }
    memoize.Cache = MapCache;
    module.exports = memoize;
  }
});

// node_modules/lodash/_memoizeCapped.js
var require_memoizeCapped = __commonJS({
  "node_modules/lodash/_memoizeCapped.js"(exports, module) {
    var memoize = require_memoize();
    var MAX_MEMOIZE_SIZE = 500;
    function memoizeCapped(func) {
      var result = memoize(func, function(key) {
        if (cache2.size === MAX_MEMOIZE_SIZE) {
          cache2.clear();
        }
        return key;
      });
      var cache2 = result.cache;
      return result;
    }
    module.exports = memoizeCapped;
  }
});

// node_modules/lodash/_stringToPath.js
var require_stringToPath = __commonJS({
  "node_modules/lodash/_stringToPath.js"(exports, module) {
    var memoizeCapped = require_memoizeCapped();
    var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
    var reEscapeChar = /\\(\\)?/g;
    var stringToPath = memoizeCapped(function(string) {
      var result = [];
      if (string.charCodeAt(0) === 46) {
        result.push("");
      }
      string.replace(rePropName, function(match, number, quote, subString) {
        result.push(quote ? subString.replace(reEscapeChar, "$1") : number || match);
      });
      return result;
    });
    module.exports = stringToPath;
  }
});

// node_modules/lodash/_arrayMap.js
var require_arrayMap = __commonJS({
  "node_modules/lodash/_arrayMap.js"(exports, module) {
    function arrayMap(array, iteratee) {
      var index = -1, length = array == null ? 0 : array.length, result = Array(length);
      while (++index < length) {
        result[index] = iteratee(array[index], index, array);
      }
      return result;
    }
    module.exports = arrayMap;
  }
});

// node_modules/lodash/_baseToString.js
var require_baseToString = __commonJS({
  "node_modules/lodash/_baseToString.js"(exports, module) {
    var Symbol2 = require_Symbol();
    var arrayMap = require_arrayMap();
    var isArray = require_isArray();
    var isSymbol = require_isSymbol();
    var INFINITY = 1 / 0;
    var symbolProto = Symbol2 ? Symbol2.prototype : void 0;
    var symbolToString = symbolProto ? symbolProto.toString : void 0;
    function baseToString(value) {
      if (typeof value == "string") {
        return value;
      }
      if (isArray(value)) {
        return arrayMap(value, baseToString) + "";
      }
      if (isSymbol(value)) {
        return symbolToString ? symbolToString.call(value) : "";
      }
      var result = value + "";
      return result == "0" && 1 / value == -INFINITY ? "-0" : result;
    }
    module.exports = baseToString;
  }
});

// node_modules/lodash/toString.js
var require_toString = __commonJS({
  "node_modules/lodash/toString.js"(exports, module) {
    var baseToString = require_baseToString();
    function toString(value) {
      return value == null ? "" : baseToString(value);
    }
    module.exports = toString;
  }
});

// node_modules/lodash/_castPath.js
var require_castPath = __commonJS({
  "node_modules/lodash/_castPath.js"(exports, module) {
    var isArray = require_isArray();
    var isKey = require_isKey();
    var stringToPath = require_stringToPath();
    var toString = require_toString();
    function castPath(value, object) {
      if (isArray(value)) {
        return value;
      }
      return isKey(value, object) ? [value] : stringToPath(toString(value));
    }
    module.exports = castPath;
  }
});

// node_modules/lodash/_toKey.js
var require_toKey = __commonJS({
  "node_modules/lodash/_toKey.js"(exports, module) {
    var isSymbol = require_isSymbol();
    var INFINITY = 1 / 0;
    function toKey(value) {
      if (typeof value == "string" || isSymbol(value)) {
        return value;
      }
      var result = value + "";
      return result == "0" && 1 / value == -INFINITY ? "-0" : result;
    }
    module.exports = toKey;
  }
});

// node_modules/lodash/_baseGet.js
var require_baseGet = __commonJS({
  "node_modules/lodash/_baseGet.js"(exports, module) {
    var castPath = require_castPath();
    var toKey = require_toKey();
    function baseGet(object, path) {
      path = castPath(path, object);
      var index = 0, length = path.length;
      while (object != null && index < length) {
        object = object[toKey(path[index++])];
      }
      return index && index == length ? object : void 0;
    }
    module.exports = baseGet;
  }
});

// node_modules/lodash/get.js
var require_get = __commonJS({
  "node_modules/lodash/get.js"(exports, module) {
    var baseGet = require_baseGet();
    function get3(object, path, defaultValue) {
      var result = object == null ? void 0 : baseGet(object, path);
      return result === void 0 ? defaultValue : result;
    }
    module.exports = get3;
  }
});

// node_modules/lodash/isNil.js
var require_isNil = __commonJS({
  "node_modules/lodash/isNil.js"(exports, module) {
    function isNil4(value) {
      return value == null;
    }
    module.exports = isNil4;
  }
});

// node_modules/lodash/_baseClamp.js
var require_baseClamp = __commonJS({
  "node_modules/lodash/_baseClamp.js"(exports, module) {
    function baseClamp(number, lower, upper) {
      if (number === number) {
        if (upper !== void 0) {
          number = number <= upper ? number : upper;
        }
        if (lower !== void 0) {
          number = number >= lower ? number : lower;
        }
      }
      return number;
    }
    module.exports = baseClamp;
  }
});

// node_modules/lodash/clamp.js
var require_clamp = __commonJS({
  "node_modules/lodash/clamp.js"(exports, module) {
    var baseClamp = require_baseClamp();
    var toNumber = require_toNumber();
    function clamp2(number, lower, upper) {
      if (upper === void 0) {
        upper = lower;
        lower = void 0;
      }
      if (upper !== void 0) {
        upper = toNumber(upper);
        upper = upper === upper ? upper : 0;
      }
      if (lower !== void 0) {
        lower = toNumber(lower);
        lower = lower === lower ? lower : 0;
      }
      return baseClamp(toNumber(number), lower, upper);
    }
    module.exports = clamp2;
  }
});

// node_modules/lodash/_stackClear.js
var require_stackClear = __commonJS({
  "node_modules/lodash/_stackClear.js"(exports, module) {
    var ListCache = require_ListCache();
    function stackClear() {
      this.__data__ = new ListCache();
      this.size = 0;
    }
    module.exports = stackClear;
  }
});

// node_modules/lodash/_stackDelete.js
var require_stackDelete = __commonJS({
  "node_modules/lodash/_stackDelete.js"(exports, module) {
    function stackDelete(key) {
      var data = this.__data__, result = data["delete"](key);
      this.size = data.size;
      return result;
    }
    module.exports = stackDelete;
  }
});

// node_modules/lodash/_stackGet.js
var require_stackGet = __commonJS({
  "node_modules/lodash/_stackGet.js"(exports, module) {
    function stackGet(key) {
      return this.__data__.get(key);
    }
    module.exports = stackGet;
  }
});

// node_modules/lodash/_stackHas.js
var require_stackHas = __commonJS({
  "node_modules/lodash/_stackHas.js"(exports, module) {
    function stackHas(key) {
      return this.__data__.has(key);
    }
    module.exports = stackHas;
  }
});

// node_modules/lodash/_stackSet.js
var require_stackSet = __commonJS({
  "node_modules/lodash/_stackSet.js"(exports, module) {
    var ListCache = require_ListCache();
    var Map = require_Map();
    var MapCache = require_MapCache();
    var LARGE_ARRAY_SIZE = 200;
    function stackSet(key, value) {
      var data = this.__data__;
      if (data instanceof ListCache) {
        var pairs = data.__data__;
        if (!Map || pairs.length < LARGE_ARRAY_SIZE - 1) {
          pairs.push([key, value]);
          this.size = ++data.size;
          return this;
        }
        data = this.__data__ = new MapCache(pairs);
      }
      data.set(key, value);
      this.size = data.size;
      return this;
    }
    module.exports = stackSet;
  }
});

// node_modules/lodash/_Stack.js
var require_Stack = __commonJS({
  "node_modules/lodash/_Stack.js"(exports, module) {
    var ListCache = require_ListCache();
    var stackClear = require_stackClear();
    var stackDelete = require_stackDelete();
    var stackGet = require_stackGet();
    var stackHas = require_stackHas();
    var stackSet = require_stackSet();
    function Stack(entries) {
      var data = this.__data__ = new ListCache(entries);
      this.size = data.size;
    }
    Stack.prototype.clear = stackClear;
    Stack.prototype["delete"] = stackDelete;
    Stack.prototype.get = stackGet;
    Stack.prototype.has = stackHas;
    Stack.prototype.set = stackSet;
    module.exports = Stack;
  }
});

// node_modules/lodash/_baseAssignValue.js
var require_baseAssignValue = __commonJS({
  "node_modules/lodash/_baseAssignValue.js"(exports, module) {
    var defineProperty = require_defineProperty();
    function baseAssignValue(object, key, value) {
      if (key == "__proto__" && defineProperty) {
        defineProperty(object, key, {
          "configurable": true,
          "enumerable": true,
          "value": value,
          "writable": true
        });
      } else {
        object[key] = value;
      }
    }
    module.exports = baseAssignValue;
  }
});

// node_modules/lodash/_assignValue.js
var require_assignValue = __commonJS({
  "node_modules/lodash/_assignValue.js"(exports, module) {
    var baseAssignValue = require_baseAssignValue();
    var eq = require_eq();
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    function assignValue(object, key, value) {
      var objValue = object[key];
      if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) || value === void 0 && !(key in object)) {
        baseAssignValue(object, key, value);
      }
    }
    module.exports = assignValue;
  }
});

// node_modules/lodash/_copyObject.js
var require_copyObject = __commonJS({
  "node_modules/lodash/_copyObject.js"(exports, module) {
    var assignValue = require_assignValue();
    var baseAssignValue = require_baseAssignValue();
    function copyObject(source, props, object, customizer) {
      var isNew = !object;
      object || (object = {});
      var index = -1, length = props.length;
      while (++index < length) {
        var key = props[index];
        var newValue = customizer ? customizer(object[key], source[key], key, object, source) : void 0;
        if (newValue === void 0) {
          newValue = source[key];
        }
        if (isNew) {
          baseAssignValue(object, key, newValue);
        } else {
          assignValue(object, key, newValue);
        }
      }
      return object;
    }
    module.exports = copyObject;
  }
});

// node_modules/lodash/_baseTimes.js
var require_baseTimes = __commonJS({
  "node_modules/lodash/_baseTimes.js"(exports, module) {
    function baseTimes(n, iteratee) {
      var index = -1, result = Array(n);
      while (++index < n) {
        result[index] = iteratee(index);
      }
      return result;
    }
    module.exports = baseTimes;
  }
});

// node_modules/lodash/_baseIsArguments.js
var require_baseIsArguments = __commonJS({
  "node_modules/lodash/_baseIsArguments.js"(exports, module) {
    var baseGetTag = require_baseGetTag();
    var isObjectLike = require_isObjectLike();
    var argsTag = "[object Arguments]";
    function baseIsArguments(value) {
      return isObjectLike(value) && baseGetTag(value) == argsTag;
    }
    module.exports = baseIsArguments;
  }
});

// node_modules/lodash/isArguments.js
var require_isArguments = __commonJS({
  "node_modules/lodash/isArguments.js"(exports, module) {
    var baseIsArguments = require_baseIsArguments();
    var isObjectLike = require_isObjectLike();
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    var propertyIsEnumerable = objectProto.propertyIsEnumerable;
    var isArguments = baseIsArguments(/* @__PURE__ */ function() {
      return arguments;
    }()) ? baseIsArguments : function(value) {
      return isObjectLike(value) && hasOwnProperty.call(value, "callee") && !propertyIsEnumerable.call(value, "callee");
    };
    module.exports = isArguments;
  }
});

// node_modules/lodash/stubFalse.js
var require_stubFalse = __commonJS({
  "node_modules/lodash/stubFalse.js"(exports, module) {
    function stubFalse() {
      return false;
    }
    module.exports = stubFalse;
  }
});

// node_modules/lodash/isBuffer.js
var require_isBuffer = __commonJS({
  "node_modules/lodash/isBuffer.js"(exports, module) {
    var root = require_root();
    var stubFalse = require_stubFalse();
    var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
    var freeModule = freeExports && typeof module == "object" && module && !module.nodeType && module;
    var moduleExports = freeModule && freeModule.exports === freeExports;
    var Buffer = moduleExports ? root.Buffer : void 0;
    var nativeIsBuffer = Buffer ? Buffer.isBuffer : void 0;
    var isBuffer = nativeIsBuffer || stubFalse;
    module.exports = isBuffer;
  }
});

// node_modules/lodash/isLength.js
var require_isLength = __commonJS({
  "node_modules/lodash/isLength.js"(exports, module) {
    var MAX_SAFE_INTEGER = 9007199254740991;
    function isLength(value) {
      return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }
    module.exports = isLength;
  }
});

// node_modules/lodash/_baseIsTypedArray.js
var require_baseIsTypedArray = __commonJS({
  "node_modules/lodash/_baseIsTypedArray.js"(exports, module) {
    var baseGetTag = require_baseGetTag();
    var isLength = require_isLength();
    var isObjectLike = require_isObjectLike();
    var argsTag = "[object Arguments]";
    var arrayTag = "[object Array]";
    var boolTag = "[object Boolean]";
    var dateTag = "[object Date]";
    var errorTag = "[object Error]";
    var funcTag = "[object Function]";
    var mapTag = "[object Map]";
    var numberTag = "[object Number]";
    var objectTag = "[object Object]";
    var regexpTag = "[object RegExp]";
    var setTag = "[object Set]";
    var stringTag = "[object String]";
    var weakMapTag = "[object WeakMap]";
    var arrayBufferTag = "[object ArrayBuffer]";
    var dataViewTag = "[object DataView]";
    var float32Tag = "[object Float32Array]";
    var float64Tag = "[object Float64Array]";
    var int8Tag = "[object Int8Array]";
    var int16Tag = "[object Int16Array]";
    var int32Tag = "[object Int32Array]";
    var uint8Tag = "[object Uint8Array]";
    var uint8ClampedTag = "[object Uint8ClampedArray]";
    var uint16Tag = "[object Uint16Array]";
    var uint32Tag = "[object Uint32Array]";
    var typedArrayTags = {};
    typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
    typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
    function baseIsTypedArray(value) {
      return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
    }
    module.exports = baseIsTypedArray;
  }
});

// node_modules/lodash/_baseUnary.js
var require_baseUnary = __commonJS({
  "node_modules/lodash/_baseUnary.js"(exports, module) {
    function baseUnary(func) {
      return function(value) {
        return func(value);
      };
    }
    module.exports = baseUnary;
  }
});

// node_modules/lodash/_nodeUtil.js
var require_nodeUtil = __commonJS({
  "node_modules/lodash/_nodeUtil.js"(exports, module) {
    var freeGlobal = require_freeGlobal();
    var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
    var freeModule = freeExports && typeof module == "object" && module && !module.nodeType && module;
    var moduleExports = freeModule && freeModule.exports === freeExports;
    var freeProcess = moduleExports && freeGlobal.process;
    var nodeUtil = function() {
      try {
        var types = freeModule && freeModule.require && freeModule.require("util").types;
        if (types) {
          return types;
        }
        return freeProcess && freeProcess.binding && freeProcess.binding("util");
      } catch (e) {
      }
    }();
    module.exports = nodeUtil;
  }
});

// node_modules/lodash/isTypedArray.js
var require_isTypedArray = __commonJS({
  "node_modules/lodash/isTypedArray.js"(exports, module) {
    var baseIsTypedArray = require_baseIsTypedArray();
    var baseUnary = require_baseUnary();
    var nodeUtil = require_nodeUtil();
    var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
    module.exports = isTypedArray;
  }
});

// node_modules/lodash/_arrayLikeKeys.js
var require_arrayLikeKeys = __commonJS({
  "node_modules/lodash/_arrayLikeKeys.js"(exports, module) {
    var baseTimes = require_baseTimes();
    var isArguments = require_isArguments();
    var isArray = require_isArray();
    var isBuffer = require_isBuffer();
    var isIndex = require_isIndex();
    var isTypedArray = require_isTypedArray();
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    function arrayLikeKeys(value, inherited) {
      var isArr = isArray(value), isArg = !isArr && isArguments(value), isBuff = !isArr && !isArg && isBuffer(value), isType = !isArr && !isArg && !isBuff && isTypedArray(value), skipIndexes = isArr || isArg || isBuff || isType, result = skipIndexes ? baseTimes(value.length, String) : [], length = result.length;
      for (var key in value) {
        if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && // Safari 9 has enumerable `arguments.length` in strict mode.
        (key == "length" || // Node.js 0.10 has enumerable non-index properties on buffers.
        isBuff && (key == "offset" || key == "parent") || // PhantomJS 2 has enumerable non-index properties on typed arrays.
        isType && (key == "buffer" || key == "byteLength" || key == "byteOffset") || // Skip index properties.
        isIndex(key, length)))) {
          result.push(key);
        }
      }
      return result;
    }
    module.exports = arrayLikeKeys;
  }
});

// node_modules/lodash/_isPrototype.js
var require_isPrototype = __commonJS({
  "node_modules/lodash/_isPrototype.js"(exports, module) {
    var objectProto = Object.prototype;
    function isPrototype(value) {
      var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto;
      return value === proto;
    }
    module.exports = isPrototype;
  }
});

// node_modules/lodash/_nativeKeys.js
var require_nativeKeys = __commonJS({
  "node_modules/lodash/_nativeKeys.js"(exports, module) {
    var overArg = require_overArg();
    var nativeKeys = overArg(Object.keys, Object);
    module.exports = nativeKeys;
  }
});

// node_modules/lodash/_baseKeys.js
var require_baseKeys = __commonJS({
  "node_modules/lodash/_baseKeys.js"(exports, module) {
    var isPrototype = require_isPrototype();
    var nativeKeys = require_nativeKeys();
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    function baseKeys(object) {
      if (!isPrototype(object)) {
        return nativeKeys(object);
      }
      var result = [];
      for (var key in Object(object)) {
        if (hasOwnProperty.call(object, key) && key != "constructor") {
          result.push(key);
        }
      }
      return result;
    }
    module.exports = baseKeys;
  }
});

// node_modules/lodash/isArrayLike.js
var require_isArrayLike = __commonJS({
  "node_modules/lodash/isArrayLike.js"(exports, module) {
    var isFunction3 = require_isFunction();
    var isLength = require_isLength();
    function isArrayLike(value) {
      return value != null && isLength(value.length) && !isFunction3(value);
    }
    module.exports = isArrayLike;
  }
});

// node_modules/lodash/keys.js
var require_keys = __commonJS({
  "node_modules/lodash/keys.js"(exports, module) {
    var arrayLikeKeys = require_arrayLikeKeys();
    var baseKeys = require_baseKeys();
    var isArrayLike = require_isArrayLike();
    function keys(object) {
      return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
    }
    module.exports = keys;
  }
});

// node_modules/lodash/_baseAssign.js
var require_baseAssign = __commonJS({
  "node_modules/lodash/_baseAssign.js"(exports, module) {
    var copyObject = require_copyObject();
    var keys = require_keys();
    function baseAssign(object, source) {
      return object && copyObject(source, keys(source), object);
    }
    module.exports = baseAssign;
  }
});

// node_modules/lodash/_nativeKeysIn.js
var require_nativeKeysIn = __commonJS({
  "node_modules/lodash/_nativeKeysIn.js"(exports, module) {
    function nativeKeysIn(object) {
      var result = [];
      if (object != null) {
        for (var key in Object(object)) {
          result.push(key);
        }
      }
      return result;
    }
    module.exports = nativeKeysIn;
  }
});

// node_modules/lodash/_baseKeysIn.js
var require_baseKeysIn = __commonJS({
  "node_modules/lodash/_baseKeysIn.js"(exports, module) {
    var isObject = require_isObject();
    var isPrototype = require_isPrototype();
    var nativeKeysIn = require_nativeKeysIn();
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    function baseKeysIn(object) {
      if (!isObject(object)) {
        return nativeKeysIn(object);
      }
      var isProto = isPrototype(object), result = [];
      for (var key in object) {
        if (!(key == "constructor" && (isProto || !hasOwnProperty.call(object, key)))) {
          result.push(key);
        }
      }
      return result;
    }
    module.exports = baseKeysIn;
  }
});

// node_modules/lodash/keysIn.js
var require_keysIn = __commonJS({
  "node_modules/lodash/keysIn.js"(exports, module) {
    var arrayLikeKeys = require_arrayLikeKeys();
    var baseKeysIn = require_baseKeysIn();
    var isArrayLike = require_isArrayLike();
    function keysIn(object) {
      return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
    }
    module.exports = keysIn;
  }
});

// node_modules/lodash/_baseAssignIn.js
var require_baseAssignIn = __commonJS({
  "node_modules/lodash/_baseAssignIn.js"(exports, module) {
    var copyObject = require_copyObject();
    var keysIn = require_keysIn();
    function baseAssignIn(object, source) {
      return object && copyObject(source, keysIn(source), object);
    }
    module.exports = baseAssignIn;
  }
});

// node_modules/lodash/_cloneBuffer.js
var require_cloneBuffer = __commonJS({
  "node_modules/lodash/_cloneBuffer.js"(exports, module) {
    var root = require_root();
    var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
    var freeModule = freeExports && typeof module == "object" && module && !module.nodeType && module;
    var moduleExports = freeModule && freeModule.exports === freeExports;
    var Buffer = moduleExports ? root.Buffer : void 0;
    var allocUnsafe = Buffer ? Buffer.allocUnsafe : void 0;
    function cloneBuffer(buffer, isDeep) {
      if (isDeep) {
        return buffer.slice();
      }
      var length = buffer.length, result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);
      buffer.copy(result);
      return result;
    }
    module.exports = cloneBuffer;
  }
});

// node_modules/lodash/_arrayFilter.js
var require_arrayFilter = __commonJS({
  "node_modules/lodash/_arrayFilter.js"(exports, module) {
    function arrayFilter(array, predicate) {
      var index = -1, length = array == null ? 0 : array.length, resIndex = 0, result = [];
      while (++index < length) {
        var value = array[index];
        if (predicate(value, index, array)) {
          result[resIndex++] = value;
        }
      }
      return result;
    }
    module.exports = arrayFilter;
  }
});

// node_modules/lodash/stubArray.js
var require_stubArray = __commonJS({
  "node_modules/lodash/stubArray.js"(exports, module) {
    function stubArray() {
      return [];
    }
    module.exports = stubArray;
  }
});

// node_modules/lodash/_getSymbols.js
var require_getSymbols = __commonJS({
  "node_modules/lodash/_getSymbols.js"(exports, module) {
    var arrayFilter = require_arrayFilter();
    var stubArray = require_stubArray();
    var objectProto = Object.prototype;
    var propertyIsEnumerable = objectProto.propertyIsEnumerable;
    var nativeGetSymbols = Object.getOwnPropertySymbols;
    var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
      if (object == null) {
        return [];
      }
      object = Object(object);
      return arrayFilter(nativeGetSymbols(object), function(symbol) {
        return propertyIsEnumerable.call(object, symbol);
      });
    };
    module.exports = getSymbols;
  }
});

// node_modules/lodash/_copySymbols.js
var require_copySymbols = __commonJS({
  "node_modules/lodash/_copySymbols.js"(exports, module) {
    var copyObject = require_copyObject();
    var getSymbols = require_getSymbols();
    function copySymbols(source, object) {
      return copyObject(source, getSymbols(source), object);
    }
    module.exports = copySymbols;
  }
});

// node_modules/lodash/_arrayPush.js
var require_arrayPush = __commonJS({
  "node_modules/lodash/_arrayPush.js"(exports, module) {
    function arrayPush(array, values) {
      var index = -1, length = values.length, offset = array.length;
      while (++index < length) {
        array[offset + index] = values[index];
      }
      return array;
    }
    module.exports = arrayPush;
  }
});

// node_modules/lodash/_getSymbolsIn.js
var require_getSymbolsIn = __commonJS({
  "node_modules/lodash/_getSymbolsIn.js"(exports, module) {
    var arrayPush = require_arrayPush();
    var getPrototype = require_getPrototype();
    var getSymbols = require_getSymbols();
    var stubArray = require_stubArray();
    var nativeGetSymbols = Object.getOwnPropertySymbols;
    var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
      var result = [];
      while (object) {
        arrayPush(result, getSymbols(object));
        object = getPrototype(object);
      }
      return result;
    };
    module.exports = getSymbolsIn;
  }
});

// node_modules/lodash/_copySymbolsIn.js
var require_copySymbolsIn = __commonJS({
  "node_modules/lodash/_copySymbolsIn.js"(exports, module) {
    var copyObject = require_copyObject();
    var getSymbolsIn = require_getSymbolsIn();
    function copySymbolsIn(source, object) {
      return copyObject(source, getSymbolsIn(source), object);
    }
    module.exports = copySymbolsIn;
  }
});

// node_modules/lodash/_baseGetAllKeys.js
var require_baseGetAllKeys = __commonJS({
  "node_modules/lodash/_baseGetAllKeys.js"(exports, module) {
    var arrayPush = require_arrayPush();
    var isArray = require_isArray();
    function baseGetAllKeys(object, keysFunc, symbolsFunc) {
      var result = keysFunc(object);
      return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
    }
    module.exports = baseGetAllKeys;
  }
});

// node_modules/lodash/_getAllKeys.js
var require_getAllKeys = __commonJS({
  "node_modules/lodash/_getAllKeys.js"(exports, module) {
    var baseGetAllKeys = require_baseGetAllKeys();
    var getSymbols = require_getSymbols();
    var keys = require_keys();
    function getAllKeys(object) {
      return baseGetAllKeys(object, keys, getSymbols);
    }
    module.exports = getAllKeys;
  }
});

// node_modules/lodash/_getAllKeysIn.js
var require_getAllKeysIn = __commonJS({
  "node_modules/lodash/_getAllKeysIn.js"(exports, module) {
    var baseGetAllKeys = require_baseGetAllKeys();
    var getSymbolsIn = require_getSymbolsIn();
    var keysIn = require_keysIn();
    function getAllKeysIn(object) {
      return baseGetAllKeys(object, keysIn, getSymbolsIn);
    }
    module.exports = getAllKeysIn;
  }
});

// node_modules/lodash/_DataView.js
var require_DataView = __commonJS({
  "node_modules/lodash/_DataView.js"(exports, module) {
    var getNative = require_getNative();
    var root = require_root();
    var DataView = getNative(root, "DataView");
    module.exports = DataView;
  }
});

// node_modules/lodash/_Promise.js
var require_Promise = __commonJS({
  "node_modules/lodash/_Promise.js"(exports, module) {
    var getNative = require_getNative();
    var root = require_root();
    var Promise2 = getNative(root, "Promise");
    module.exports = Promise2;
  }
});

// node_modules/lodash/_Set.js
var require_Set = __commonJS({
  "node_modules/lodash/_Set.js"(exports, module) {
    var getNative = require_getNative();
    var root = require_root();
    var Set = getNative(root, "Set");
    module.exports = Set;
  }
});

// node_modules/lodash/_getTag.js
var require_getTag = __commonJS({
  "node_modules/lodash/_getTag.js"(exports, module) {
    var DataView = require_DataView();
    var Map = require_Map();
    var Promise2 = require_Promise();
    var Set = require_Set();
    var WeakMap2 = require_WeakMap();
    var baseGetTag = require_baseGetTag();
    var toSource = require_toSource();
    var mapTag = "[object Map]";
    var objectTag = "[object Object]";
    var promiseTag = "[object Promise]";
    var setTag = "[object Set]";
    var weakMapTag = "[object WeakMap]";
    var dataViewTag = "[object DataView]";
    var dataViewCtorString = toSource(DataView);
    var mapCtorString = toSource(Map);
    var promiseCtorString = toSource(Promise2);
    var setCtorString = toSource(Set);
    var weakMapCtorString = toSource(WeakMap2);
    var getTag = baseGetTag;
    if (DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag || Map && getTag(new Map()) != mapTag || Promise2 && getTag(Promise2.resolve()) != promiseTag || Set && getTag(new Set()) != setTag || WeakMap2 && getTag(new WeakMap2()) != weakMapTag) {
      getTag = function(value) {
        var result = baseGetTag(value), Ctor = result == objectTag ? value.constructor : void 0, ctorString = Ctor ? toSource(Ctor) : "";
        if (ctorString) {
          switch (ctorString) {
            case dataViewCtorString:
              return dataViewTag;
            case mapCtorString:
              return mapTag;
            case promiseCtorString:
              return promiseTag;
            case setCtorString:
              return setTag;
            case weakMapCtorString:
              return weakMapTag;
          }
        }
        return result;
      };
    }
    module.exports = getTag;
  }
});

// node_modules/lodash/_initCloneArray.js
var require_initCloneArray = __commonJS({
  "node_modules/lodash/_initCloneArray.js"(exports, module) {
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    function initCloneArray(array) {
      var length = array.length, result = new array.constructor(length);
      if (length && typeof array[0] == "string" && hasOwnProperty.call(array, "index")) {
        result.index = array.index;
        result.input = array.input;
      }
      return result;
    }
    module.exports = initCloneArray;
  }
});

// node_modules/lodash/_Uint8Array.js
var require_Uint8Array = __commonJS({
  "node_modules/lodash/_Uint8Array.js"(exports, module) {
    var root = require_root();
    var Uint8Array = root.Uint8Array;
    module.exports = Uint8Array;
  }
});

// node_modules/lodash/_cloneArrayBuffer.js
var require_cloneArrayBuffer = __commonJS({
  "node_modules/lodash/_cloneArrayBuffer.js"(exports, module) {
    var Uint8Array = require_Uint8Array();
    function cloneArrayBuffer(arrayBuffer) {
      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
      new Uint8Array(result).set(new Uint8Array(arrayBuffer));
      return result;
    }
    module.exports = cloneArrayBuffer;
  }
});

// node_modules/lodash/_cloneDataView.js
var require_cloneDataView = __commonJS({
  "node_modules/lodash/_cloneDataView.js"(exports, module) {
    var cloneArrayBuffer = require_cloneArrayBuffer();
    function cloneDataView(dataView, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
      return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
    }
    module.exports = cloneDataView;
  }
});

// node_modules/lodash/_cloneRegExp.js
var require_cloneRegExp = __commonJS({
  "node_modules/lodash/_cloneRegExp.js"(exports, module) {
    var reFlags = /\w*$/;
    function cloneRegExp(regexp) {
      var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
      result.lastIndex = regexp.lastIndex;
      return result;
    }
    module.exports = cloneRegExp;
  }
});

// node_modules/lodash/_cloneSymbol.js
var require_cloneSymbol = __commonJS({
  "node_modules/lodash/_cloneSymbol.js"(exports, module) {
    var Symbol2 = require_Symbol();
    var symbolProto = Symbol2 ? Symbol2.prototype : void 0;
    var symbolValueOf = symbolProto ? symbolProto.valueOf : void 0;
    function cloneSymbol(symbol) {
      return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
    }
    module.exports = cloneSymbol;
  }
});

// node_modules/lodash/_cloneTypedArray.js
var require_cloneTypedArray = __commonJS({
  "node_modules/lodash/_cloneTypedArray.js"(exports, module) {
    var cloneArrayBuffer = require_cloneArrayBuffer();
    function cloneTypedArray(typedArray, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
    }
    module.exports = cloneTypedArray;
  }
});

// node_modules/lodash/_initCloneByTag.js
var require_initCloneByTag = __commonJS({
  "node_modules/lodash/_initCloneByTag.js"(exports, module) {
    var cloneArrayBuffer = require_cloneArrayBuffer();
    var cloneDataView = require_cloneDataView();
    var cloneRegExp = require_cloneRegExp();
    var cloneSymbol = require_cloneSymbol();
    var cloneTypedArray = require_cloneTypedArray();
    var boolTag = "[object Boolean]";
    var dateTag = "[object Date]";
    var mapTag = "[object Map]";
    var numberTag = "[object Number]";
    var regexpTag = "[object RegExp]";
    var setTag = "[object Set]";
    var stringTag = "[object String]";
    var symbolTag = "[object Symbol]";
    var arrayBufferTag = "[object ArrayBuffer]";
    var dataViewTag = "[object DataView]";
    var float32Tag = "[object Float32Array]";
    var float64Tag = "[object Float64Array]";
    var int8Tag = "[object Int8Array]";
    var int16Tag = "[object Int16Array]";
    var int32Tag = "[object Int32Array]";
    var uint8Tag = "[object Uint8Array]";
    var uint8ClampedTag = "[object Uint8ClampedArray]";
    var uint16Tag = "[object Uint16Array]";
    var uint32Tag = "[object Uint32Array]";
    function initCloneByTag(object, tag, isDeep) {
      var Ctor = object.constructor;
      switch (tag) {
        case arrayBufferTag:
          return cloneArrayBuffer(object);
        case boolTag:
        case dateTag:
          return new Ctor(+object);
        case dataViewTag:
          return cloneDataView(object, isDeep);
        case float32Tag:
        case float64Tag:
        case int8Tag:
        case int16Tag:
        case int32Tag:
        case uint8Tag:
        case uint8ClampedTag:
        case uint16Tag:
        case uint32Tag:
          return cloneTypedArray(object, isDeep);
        case mapTag:
          return new Ctor();
        case numberTag:
        case stringTag:
          return new Ctor(object);
        case regexpTag:
          return cloneRegExp(object);
        case setTag:
          return new Ctor();
        case symbolTag:
          return cloneSymbol(object);
      }
    }
    module.exports = initCloneByTag;
  }
});

// node_modules/lodash/_initCloneObject.js
var require_initCloneObject = __commonJS({
  "node_modules/lodash/_initCloneObject.js"(exports, module) {
    var baseCreate = require_baseCreate();
    var getPrototype = require_getPrototype();
    var isPrototype = require_isPrototype();
    function initCloneObject(object) {
      return typeof object.constructor == "function" && !isPrototype(object) ? baseCreate(getPrototype(object)) : {};
    }
    module.exports = initCloneObject;
  }
});

// node_modules/lodash/_baseIsMap.js
var require_baseIsMap = __commonJS({
  "node_modules/lodash/_baseIsMap.js"(exports, module) {
    var getTag = require_getTag();
    var isObjectLike = require_isObjectLike();
    var mapTag = "[object Map]";
    function baseIsMap(value) {
      return isObjectLike(value) && getTag(value) == mapTag;
    }
    module.exports = baseIsMap;
  }
});

// node_modules/lodash/isMap.js
var require_isMap = __commonJS({
  "node_modules/lodash/isMap.js"(exports, module) {
    var baseIsMap = require_baseIsMap();
    var baseUnary = require_baseUnary();
    var nodeUtil = require_nodeUtil();
    var nodeIsMap = nodeUtil && nodeUtil.isMap;
    var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;
    module.exports = isMap;
  }
});

// node_modules/lodash/_baseIsSet.js
var require_baseIsSet = __commonJS({
  "node_modules/lodash/_baseIsSet.js"(exports, module) {
    var getTag = require_getTag();
    var isObjectLike = require_isObjectLike();
    var setTag = "[object Set]";
    function baseIsSet(value) {
      return isObjectLike(value) && getTag(value) == setTag;
    }
    module.exports = baseIsSet;
  }
});

// node_modules/lodash/isSet.js
var require_isSet = __commonJS({
  "node_modules/lodash/isSet.js"(exports, module) {
    var baseIsSet = require_baseIsSet();
    var baseUnary = require_baseUnary();
    var nodeUtil = require_nodeUtil();
    var nodeIsSet = nodeUtil && nodeUtil.isSet;
    var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;
    module.exports = isSet;
  }
});

// node_modules/lodash/_baseClone.js
var require_baseClone = __commonJS({
  "node_modules/lodash/_baseClone.js"(exports, module) {
    var Stack = require_Stack();
    var arrayEach = require_arrayEach();
    var assignValue = require_assignValue();
    var baseAssign = require_baseAssign();
    var baseAssignIn = require_baseAssignIn();
    var cloneBuffer = require_cloneBuffer();
    var copyArray = require_copyArray();
    var copySymbols = require_copySymbols();
    var copySymbolsIn = require_copySymbolsIn();
    var getAllKeys = require_getAllKeys();
    var getAllKeysIn = require_getAllKeysIn();
    var getTag = require_getTag();
    var initCloneArray = require_initCloneArray();
    var initCloneByTag = require_initCloneByTag();
    var initCloneObject = require_initCloneObject();
    var isArray = require_isArray();
    var isBuffer = require_isBuffer();
    var isMap = require_isMap();
    var isObject = require_isObject();
    var isSet = require_isSet();
    var keys = require_keys();
    var keysIn = require_keysIn();
    var CLONE_DEEP_FLAG = 1;
    var CLONE_FLAT_FLAG = 2;
    var CLONE_SYMBOLS_FLAG = 4;
    var argsTag = "[object Arguments]";
    var arrayTag = "[object Array]";
    var boolTag = "[object Boolean]";
    var dateTag = "[object Date]";
    var errorTag = "[object Error]";
    var funcTag = "[object Function]";
    var genTag = "[object GeneratorFunction]";
    var mapTag = "[object Map]";
    var numberTag = "[object Number]";
    var objectTag = "[object Object]";
    var regexpTag = "[object RegExp]";
    var setTag = "[object Set]";
    var stringTag = "[object String]";
    var symbolTag = "[object Symbol]";
    var weakMapTag = "[object WeakMap]";
    var arrayBufferTag = "[object ArrayBuffer]";
    var dataViewTag = "[object DataView]";
    var float32Tag = "[object Float32Array]";
    var float64Tag = "[object Float64Array]";
    var int8Tag = "[object Int8Array]";
    var int16Tag = "[object Int16Array]";
    var int32Tag = "[object Int32Array]";
    var uint8Tag = "[object Uint8Array]";
    var uint8ClampedTag = "[object Uint8ClampedArray]";
    var uint16Tag = "[object Uint16Array]";
    var uint32Tag = "[object Uint32Array]";
    var cloneableTags = {};
    cloneableTags[argsTag] = cloneableTags[arrayTag] = cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] = cloneableTags[boolTag] = cloneableTags[dateTag] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[mapTag] = cloneableTags[numberTag] = cloneableTags[objectTag] = cloneableTags[regexpTag] = cloneableTags[setTag] = cloneableTags[stringTag] = cloneableTags[symbolTag] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
    cloneableTags[errorTag] = cloneableTags[funcTag] = cloneableTags[weakMapTag] = false;
    function baseClone(value, bitmask, customizer, key, object, stack) {
      var result, isDeep = bitmask & CLONE_DEEP_FLAG, isFlat = bitmask & CLONE_FLAT_FLAG, isFull = bitmask & CLONE_SYMBOLS_FLAG;
      if (customizer) {
        result = object ? customizer(value, key, object, stack) : customizer(value);
      }
      if (result !== void 0) {
        return result;
      }
      if (!isObject(value)) {
        return value;
      }
      var isArr = isArray(value);
      if (isArr) {
        result = initCloneArray(value);
        if (!isDeep) {
          return copyArray(value, result);
        }
      } else {
        var tag = getTag(value), isFunc = tag == funcTag || tag == genTag;
        if (isBuffer(value)) {
          return cloneBuffer(value, isDeep);
        }
        if (tag == objectTag || tag == argsTag || isFunc && !object) {
          result = isFlat || isFunc ? {} : initCloneObject(value);
          if (!isDeep) {
            return isFlat ? copySymbolsIn(value, baseAssignIn(result, value)) : copySymbols(value, baseAssign(result, value));
          }
        } else {
          if (!cloneableTags[tag]) {
            return object ? value : {};
          }
          result = initCloneByTag(value, tag, isDeep);
        }
      }
      stack || (stack = new Stack());
      var stacked = stack.get(value);
      if (stacked) {
        return stacked;
      }
      stack.set(value, result);
      if (isSet(value)) {
        value.forEach(function(subValue) {
          result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
        });
      } else if (isMap(value)) {
        value.forEach(function(subValue, key2) {
          result.set(key2, baseClone(subValue, bitmask, customizer, key2, value, stack));
        });
      }
      var keysFunc = isFull ? isFlat ? getAllKeysIn : getAllKeys : isFlat ? keysIn : keys;
      var props = isArr ? void 0 : keysFunc(value);
      arrayEach(props || value, function(subValue, key2) {
        if (props) {
          key2 = subValue;
          subValue = value[key2];
        }
        assignValue(result, key2, baseClone(subValue, bitmask, customizer, key2, value, stack));
      });
      return result;
    }
    module.exports = baseClone;
  }
});

// node_modules/lodash/last.js
var require_last = __commonJS({
  "node_modules/lodash/last.js"(exports, module) {
    function last(array) {
      var length = array == null ? 0 : array.length;
      return length ? array[length - 1] : void 0;
    }
    module.exports = last;
  }
});

// node_modules/lodash/_baseSlice.js
var require_baseSlice = __commonJS({
  "node_modules/lodash/_baseSlice.js"(exports, module) {
    function baseSlice(array, start, end) {
      var index = -1, length = array.length;
      if (start < 0) {
        start = -start > length ? 0 : length + start;
      }
      end = end > length ? length : end;
      if (end < 0) {
        end += length;
      }
      length = start > end ? 0 : end - start >>> 0;
      start >>>= 0;
      var result = Array(length);
      while (++index < length) {
        result[index] = array[index + start];
      }
      return result;
    }
    module.exports = baseSlice;
  }
});

// node_modules/lodash/_parent.js
var require_parent = __commonJS({
  "node_modules/lodash/_parent.js"(exports, module) {
    var baseGet = require_baseGet();
    var baseSlice = require_baseSlice();
    function parent(object, path) {
      return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
    }
    module.exports = parent;
  }
});

// node_modules/lodash/_baseUnset.js
var require_baseUnset = __commonJS({
  "node_modules/lodash/_baseUnset.js"(exports, module) {
    var castPath = require_castPath();
    var last = require_last();
    var parent = require_parent();
    var toKey = require_toKey();
    function baseUnset(object, path) {
      path = castPath(path, object);
      object = parent(object, path);
      return object == null || delete object[toKey(last(path))];
    }
    module.exports = baseUnset;
  }
});

// node_modules/lodash/_customOmitClone.js
var require_customOmitClone = __commonJS({
  "node_modules/lodash/_customOmitClone.js"(exports, module) {
    var isPlainObject2 = require_isPlainObject();
    function customOmitClone(value) {
      return isPlainObject2(value) ? void 0 : value;
    }
    module.exports = customOmitClone;
  }
});

// node_modules/lodash/_isFlattenable.js
var require_isFlattenable = __commonJS({
  "node_modules/lodash/_isFlattenable.js"(exports, module) {
    var Symbol2 = require_Symbol();
    var isArguments = require_isArguments();
    var isArray = require_isArray();
    var spreadableSymbol = Symbol2 ? Symbol2.isConcatSpreadable : void 0;
    function isFlattenable(value) {
      return isArray(value) || isArguments(value) || !!(spreadableSymbol && value && value[spreadableSymbol]);
    }
    module.exports = isFlattenable;
  }
});

// node_modules/lodash/_baseFlatten.js
var require_baseFlatten = __commonJS({
  "node_modules/lodash/_baseFlatten.js"(exports, module) {
    var arrayPush = require_arrayPush();
    var isFlattenable = require_isFlattenable();
    function baseFlatten(array, depth, predicate, isStrict, result) {
      var index = -1, length = array.length;
      predicate || (predicate = isFlattenable);
      result || (result = []);
      while (++index < length) {
        var value = array[index];
        if (depth > 0 && predicate(value)) {
          if (depth > 1) {
            baseFlatten(value, depth - 1, predicate, isStrict, result);
          } else {
            arrayPush(result, value);
          }
        } else if (!isStrict) {
          result[result.length] = value;
        }
      }
      return result;
    }
    module.exports = baseFlatten;
  }
});

// node_modules/lodash/flatten.js
var require_flatten = __commonJS({
  "node_modules/lodash/flatten.js"(exports, module) {
    var baseFlatten = require_baseFlatten();
    function flatten2(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseFlatten(array, 1) : [];
    }
    module.exports = flatten2;
  }
});

// node_modules/lodash/_overRest.js
var require_overRest = __commonJS({
  "node_modules/lodash/_overRest.js"(exports, module) {
    var apply = require_apply();
    var nativeMax = Math.max;
    function overRest(func, start, transform) {
      start = nativeMax(start === void 0 ? func.length - 1 : start, 0);
      return function() {
        var args = arguments, index = -1, length = nativeMax(args.length - start, 0), array = Array(length);
        while (++index < length) {
          array[index] = args[start + index];
        }
        index = -1;
        var otherArgs = Array(start + 1);
        while (++index < start) {
          otherArgs[index] = args[index];
        }
        otherArgs[start] = transform(array);
        return apply(func, this, otherArgs);
      };
    }
    module.exports = overRest;
  }
});

// node_modules/lodash/_flatRest.js
var require_flatRest = __commonJS({
  "node_modules/lodash/_flatRest.js"(exports, module) {
    var flatten2 = require_flatten();
    var overRest = require_overRest();
    var setToString = require_setToString();
    function flatRest(func) {
      return setToString(overRest(func, void 0, flatten2), func + "");
    }
    module.exports = flatRest;
  }
});

// node_modules/lodash/omit.js
var require_omit = __commonJS({
  "node_modules/lodash/omit.js"(exports, module) {
    var arrayMap = require_arrayMap();
    var baseClone = require_baseClone();
    var baseUnset = require_baseUnset();
    var castPath = require_castPath();
    var copyObject = require_copyObject();
    var customOmitClone = require_customOmitClone();
    var flatRest = require_flatRest();
    var getAllKeysIn = require_getAllKeysIn();
    var CLONE_DEEP_FLAG = 1;
    var CLONE_FLAT_FLAG = 2;
    var CLONE_SYMBOLS_FLAG = 4;
    var omit3 = flatRest(function(object, paths) {
      var result = {};
      if (object == null) {
        return result;
      }
      var isDeep = false;
      paths = arrayMap(paths, function(path) {
        path = castPath(path, object);
        isDeep || (isDeep = path.length > 1);
        return path;
      });
      copyObject(object, getAllKeysIn(object), result);
      if (isDeep) {
        result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
      }
      var length = paths.length;
      while (length--) {
        baseUnset(result, paths[length]);
      }
      return result;
    });
    module.exports = omit3;
  }
});

// node_modules/lodash/_baseDelay.js
var require_baseDelay = __commonJS({
  "node_modules/lodash/_baseDelay.js"(exports, module) {
    var FUNC_ERROR_TEXT = "Expected a function";
    function baseDelay(func, wait, args) {
      if (typeof func != "function") {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return setTimeout(function() {
        func.apply(void 0, args);
      }, wait);
    }
    module.exports = baseDelay;
  }
});

// node_modules/lodash/_baseRest.js
var require_baseRest = __commonJS({
  "node_modules/lodash/_baseRest.js"(exports, module) {
    var identity = require_identity();
    var overRest = require_overRest();
    var setToString = require_setToString();
    function baseRest(func, start) {
      return setToString(overRest(func, start, identity), func + "");
    }
    module.exports = baseRest;
  }
});

// node_modules/lodash/defer.js
var require_defer = __commonJS({
  "node_modules/lodash/defer.js"(exports, module) {
    var baseDelay = require_baseDelay();
    var baseRest = require_baseRest();
    var defer2 = baseRest(function(func, args) {
      return baseDelay(func, 1, args);
    });
    module.exports = defer2;
  }
});

// node_modules/lodash/_assignMergeValue.js
var require_assignMergeValue = __commonJS({
  "node_modules/lodash/_assignMergeValue.js"(exports, module) {
    var baseAssignValue = require_baseAssignValue();
    var eq = require_eq();
    function assignMergeValue(object, key, value) {
      if (value !== void 0 && !eq(object[key], value) || value === void 0 && !(key in object)) {
        baseAssignValue(object, key, value);
      }
    }
    module.exports = assignMergeValue;
  }
});

// node_modules/lodash/_createBaseFor.js
var require_createBaseFor = __commonJS({
  "node_modules/lodash/_createBaseFor.js"(exports, module) {
    function createBaseFor(fromRight) {
      return function(object, iteratee, keysFunc) {
        var index = -1, iterable = Object(object), props = keysFunc(object), length = props.length;
        while (length--) {
          var key = props[fromRight ? length : ++index];
          if (iteratee(iterable[key], key, iterable) === false) {
            break;
          }
        }
        return object;
      };
    }
    module.exports = createBaseFor;
  }
});

// node_modules/lodash/_baseFor.js
var require_baseFor = __commonJS({
  "node_modules/lodash/_baseFor.js"(exports, module) {
    var createBaseFor = require_createBaseFor();
    var baseFor = createBaseFor();
    module.exports = baseFor;
  }
});

// node_modules/lodash/isArrayLikeObject.js
var require_isArrayLikeObject = __commonJS({
  "node_modules/lodash/isArrayLikeObject.js"(exports, module) {
    var isArrayLike = require_isArrayLike();
    var isObjectLike = require_isObjectLike();
    function isArrayLikeObject(value) {
      return isObjectLike(value) && isArrayLike(value);
    }
    module.exports = isArrayLikeObject;
  }
});

// node_modules/lodash/_safeGet.js
var require_safeGet = __commonJS({
  "node_modules/lodash/_safeGet.js"(exports, module) {
    function safeGet(object, key) {
      if (key === "constructor" && typeof object[key] === "function") {
        return;
      }
      if (key == "__proto__") {
        return;
      }
      return object[key];
    }
    module.exports = safeGet;
  }
});

// node_modules/lodash/toPlainObject.js
var require_toPlainObject = __commonJS({
  "node_modules/lodash/toPlainObject.js"(exports, module) {
    var copyObject = require_copyObject();
    var keysIn = require_keysIn();
    function toPlainObject(value) {
      return copyObject(value, keysIn(value));
    }
    module.exports = toPlainObject;
  }
});

// node_modules/lodash/_baseMergeDeep.js
var require_baseMergeDeep = __commonJS({
  "node_modules/lodash/_baseMergeDeep.js"(exports, module) {
    var assignMergeValue = require_assignMergeValue();
    var cloneBuffer = require_cloneBuffer();
    var cloneTypedArray = require_cloneTypedArray();
    var copyArray = require_copyArray();
    var initCloneObject = require_initCloneObject();
    var isArguments = require_isArguments();
    var isArray = require_isArray();
    var isArrayLikeObject = require_isArrayLikeObject();
    var isBuffer = require_isBuffer();
    var isFunction3 = require_isFunction();
    var isObject = require_isObject();
    var isPlainObject2 = require_isPlainObject();
    var isTypedArray = require_isTypedArray();
    var safeGet = require_safeGet();
    var toPlainObject = require_toPlainObject();
    function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
      var objValue = safeGet(object, key), srcValue = safeGet(source, key), stacked = stack.get(srcValue);
      if (stacked) {
        assignMergeValue(object, key, stacked);
        return;
      }
      var newValue = customizer ? customizer(objValue, srcValue, key + "", object, source, stack) : void 0;
      var isCommon = newValue === void 0;
      if (isCommon) {
        var isArr = isArray(srcValue), isBuff = !isArr && isBuffer(srcValue), isTyped = !isArr && !isBuff && isTypedArray(srcValue);
        newValue = srcValue;
        if (isArr || isBuff || isTyped) {
          if (isArray(objValue)) {
            newValue = objValue;
          } else if (isArrayLikeObject(objValue)) {
            newValue = copyArray(objValue);
          } else if (isBuff) {
            isCommon = false;
            newValue = cloneBuffer(srcValue, true);
          } else if (isTyped) {
            isCommon = false;
            newValue = cloneTypedArray(srcValue, true);
          } else {
            newValue = [];
          }
        } else if (isPlainObject2(srcValue) || isArguments(srcValue)) {
          newValue = objValue;
          if (isArguments(objValue)) {
            newValue = toPlainObject(objValue);
          } else if (!isObject(objValue) || isFunction3(objValue)) {
            newValue = initCloneObject(srcValue);
          }
        } else {
          isCommon = false;
        }
      }
      if (isCommon) {
        stack.set(srcValue, newValue);
        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
        stack["delete"](srcValue);
      }
      assignMergeValue(object, key, newValue);
    }
    module.exports = baseMergeDeep;
  }
});

// node_modules/lodash/_baseMerge.js
var require_baseMerge = __commonJS({
  "node_modules/lodash/_baseMerge.js"(exports, module) {
    var Stack = require_Stack();
    var assignMergeValue = require_assignMergeValue();
    var baseFor = require_baseFor();
    var baseMergeDeep = require_baseMergeDeep();
    var isObject = require_isObject();
    var keysIn = require_keysIn();
    var safeGet = require_safeGet();
    function baseMerge(object, source, srcIndex, customizer, stack) {
      if (object === source) {
        return;
      }
      baseFor(source, function(srcValue, key) {
        stack || (stack = new Stack());
        if (isObject(srcValue)) {
          baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
        } else {
          var newValue = customizer ? customizer(safeGet(object, key), srcValue, key + "", object, source, stack) : void 0;
          if (newValue === void 0) {
            newValue = srcValue;
          }
          assignMergeValue(object, key, newValue);
        }
      }, keysIn);
    }
    module.exports = baseMerge;
  }
});

// node_modules/lodash/_isIterateeCall.js
var require_isIterateeCall = __commonJS({
  "node_modules/lodash/_isIterateeCall.js"(exports, module) {
    var eq = require_eq();
    var isArrayLike = require_isArrayLike();
    var isIndex = require_isIndex();
    var isObject = require_isObject();
    function isIterateeCall(value, index, object) {
      if (!isObject(object)) {
        return false;
      }
      var type = typeof index;
      if (type == "number" ? isArrayLike(object) && isIndex(index, object.length) : type == "string" && index in object) {
        return eq(object[index], value);
      }
      return false;
    }
    module.exports = isIterateeCall;
  }
});

// node_modules/lodash/_createAssigner.js
var require_createAssigner = __commonJS({
  "node_modules/lodash/_createAssigner.js"(exports, module) {
    var baseRest = require_baseRest();
    var isIterateeCall = require_isIterateeCall();
    function createAssigner(assigner) {
      return baseRest(function(object, sources) {
        var index = -1, length = sources.length, customizer = length > 1 ? sources[length - 1] : void 0, guard = length > 2 ? sources[2] : void 0;
        customizer = assigner.length > 3 && typeof customizer == "function" ? (length--, customizer) : void 0;
        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
          customizer = length < 3 ? void 0 : customizer;
          length = 1;
        }
        object = Object(object);
        while (++index < length) {
          var source = sources[index];
          if (source) {
            assigner(object, source, index, customizer);
          }
        }
        return object;
      });
    }
    module.exports = createAssigner;
  }
});

// node_modules/lodash/merge.js
var require_merge = __commonJS({
  "node_modules/lodash/merge.js"(exports, module) {
    var baseMerge = require_baseMerge();
    var createAssigner = require_createAssigner();
    var merge2 = createAssigner(function(object, source, srcIndex) {
      baseMerge(object, source, srcIndex);
    });
    module.exports = merge2;
  }
});

// node_modules/lodash/isEmpty.js
var require_isEmpty = __commonJS({
  "node_modules/lodash/isEmpty.js"(exports, module) {
    var baseKeys = require_baseKeys();
    var getTag = require_getTag();
    var isArguments = require_isArguments();
    var isArray = require_isArray();
    var isArrayLike = require_isArrayLike();
    var isBuffer = require_isBuffer();
    var isPrototype = require_isPrototype();
    var isTypedArray = require_isTypedArray();
    var mapTag = "[object Map]";
    var setTag = "[object Set]";
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    function isEmpty2(value) {
      if (value == null) {
        return true;
      }
      if (isArrayLike(value) && (isArray(value) || typeof value == "string" || typeof value.splice == "function" || isBuffer(value) || isTypedArray(value) || isArguments(value))) {
        return !value.length;
      }
      var tag = getTag(value);
      if (tag == mapTag || tag == setTag) {
        return !value.size;
      }
      if (isPrototype(value)) {
        return !baseKeys(value).length;
      }
      for (var key in value) {
        if (hasOwnProperty.call(value, key)) {
          return false;
        }
      }
      return true;
    }
    module.exports = isEmpty2;
  }
});

// node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js
function _objectWithoutPropertiesLoose(r, e) {
  if (null == r) return {};
  var t = {};
  for (var n in r) if ({}.hasOwnProperty.call(r, n)) {
    if (-1 !== e.indexOf(n)) continue;
    t[n] = r[n];
  }
  return t;
}

// node_modules/rsuite-table/es/Table.js
var import_react36 = __toESM(require_react());
var ReactIs2 = __toESM(require_react_is());

// node_modules/dom-lib/esm/canUseDOM.js
var canUseDOM = !!(typeof window !== "undefined" && window.document && window.document.createElement);
var canUseDOM_default = canUseDOM;

// node_modules/dom-lib/esm/utils/stringFormatter.js
function camelize(string) {
  return string.replace(/\-(\w)/g, function(_char) {
    return _char.slice(1).toUpperCase();
  });
}
function hyphenate(string) {
  return string.replace(/([A-Z])/g, "-$1").toLowerCase();
}

// node_modules/dom-lib/esm/utils/getVendorPrefixedName.js
var memoized = {};
var prefixes = ["Webkit", "ms", "Moz", "O"];
var prefixRegex = new RegExp("^(" + prefixes.join("|") + ")");
var testStyle = canUseDOM_default ? document.createElement("div").style : {};
function getWithPrefix(name) {
  for (var i = 0; i < prefixes.length; i += 1) {
    var prefixedName = prefixes[i] + name;
    if (prefixedName in testStyle) {
      return prefixedName;
    }
  }
  return null;
}
function getVendorPrefixedName(property) {
  var name = camelize(property);
  if (memoized[name] === void 0) {
    var capitalizedName = name.charAt(0).toUpperCase() + name.slice(1);
    if (prefixRegex.test(capitalizedName)) {
      throw new Error("getVendorPrefixedName must only be called with unprefixed\n          CSS property names. It was called with " + property);
    }
    memoized[name] = name in testStyle ? name : getWithPrefix(capitalizedName);
  }
  return memoized[name] || name;
}
var getVendorPrefixedName_default = getVendorPrefixedName;

// node_modules/dom-lib/esm/utils/BrowserSupportCore.js
var BrowserSupportCore_default = {
  /**
   * @return {bool} True if browser supports css animations.
   */
  hasCSSAnimations: function hasCSSAnimations() {
    return !!getVendorPrefixedName_default("animationName");
  },
  /**
   * @return {bool} True if browser supports css transforms.
   */
  hasCSSTransforms: function hasCSSTransforms() {
    return !!getVendorPrefixedName_default("transform");
  },
  /**
   * @return {bool} True if browser supports css 3d transforms.
   */
  hasCSS3DTransforms: function hasCSS3DTransforms() {
    return !!getVendorPrefixedName_default("perspective");
  },
  /**
   * @return {bool} True if browser supports css transitions.
   */
  hasCSSTransitions: function hasCSSTransitions() {
    return !!getVendorPrefixedName_default("transition");
  }
};

// node_modules/dom-lib/esm/utils/getGlobal.js
function getGlobal() {
  if (typeof globalThis !== "undefined") {
    return globalThis;
  }
  if (typeof self !== "undefined") {
    return self;
  }
  if (typeof window !== "undefined") {
    return window;
  }
  throw new Error("unable to locate global object");
}
var getGlobal_default = getGlobal;

// node_modules/dom-lib/esm/translateDOMPositionXY.js
var g = getGlobal_default();
var TRANSFORM = getVendorPrefixedName_default("transform");
var BACKFACE_VISIBILITY = getVendorPrefixedName_default("backfaceVisibility");
var appendLeftAndTop = function appendLeftAndTop2(style, x, y) {
  if (x === void 0) {
    x = 0;
  }
  if (y === void 0) {
    y = 0;
  }
  style.left = x + "px";
  style.top = y + "px";
  return style;
};
var appendTranslate = function appendTranslate2(style, x, y) {
  if (x === void 0) {
    x = 0;
  }
  if (y === void 0) {
    y = 0;
  }
  style[TRANSFORM] = "translate(" + x + "px," + y + "px)";
  return style;
};
var appendTranslate3d = function appendTranslate3d2(style, x, y) {
  if (x === void 0) {
    x = 0;
  }
  if (y === void 0) {
    y = 0;
  }
  style[TRANSFORM] = "translate3d(" + x + "px," + y + "px,0)";
  style[BACKFACE_VISIBILITY] = "hidden";
  return style;
};
var getTranslateDOMPositionXY = function getTranslateDOMPositionXY2(conf) {
  var _ref = conf || {}, _ref$enableTransform = _ref.enableTransform, enableTransform = _ref$enableTransform === void 0 ? true : _ref$enableTransform, _ref$enable3DTransfor = _ref.enable3DTransform, enable3DTransform = _ref$enable3DTransfor === void 0 ? true : _ref$enable3DTransfor, forceUseTransform = _ref.forceUseTransform;
  if (forceUseTransform) {
    return conf.enable3DTransform ? appendTranslate3d : appendTranslate;
  }
  if (BrowserSupportCore_default.hasCSSTransforms() && enableTransform) {
    var ua = g.window ? g.window.navigator.userAgent : "UNKNOWN";
    var isSafari = /Safari\//.test(ua) && !/Chrome\//.test(ua);
    if (!isSafari && BrowserSupportCore_default.hasCSS3DTransforms() && enable3DTransform) {
      return appendTranslate3d;
    }
    return appendTranslate;
  }
  return appendLeftAndTop;
};
var translateDOMPositionXY = getTranslateDOMPositionXY();
var translateDOMPositionXY_default = translateDOMPositionXY;

// node_modules/rsuite-table/es/Table.js
var import_prop_types5 = __toESM(require_prop_types());
var import_isFunction2 = __toESM(require_isFunction());
var import_debounce2 = __toESM(require_debounce());

// node_modules/rsuite-table/es/Row.js
var import_react29 = __toESM(require_react());

// node_modules/rsuite-table/es/utils/prefix.js
var import_classnames = __toESM(require_classnames());
var import_curry = __toESM(require_curry());
function prefix(pre, className) {
  if (!pre || !className) {
    return "";
  }
  if (Array.isArray(className)) {
    return (0, import_classnames.default)(className.filter(function(name) {
      return !!name;
    }).map(function(name) {
      return pre + "-" + name;
    }));
  }
  if (pre[pre.length - 1] === "-") {
    return "" + pre + className;
  }
  return pre + "-" + className;
}
var prefix_default = (0, import_curry.default)(prefix);

// node_modules/rsuite-table/es/utils/getTotalByColumns.js
var import_react = __toESM(require_react());
var import_isPlainObject = __toESM(require_isPlainObject());

// node_modules/rsuite-table/es/utils/getColumnProps.js
function getColumnProps(column) {
  var _column$type, _column$type$render, _column$type$render$c;
  var columnDefaultProps = ((_column$type = column["type"]) === null || _column$type === void 0 ? void 0 : (_column$type$render = _column$type["render"]) === null || _column$type$render === void 0 ? void 0 : (_column$type$render$c = _column$type$render.call(_column$type)) === null || _column$type$render$c === void 0 ? void 0 : _column$type$render$c.props) || {};
  return _extends({}, columnDefaultProps, column === null || column === void 0 ? void 0 : column.props);
}

// node_modules/rsuite-table/es/utils/getTotalByColumns.js
function getTotalByColumns(columns) {
  var totalFlexGrow = 0;
  var totalWidth = 0;
  var _count = function count(items) {
    Array.from(items).forEach(function(column) {
      if (import_react.default.isValidElement(column)) {
        var _getColumnProps = getColumnProps(column), flexGrow2 = _getColumnProps.flexGrow, _getColumnProps$width = _getColumnProps.width, width2 = _getColumnProps$width === void 0 ? 0 : _getColumnProps$width;
        totalFlexGrow += flexGrow2 || 0;
        totalWidth += flexGrow2 ? 0 : width2;
      } else if (Array.isArray(column)) {
        _count(column);
      }
    });
  };
  if (Array.isArray(columns)) {
    _count(columns);
  } else if ((0, import_isPlainObject.default)(columns)) {
    var _columns$props = columns === null || columns === void 0 ? void 0 : columns.props, flexGrow = _columns$props.flexGrow, _columns$props$width = _columns$props.width, width = _columns$props$width === void 0 ? 0 : _columns$props$width;
    totalFlexGrow = flexGrow || 0;
    totalWidth = flexGrow ? 0 : width;
  }
  return {
    totalFlexGrow,
    totalWidth
  };
}
var getTotalByColumns_default = getTotalByColumns;

// node_modules/rsuite-table/es/utils/mergeCells.js
var import_react13 = __toESM(require_react());
var import_isFunction = __toESM(require_isFunction());
var import_get2 = __toESM(require_get());
var import_isNil3 = __toESM(require_isNil());

// node_modules/rsuite-table/es/ColumnGroup.js
var import_react2 = __toESM(require_react());
var import_prop_types = __toESM(require_prop_types());
var _excluded = ["header", "className", "children", "classPrefix", "headerHeight", "verticalAlign", "align", "width", "groupHeaderHeight"];
var ColumnGroup = import_react2.default.forwardRef(function(props, ref) {
  var header = props.header, className = props.className, children = props.children, _props$classPrefix = props.classPrefix, classPrefix = _props$classPrefix === void 0 ? "column-group" : _props$classPrefix, _props$headerHeight = props.headerHeight, headerHeight = _props$headerHeight === void 0 ? 80 : _props$headerHeight, verticalAlign = props.verticalAlign, align = props.align, width = props.width, groupHeightProp = props.groupHeaderHeight, rest = _objectWithoutPropertiesLoose(props, _excluded);
  var groupHeight = typeof groupHeightProp !== "undefined" ? groupHeightProp : headerHeight / 2;
  var restHeight = typeof groupHeightProp !== "undefined" ? headerHeight - groupHeightProp : headerHeight / 2;
  var styles = {
    height: groupHeight,
    width
  };
  var _useClassNames = useClassNames_default(classPrefix), withClassPrefix = _useClassNames.withClassPrefix, merge2 = _useClassNames.merge, prefix2 = _useClassNames.prefix;
  var classes = merge2(className, withClassPrefix());
  var contentStyles = _extends({}, convertToFlex({
    verticalAlign,
    align
  }), styles);
  return import_react2.default.createElement("div", _extends({
    ref,
    className: classes
  }, rest), import_react2.default.createElement("div", {
    className: prefix2("header"),
    style: styles
  }, import_react2.default.createElement("div", {
    className: prefix2("header-content"),
    style: contentStyles
  }, header)), children ? import_react2.default.Children.map(children, function(node) {
    return import_react2.default.cloneElement(node, {
      className: prefix2("cell"),
      predefinedStyle: {
        height: restHeight,
        top: styles.height
      },
      headerHeight: restHeight,
      verticalAlign: node.props.verticalAlign || verticalAlign,
      children: import_react2.default.createElement("span", {
        className: prefix2("cell-content")
      }, node.props.children)
    });
  }) : null);
});
ColumnGroup.displayName = "Table.ColumnGroup";
ColumnGroup.propTypes = {
  header: import_prop_types.default.node,
  classPrefix: import_prop_types.default.string,
  groupHeaderHeight: import_prop_types.default.number,
  verticalAlign: import_prop_types.default.oneOf(["top", "middle", "bottom"])
};
var ColumnGroup_default = ColumnGroup;

// node_modules/rsuite-table/es/HeaderCell.js
var import_react12 = __toESM(require_react());
var import_prop_types4 = __toESM(require_prop_types());
var import_classnames2 = __toESM(require_classnames());
var import_isNil2 = __toESM(require_isNil());

// node_modules/@rsuite/icons/esm/icons/direction/Sort.js
var React3 = __toESM(require_react());
var import_react3 = __toESM(require_react());
function _define_property(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _object_spread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    var ownKeys = Object.keys(source);
    if (typeof Object.getOwnPropertySymbols === "function") {
      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
        return Object.getOwnPropertyDescriptor(source, sym).enumerable;
      }));
    }
    ownKeys.forEach(function(key) {
      _define_property(target, key, source[key]);
    });
  }
  return target;
}
var Sort = function(props, ref) {
  return React3.createElement("svg", _object_spread({
    xmlns: "http://www.w3.org/2000/svg",
    width: "1em",
    height: "1em",
    viewBox: "0 0 16 16",
    fill: "currentColor",
    ref
  }, props), React3.createElement("path", {
    d: "M7.616 3.18a.5.5 0 0 1 .696-.071l.072.071 2.5 3a.5.5 0 0 1-.704.704l-.064-.064L8 4.281 5.884 6.82a.5.5 0 0 1-.63.115l-.074-.051a.5.5 0 0 1-.115-.63l.051-.074zM7.616 12.82a.5.5 0 0 0 .696.071l.072-.071 2.5-3a.5.5 0 0 0-.704-.704l-.064.064L8 11.719 5.884 9.18a.5.5 0 0 0-.63-.115l-.074.051a.5.5 0 0 0-.115.63l.051.074z"
  }));
};
var ForwardRef = (0, import_react3.forwardRef)(Sort);
var Sort_default = ForwardRef;

// node_modules/@rsuite/icons/esm/react/Sort.js
var Sort2 = createSvgIcon_default({
  as: Sort_default,
  ariaLabel: "sort",
  category: "direction",
  displayName: "Sort"
});
var Sort_default2 = Sort2;

// node_modules/@rsuite/icons/esm/icons/direction/SortUp.js
var React4 = __toESM(require_react());
var import_react4 = __toESM(require_react());
function _define_property2(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _object_spread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    var ownKeys = Object.keys(source);
    if (typeof Object.getOwnPropertySymbols === "function") {
      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
        return Object.getOwnPropertyDescriptor(source, sym).enumerable;
      }));
    }
    ownKeys.forEach(function(key) {
      _define_property2(target, key, source[key]);
    });
  }
  return target;
}
var SortUp = function(props, ref) {
  return React4.createElement("svg", _object_spread2({
    xmlns: "http://www.w3.org/2000/svg",
    width: "1em",
    height: "1em",
    viewBox: "0 0 16 16",
    fill: "currentColor",
    ref
  }, props), React4.createElement("path", {
    d: "M8.5 2a.5.5 0 0 1 .394.192l3.996 4.996a.5.5 0 1 1-.781.625l-3.11-3.887v9.575a.5.5 0 0 1-1 0V3.926l-3.11 3.887a.5.5 0 1 1-.781-.625l3.998-4.997.013-.015a.5.5 0 0 1 .38-.175z"
  }));
};
var ForwardRef2 = (0, import_react4.forwardRef)(SortUp);
var SortUp_default = ForwardRef2;

// node_modules/@rsuite/icons/esm/react/SortUp.js
var SortUp2 = createSvgIcon_default({
  as: SortUp_default,
  ariaLabel: "sort up",
  category: "direction",
  displayName: "SortUp"
});
var SortUp_default2 = SortUp2;

// node_modules/@rsuite/icons/esm/icons/direction/SortDown.js
var React5 = __toESM(require_react());
var import_react5 = __toESM(require_react());
function _define_property3(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _object_spread3(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    var ownKeys = Object.keys(source);
    if (typeof Object.getOwnPropertySymbols === "function") {
      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
        return Object.getOwnPropertyDescriptor(source, sym).enumerable;
      }));
    }
    ownKeys.forEach(function(key) {
      _define_property3(target, key, source[key]);
    });
  }
  return target;
}
var SortDown = function(props, ref) {
  return React5.createElement("svg", _object_spread3({
    xmlns: "http://www.w3.org/2000/svg",
    width: "1em",
    height: "1em",
    viewBox: "0 0 16 16",
    fill: "currentColor",
    ref
  }, props), React5.createElement("path", {
    d: "M8.5 14a.5.5 0 0 0 .394-.192l3.996-4.996a.5.5 0 1 0-.781-.625l-3.11 3.887V2.499a.5.5 0 0 0-1 0v9.575l-3.11-3.887a.5.5 0 1 0-.781.625l3.998 4.997.013.015a.5.5 0 0 0 .38.175z"
  }));
};
var ForwardRef3 = (0, import_react5.forwardRef)(SortDown);
var SortDown_default = ForwardRef3;

// node_modules/@rsuite/icons/esm/react/SortDown.js
var SortDown2 = createSvgIcon_default({
  as: SortDown_default,
  ariaLabel: "sort down",
  category: "direction",
  displayName: "SortDown"
});
var SortDown_default2 = SortDown2;

// node_modules/rsuite-table/es/ColumnResizeHandler.js
var import_react7 = __toESM(require_react());
var import_clamp = __toESM(require_clamp());

// node_modules/dom-lib/esm/on.js
function on(target, eventType, listener, options) {
  if (options === void 0) {
    options = false;
  }
  target.addEventListener(eventType, listener, options);
  return {
    off: function off() {
      target.removeEventListener(eventType, listener, options);
    }
  };
}

// node_modules/dom-lib/esm/cancelAnimationFramePolyfill.js
var g2 = getGlobal_default();
var cancelAnimationFramePolyfill = g2.cancelAnimationFrame || g2.clearTimeout;
var cancelAnimationFramePolyfill_default = cancelAnimationFramePolyfill;

// node_modules/dom-lib/esm/requestAnimationFramePolyfill.js
var g3 = getGlobal_default();
var lastTime = 0;
function _setTimeout(callback) {
  var currTime = Date.now();
  var timeDelay = Math.max(0, 16 - (currTime - lastTime));
  lastTime = currTime + timeDelay;
  return g3.setTimeout(function() {
    callback(Date.now());
  }, timeDelay);
}
var requestAnimationFramePolyfill = g3.requestAnimationFrame || _setTimeout;
var requestAnimationFramePolyfill_default = requestAnimationFramePolyfill;

// node_modules/dom-lib/esm/DOMMouseMoveTracker.js
var DOMMouseMoveTracker = function() {
  function DOMMouseMoveTracker2(onMove, onMoveEnd, domNode) {
    var _this2 = this;
    this.isDraggingStatus = false;
    this.animationFrameID = null;
    this.domNode = void 0;
    this.onMove = null;
    this.onMoveEnd = null;
    this.eventMoveToken = null;
    this.eventUpToken = null;
    this.moveEvent = null;
    this.deltaX = 0;
    this.deltaY = 0;
    this.x = 0;
    this.y = 0;
    this.isDragging = function() {
      return _this2.isDraggingStatus;
    };
    this.onMouseMove = function(event) {
      var x = event.clientX;
      var y = event.clientY;
      _this2.deltaX += x - _this2.x;
      _this2.deltaY += y - _this2.y;
      if (_this2.animationFrameID === null) {
        _this2.animationFrameID = requestAnimationFramePolyfill_default(_this2.didMouseMove);
      }
      _this2.x = x;
      _this2.y = y;
      _this2.moveEvent = event;
      event.preventDefault();
    };
    this.didMouseMove = function() {
      _this2.animationFrameID = null;
      _this2.onMove(_this2.deltaX, _this2.deltaY, _this2.moveEvent);
      _this2.deltaX = 0;
      _this2.deltaY = 0;
    };
    this.onMouseUp = function(event) {
      if (_this2.animationFrameID) {
        _this2.didMouseMove();
      }
      _this2.onMoveEnd && _this2.onMoveEnd(event);
    };
    this.domNode = domNode;
    this.onMove = onMove;
    this.onMoveEnd = onMoveEnd;
  }
  var _proto = DOMMouseMoveTracker2.prototype;
  _proto.captureMouseMoves = function captureMouseMoves(event) {
    if (!this.eventMoveToken && !this.eventUpToken) {
      this.eventMoveToken = on(this.domNode, "mousemove", this.onMouseMove);
      this.eventUpToken = on(this.domNode, "mouseup", this.onMouseUp);
    }
    if (!this.isDraggingStatus) {
      this.deltaX = 0;
      this.deltaY = 0;
      this.isDraggingStatus = true;
      this.x = event.clientX;
      this.y = event.clientY;
    }
    event.preventDefault();
  };
  _proto.releaseMouseMoves = function releaseMouseMoves() {
    if (this.eventMoveToken) {
      this.eventMoveToken.off();
      this.eventMoveToken = null;
    }
    if (this.eventUpToken) {
      this.eventUpToken.off();
      this.eventUpToken = null;
    }
    if (this.animationFrameID !== null) {
      cancelAnimationFramePolyfill_default(this.animationFrameID);
      this.animationFrameID = null;
    }
    if (this.isDraggingStatus) {
      this.isDraggingStatus = false;
      this.x = 0;
      this.y = 0;
    }
  };
  return DOMMouseMoveTracker2;
}();
var DOMMouseMoveTracker_default = DOMMouseMoveTracker;

// node_modules/rsuite-table/es/TableContext.js
var import_react6 = __toESM(require_react());

// node_modules/rsuite-table/es/utils/translateDOMPositionXY.js
var translateDOMPositionXY2 = getTranslateDOMPositionXY({
  enable3DTransform: true
});
var translateDOMPositionXY_default2 = translateDOMPositionXY2;

// node_modules/rsuite-table/es/utils/isRTL.js
function isRTL() {
  return typeof window !== "undefined" && (document.body.getAttribute("dir") || document.dir) === "rtl";
}

// node_modules/rsuite-table/es/TableContext.js
var TableContext = import_react6.default.createContext({
  rtl: isRTL(),
  isTree: false,
  hasCustomTreeCol: false,
  translateDOMPositionXY: translateDOMPositionXY_default2
});
var TableContext_default = TableContext;

// node_modules/rsuite-table/es/constants.js
var LAYER_WIDTH = 30;
var SCROLLBAR_MIN_WIDTH = 14;
var SCROLLBAR_WIDTH = 10;
var CELL_PADDING_HEIGHT = 26;
var RESIZE_MIN_WIDTH = 20;
var SORT_TYPE = {
  DESC: "desc",
  ASC: "asc"
};
var ROW_HEIGHT = 46;
var ROW_HEADER_HEIGHT = 40;
var TRANSITION_DURATION = 1e3;
var BEZIER = "cubic-bezier(0, 0, .58, 1)";
var EXPANDED_KEY = Symbol("expanded");
var PARENT_KEY = Symbol("parent");
var TREE_DEPTH = Symbol("treeDepth");

// node_modules/rsuite-table/es/ColumnResizeHandler.js
var _excluded2 = ["columnLeft", "classPrefix", "height", "className", "style", "columnFixed", "defaultColumnWidth", "minWidth", "onColumnResizeStart", "onColumnResizeMove", "onColumnResizeEnd"];
var ColumnResizeHandler = import_react7.default.forwardRef(function(props, ref) {
  var _extends2;
  var _props$columnLeft = props.columnLeft, columnLeft = _props$columnLeft === void 0 ? 0 : _props$columnLeft, _props$classPrefix = props.classPrefix, classPrefix = _props$classPrefix === void 0 ? "column-resize-spanner" : _props$classPrefix, height = props.height, className = props.className, style = props.style, columnFixed = props.columnFixed, defaultColumnWidth = props.defaultColumnWidth, minWidth = props.minWidth, onColumnResizeStart = props.onColumnResizeStart, onColumnResizeMove = props.onColumnResizeMove, onColumnResizeEnd = props.onColumnResizeEnd, rest = _objectWithoutPropertiesLoose(props, _excluded2);
  var _useContext = (0, import_react7.useContext)(TableContext_default), rtl = _useContext.rtl;
  var _useClassNames = useClassNames_default(classPrefix), withClassPrefix = _useClassNames.withClassPrefix, merge2 = _useClassNames.merge;
  var classes = merge2(className, withClassPrefix());
  var columnWidth = (0, import_react7.useRef)(defaultColumnWidth || 0);
  var mouseMoveTracker = (0, import_react7.useRef)();
  var isKeyDown = (0, import_react7.useRef)();
  var cursorDelta = (0, import_react7.useRef)(0);
  var handleMove = (0, import_react7.useCallback)(function(deltaX) {
    if (!isKeyDown.current) {
      return;
    }
    cursorDelta.current += deltaX;
    columnWidth.current = (0, import_clamp.default)((defaultColumnWidth || 0) + (rtl ? -cursorDelta.current : cursorDelta.current), minWidth ? Math.max(minWidth, RESIZE_MIN_WIDTH) : RESIZE_MIN_WIDTH, 2e4);
    onColumnResizeMove === null || onColumnResizeMove === void 0 ? void 0 : onColumnResizeMove(columnWidth.current, columnLeft, columnFixed);
  }, [columnFixed, columnLeft, defaultColumnWidth, minWidth, onColumnResizeMove, rtl]);
  var handleColumnResizeEnd = (0, import_react7.useCallback)(function() {
    var _mouseMoveTracker$cur, _mouseMoveTracker$cur2;
    isKeyDown.current = false;
    onColumnResizeEnd === null || onColumnResizeEnd === void 0 ? void 0 : onColumnResizeEnd(columnWidth.current, cursorDelta.current);
    (_mouseMoveTracker$cur = mouseMoveTracker.current) === null || _mouseMoveTracker$cur === void 0 ? void 0 : (_mouseMoveTracker$cur2 = _mouseMoveTracker$cur.releaseMouseMoves) === null || _mouseMoveTracker$cur2 === void 0 ? void 0 : _mouseMoveTracker$cur2.call(_mouseMoveTracker$cur);
    mouseMoveTracker.current = null;
  }, [onColumnResizeEnd]);
  var getMouseMoveTracker = (0, import_react7.useCallback)(function() {
    return mouseMoveTracker.current || new DOMMouseMoveTracker_default(handleMove, handleColumnResizeEnd, document.body);
  }, [handleColumnResizeEnd, handleMove]);
  var handleColumnResizeMouseDown = (0, import_react7.useCallback)(function(event) {
    mouseMoveTracker.current = getMouseMoveTracker();
    mouseMoveTracker.current.captureMouseMoves(event);
    isKeyDown.current = true;
    cursorDelta.current = 0;
    var client = {
      clientX: event.clientX,
      clientY: event.clientY,
      preventDefault: Function()
    };
    onColumnResizeStart === null || onColumnResizeStart === void 0 ? void 0 : onColumnResizeStart(client);
  }, [getMouseMoveTracker, onColumnResizeStart]);
  (0, import_react7.useEffect)(function() {
    return function() {
      var _mouseMoveTracker$cur3;
      (_mouseMoveTracker$cur3 = mouseMoveTracker.current) === null || _mouseMoveTracker$cur3 === void 0 ? void 0 : _mouseMoveTracker$cur3.releaseMouseMoves();
      mouseMoveTracker.current = null;
    };
  }, []);
  if (columnFixed === "right") {
    return null;
  }
  var styles = _extends((_extends2 = {}, _extends2[rtl ? "right" : "left"] = columnWidth.current + columnLeft - 2, _extends2.height = height, _extends2), style);
  return import_react7.default.createElement("div", _extends({
    tabIndex: -1,
    role: "button",
    ref
  }, rest, {
    className: classes,
    style: styles,
    onMouseDown: handleColumnResizeMouseDown
  }));
});
ColumnResizeHandler.displayName = "Table.ColumnResizeHandler";
var ColumnResizeHandler_default = ColumnResizeHandler;

// node_modules/rsuite-table/es/Cell.js
var import_react11 = __toESM(require_react());
var import_prop_types3 = __toESM(require_prop_types());
var import_omit = __toESM(require_omit());
var import_isNil = __toESM(require_isNil());
var import_get = __toESM(require_get());

// node_modules/@rsuite/icons/esm/icons/direction/ArrowRight.js
var React8 = __toESM(require_react());
var import_react8 = __toESM(require_react());
function _define_property4(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _object_spread4(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    var ownKeys = Object.keys(source);
    if (typeof Object.getOwnPropertySymbols === "function") {
      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
        return Object.getOwnPropertyDescriptor(source, sym).enumerable;
      }));
    }
    ownKeys.forEach(function(key) {
      _define_property4(target, key, source[key]);
    });
  }
  return target;
}
var ArrowRight = function(props, ref) {
  return React8.createElement("svg", _object_spread4({
    xmlns: "http://www.w3.org/2000/svg",
    width: "1em",
    height: "1em",
    viewBox: "0 0 16 16",
    fill: "currentColor",
    ref
  }, props), React8.createElement("path", {
    d: "m6 12 4-4-4-4z"
  }));
};
var ForwardRef4 = (0, import_react8.forwardRef)(ArrowRight);
var ArrowRight_default = ForwardRef4;

// node_modules/@rsuite/icons/esm/react/ArrowRight.js
var ArrowRight2 = createSvgIcon_default({
  as: ArrowRight_default,
  ariaLabel: "arrow right",
  category: "direction",
  displayName: "ArrowRight"
});
var ArrowRight_default2 = ArrowRight2;

// node_modules/@rsuite/icons/esm/icons/direction/ArrowDown.js
var React9 = __toESM(require_react());
var import_react9 = __toESM(require_react());
function _define_property5(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _object_spread5(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    var ownKeys = Object.keys(source);
    if (typeof Object.getOwnPropertySymbols === "function") {
      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
        return Object.getOwnPropertyDescriptor(source, sym).enumerable;
      }));
    }
    ownKeys.forEach(function(key) {
      _define_property5(target, key, source[key]);
    });
  }
  return target;
}
var ArrowDown = function(props, ref) {
  return React9.createElement("svg", _object_spread5({
    xmlns: "http://www.w3.org/2000/svg",
    width: "1em",
    height: "1em",
    viewBox: "0 0 16 16",
    fill: "currentColor",
    ref
  }, props), React9.createElement("path", {
    d: "m4 6 4 4 4-4z"
  }));
};
var ForwardRef5 = (0, import_react9.forwardRef)(ArrowDown);
var ArrowDown_default = ForwardRef5;

// node_modules/@rsuite/icons/esm/react/ArrowDown.js
var ArrowDown2 = createSvgIcon_default({
  as: ArrowDown_default,
  ariaLabel: "arrow down",
  category: "direction",
  displayName: "ArrowDown"
});
var ArrowDown_default2 = ArrowDown2;

// node_modules/rsuite-table/es/Column.js
var import_react10 = __toESM(require_react());
var import_prop_types2 = __toESM(require_prop_types());
function Column(_props) {
  return import_react10.default.createElement(import_react10.default.Fragment, null);
}
var propTypes = {
  align: import_prop_types2.default.string,
  verticalAlign: import_prop_types2.default.string,
  width: import_prop_types2.default.number,
  fixed: import_prop_types2.default.oneOfType([import_prop_types2.default.bool, import_prop_types2.default.oneOf(["left", "right"])]),
  resizable: import_prop_types2.default.bool,
  sortable: import_prop_types2.default.bool,
  flexGrow: import_prop_types2.default.number,
  minWidth: import_prop_types2.default.number,
  colSpan: import_prop_types2.default.number,
  rowSpan: import_prop_types2.default.func,
  treeCol: import_prop_types2.default.bool,
  onResize: import_prop_types2.default.func,
  children: import_prop_types2.default.node,
  fullText: import_prop_types2.default.bool
};
Column.displayName = "Table.Column";
Column.defaultProps = {
  width: 100
};
Column.propTypes = propTypes;
var columnHandledProps = Object.keys(propTypes);
var Column_default = Column;

// node_modules/rsuite-table/es/Cell.js
var _excluded3 = ["classPrefix", "width", "left", "headerHeight", "depth", "height", "style", "className", "fullText", "firstColumn", "lastColumn", "isHeaderCell", "align", "children", "rowData", "dataKey", "rowIndex", "removed", "rowKey", "rowSpan", "wordWrap", "verticalAlign", "expanded", "treeCol", "hasChildren", "predefinedStyle", "renderCell", "renderTreeToggle", "onClick", "onTreeToggle"];
var groupKeys = ["groupCount", "groupHeader", "groupHeaderHeight", "groupAlign", "groupVerticalAlign", "renderSortIcon"];
var Cell = import_react11.default.forwardRef(function(props, ref) {
  var _extends2, _extends3;
  var _props$classPrefix = props.classPrefix, classPrefix = _props$classPrefix === void 0 ? "cell" : _props$classPrefix, _props$width = props.width, width = _props$width === void 0 ? 0 : _props$width, _props$left = props.left, left = _props$left === void 0 ? 0 : _props$left, _props$headerHeight = props.headerHeight, headerHeight = _props$headerHeight === void 0 ? ROW_HEADER_HEIGHT : _props$headerHeight, _props$depth = props.depth, depth = _props$depth === void 0 ? 0 : _props$depth, _props$height = props.height, height = _props$height === void 0 ? ROW_HEIGHT : _props$height, style = props.style, className = props.className, fullText = props.fullText, firstColumn = props.firstColumn, lastColumn = props.lastColumn, isHeaderCell = props.isHeaderCell, align = props.align, children = props.children, rowData = props.rowData, dataKey = props.dataKey, rowIndex = props.rowIndex, removed = props.removed, rowKey = props.rowKey, rowSpan = props.rowSpan, wordWrap = props.wordWrap, verticalAlign = props.verticalAlign, expanded = props.expanded, treeCol = props.treeCol, hasChildren = props.hasChildren, predefinedStyle = props.predefinedStyle, renderCell = props.renderCell, renderTreeToggle = props.renderTreeToggle, onClick = props.onClick, onTreeToggle = props.onTreeToggle, rest = _objectWithoutPropertiesLoose(props, _excluded3);
  var _React$useContext = import_react11.default.useContext(TableContext_default), rtl = _React$useContext.rtl, hasCustomTreeCol = _React$useContext.hasCustomTreeCol, isTree = _React$useContext.isTree;
  var isTreeCol = treeCol || !hasCustomTreeCol && firstColumn && isTree;
  var cellHeight = typeof height === "function" ? rowData ? height(rowData) : ROW_HEIGHT : height;
  if (isTreeCol && !isHeaderCell && !rowData) {
    throw new Error("[Table.Cell]: `rowData` is required for tree column");
  }
  var handleTreeToggle = (0, import_react11.useCallback)(function(event) {
    onTreeToggle === null || onTreeToggle === void 0 ? void 0 : onTreeToggle(rowKey, rowIndex, rowData, event);
  }, [onTreeToggle, rowData, rowIndex, rowKey]);
  var _useClassNames = useClassNames_default(classPrefix), withClassPrefix = _useClassNames.withClassPrefix, merge2 = _useClassNames.merge, prefix2 = _useClassNames.prefix;
  var classes = merge2(className, withClassPrefix({
    expanded: expanded && isTreeCol,
    first: firstColumn,
    last: lastColumn,
    rowspan: rowSpan && !isHeaderCell,
    "full-text": fullText
  }));
  var nextHeight = isHeaderCell ? headerHeight : cellHeight;
  var styles = _extends({}, predefinedStyle, (_extends2 = {}, _extends2[fullText ? "minWidth" : "width"] = width, _extends2.height = nextHeight, _extends2.zIndex = depth, _extends2[rtl ? "right" : "left"] = left, _extends2));
  var paddingKey = rtl ? "paddingRight" : "paddingLeft";
  var contentStyles = _extends({}, convertToFlex({
    align,
    verticalAlign
  }), style, (_extends3 = {
    width: fullText ? width - 1 : width,
    height: nextHeight
  }, _extends3[paddingKey] = isTreeCol ? depth * LAYER_WIDTH + 10 : (style === null || style === void 0 ? void 0 : style[paddingKey]) || (style === null || style === void 0 ? void 0 : style.padding), _extends3));
  if (wordWrap) {
    contentStyles.wordBreak = typeof wordWrap === "boolean" ? "break-all" : wordWrap;
    contentStyles.overflowWrap = wordWrap === "break-word" ? wordWrap : void 0;
  }
  var cellContent = null;
  if (typeof children === "function") {
    if (!rowData) {
      cellContent = null;
    } else {
      cellContent = children(rowData, rowIndex);
    }
  } else if ((0, import_isNil.default)(children)) {
    if (rowData && dataKey) {
      cellContent = (0, import_get.default)(rowData, dataKey);
    }
  } else {
    cellContent = children;
  }
  var renderTreeNodeExpandIcon = function renderTreeNodeExpandIcon2() {
    var ExpandIconComponent = expanded ? ArrowDown_default2 : ArrowRight_default2;
    var expandButton = import_react11.default.createElement(ExpandIconComponent, {
      className: prefix2("expand-icon")
    });
    if (isTreeCol && hasChildren) {
      return import_react11.default.createElement("span", {
        role: "button",
        tabIndex: -1,
        className: prefix2("expand-wrapper"),
        onClick: handleTreeToggle
      }, renderTreeToggle ? renderTreeToggle(expandButton, rowData, expanded) : expandButton);
    }
    return null;
  };
  var content = wordWrap ? import_react11.default.createElement("div", {
    className: prefix2("wrap")
  }, renderTreeNodeExpandIcon(), renderCell ? renderCell(cellContent) : cellContent) : import_react11.default.createElement(import_react11.default.Fragment, null, renderTreeNodeExpandIcon(), renderCell ? renderCell(cellContent) : cellContent);
  if (removed) {
    return null;
  }
  return import_react11.default.createElement("div", _extends({
    ref,
    role: isHeaderCell ? "columnheader" : "gridcell"
  }, (0, import_omit.default)(rest, [].concat(groupKeys, columnHandledProps)), {
    onClick,
    className: classes,
    style: styles
  }), import_react11.default.createElement("div", {
    className: prefix2("content"),
    style: contentStyles
  }, content));
});
Cell.displayName = "Table.Cell";
Cell.propTypes = {
  align: import_prop_types3.default.string,
  verticalAlign: import_prop_types3.default.string,
  className: import_prop_types3.default.string,
  classPrefix: import_prop_types3.default.string,
  dataKey: import_prop_types3.default.string,
  isHeaderCell: import_prop_types3.default.bool,
  width: import_prop_types3.default.number,
  height: import_prop_types3.default.oneOfType([import_prop_types3.default.number, import_prop_types3.default.func]),
  left: import_prop_types3.default.number,
  headerHeight: import_prop_types3.default.number,
  style: import_prop_types3.default.object,
  firstColumn: import_prop_types3.default.bool,
  lastColumn: import_prop_types3.default.bool,
  hasChildren: import_prop_types3.default.bool,
  children: import_prop_types3.default.any,
  rowKey: import_prop_types3.default.oneOfType([import_prop_types3.default.string, import_prop_types3.default.number]),
  rowIndex: import_prop_types3.default.number,
  rowData: import_prop_types3.default.object,
  depth: import_prop_types3.default.number,
  onTreeToggle: import_prop_types3.default.func,
  renderTreeToggle: import_prop_types3.default.func,
  renderCell: import_prop_types3.default.func,
  wordWrap: import_prop_types3.default.any,
  removed: import_prop_types3.default.bool,
  treeCol: import_prop_types3.default.bool,
  expanded: import_prop_types3.default.bool,
  fullText: import_prop_types3.default.bool
};
var Cell_default = Cell;

// node_modules/rsuite-table/es/HeaderCell.js
var _excluded4 = ["className", "classPrefix", "width", "dataKey", "headerHeight", "children", "left", "sortable", "sortColumn", "sortType", "groupHeader", "resizable", "fixed", "minWidth", "index", "flexGrow", "align", "verticalAlign", "onColumnResizeEnd", "onResize", "onColumnResizeStart", "onColumnResizeMove", "onSortColumn", "renderSortIcon"];
var SORTED_ICON = {
  desc: SortDown_default2,
  asc: SortUp_default2
};
var HeaderCell = import_react12.default.forwardRef(function(props, ref) {
  var className = props.className, _props$classPrefix = props.classPrefix, classPrefix = _props$classPrefix === void 0 ? "cell-header" : _props$classPrefix, width = props.width, dataKey = props.dataKey, headerHeight = props.headerHeight, children = props.children, left = props.left, sortable = props.sortable, sortColumn = props.sortColumn, sortType = props.sortType, groupHeader = props.groupHeader, resizable = props.resizable, fixed = props.fixed, minWidth = props.minWidth, index = props.index, flexGrow = props.flexGrow, align = props.align, verticalAlign = props.verticalAlign, onColumnResizeEnd = props.onColumnResizeEnd, onResize = props.onResize, onColumnResizeStart = props.onColumnResizeStart, onColumnResizeMove = props.onColumnResizeMove, onSortColumn = props.onSortColumn, renderSortIcon = props.renderSortIcon, rest = _objectWithoutPropertiesLoose(props, _excluded4);
  var _useState = (0, import_react12.useState)((0, import_isNil2.default)(flexGrow) ? width : 0), columnWidth = _useState[0], setColumnWidth = _useState[1];
  useUpdateEffect_default(function() {
    setColumnWidth((0, import_isNil2.default)(flexGrow) ? width : 0);
  }, [flexGrow, width]);
  var _useClassNames = useClassNames_default(classPrefix), withClassPrefix = _useClassNames.withClassPrefix, merge2 = _useClassNames.merge, prefix2 = _useClassNames.prefix;
  var classes = merge2(className, withClassPrefix({
    sortable
  }));
  var ariaSort;
  if (sortColumn === dataKey) {
    ariaSort = "other";
    if (sortType === "asc") {
      ariaSort = "ascending";
    } else if (sortType === "desc") {
      ariaSort = "descending";
    }
  }
  var handleClick = (0, import_react12.useCallback)(function() {
    if (sortable) {
      onSortColumn === null || onSortColumn === void 0 ? void 0 : onSortColumn(dataKey);
    }
  }, [dataKey, onSortColumn, sortable]);
  var handleColumnResizeStart = (0, import_react12.useCallback)(function() {
    onColumnResizeStart === null || onColumnResizeStart === void 0 ? void 0 : onColumnResizeStart(columnWidth, left, !!fixed);
  }, [columnWidth, fixed, left, onColumnResizeStart]);
  var handleColumnResizeEnd = (0, import_react12.useCallback)(function(nextColumnWidth, cursorDelta) {
    setColumnWidth(nextColumnWidth);
    onColumnResizeEnd === null || onColumnResizeEnd === void 0 ? void 0 : onColumnResizeEnd(nextColumnWidth, cursorDelta, dataKey, index);
    onResize === null || onResize === void 0 ? void 0 : onResize(nextColumnWidth, dataKey);
  }, [dataKey, index, onColumnResizeEnd, onResize]);
  var renderSortColumn = function renderSortColumn2() {
    if (sortable && !groupHeader) {
      var _classNames;
      var SortIcon = sortColumn === dataKey && sortType ? SORTED_ICON[sortType] : Sort_default2;
      var iconClasses = (0, import_classnames2.default)(prefix2("icon-sort"), (_classNames = {}, _classNames[prefix2("icon-sort-" + sortType)] = sortColumn === dataKey, _classNames));
      var sortIcon = renderSortIcon ? renderSortIcon(sortColumn === dataKey ? sortType : void 0) : import_react12.default.createElement(SortIcon, {
        className: iconClasses
      });
      return import_react12.default.createElement("span", {
        className: prefix2("sort-wrapper")
      }, sortIcon);
    }
    return null;
  };
  return import_react12.default.createElement("div", {
    ref,
    className: classes
  }, import_react12.default.createElement(Cell_default, _extends({
    "aria-sort": ariaSort
  }, rest, {
    width,
    dataKey,
    left,
    headerHeight,
    isHeaderCell: true,
    align: !groupHeader ? align : void 0,
    verticalAlign: !groupHeader ? verticalAlign : void 0,
    onClick: !groupHeader ? handleClick : void 0
  }), children, renderSortColumn()), resizable ? import_react12.default.createElement(ColumnResizeHandler_default, {
    defaultColumnWidth: columnWidth,
    key: columnWidth,
    columnLeft: left,
    columnFixed: fixed,
    height: headerHeight ? headerHeight - 1 : void 0,
    minWidth,
    onColumnResizeMove,
    onColumnResizeStart: handleColumnResizeStart,
    onColumnResizeEnd: handleColumnResizeEnd
  }) : null);
});
HeaderCell.displayName = "HeaderCell";
HeaderCell.propTypes = {
  index: import_prop_types4.default.number,
  sortColumn: import_prop_types4.default.string,
  sortType: import_prop_types4.default.oneOf(["desc", "asc"]),
  sortable: import_prop_types4.default.bool,
  resizable: import_prop_types4.default.bool,
  minWidth: import_prop_types4.default.number,
  onColumnResizeStart: import_prop_types4.default.func,
  onColumnResizeEnd: import_prop_types4.default.func,
  onResize: import_prop_types4.default.func,
  onColumnResizeMove: import_prop_types4.default.func,
  onSortColumn: import_prop_types4.default.func,
  flexGrow: import_prop_types4.default.number,
  fixed: import_prop_types4.default.any,
  children: import_prop_types4.default.node,
  renderSortIcon: import_prop_types4.default.func
};
var HeaderCell_default = HeaderCell;

// node_modules/rsuite-table/es/utils/mergeCells.js
function cloneCell(Cell2, props) {
  return import_react13.default.cloneElement(Cell2, props);
}
function mergeCells(cells) {
  var nextCells = [];
  for (var i = 0; i < cells.length; i += 1) {
    var _cells$i$props = cells[i].props, width = _cells$i$props.width, colSpan = _cells$i$props.colSpan, groupCount = _cells$i$props.groupCount, groupHeader = _cells$i$props.groupHeader, groupAlign = _cells$i$props.groupAlign, groupVerticalAlign = _cells$i$props.groupVerticalAlign, isHeaderCell = _cells$i$props.isHeaderCell, headerHeight = _cells$i$props.headerHeight, groupHeaderHeight = _cells$i$props.groupHeaderHeight;
    var groupChildren = [];
    if (groupCount && isHeaderCell) {
      var nextWidth = width;
      var left = 0;
      for (var j = 0; j < groupCount; j += 1) {
        var nextCell = cells[i + j];
        var _nextCell$props = nextCell.props, nextCellWidth = _nextCell$props.width, sortable = _nextCell$props.sortable, children = _nextCell$props.children, dataKey = _nextCell$props.dataKey, onSortColumn = _nextCell$props.onSortColumn, sortColumn = _nextCell$props.sortColumn, sortType = _nextCell$props.sortType, align = _nextCell$props.align, verticalAlign = _nextCell$props.verticalAlign, renderSortIcon = _nextCell$props.renderSortIcon;
        if (j !== 0) {
          nextWidth += nextCellWidth;
          left += cells[i + j - 1].props.width;
          cells[i + j] = cloneCell(nextCell, {
            removed: true
          });
        }
        groupChildren.push(import_react13.default.createElement(HeaderCell_default, {
          key: j,
          left,
          align,
          verticalAlign,
          dataKey,
          width: nextCellWidth,
          sortable,
          sortColumn,
          sortType,
          onSortColumn,
          renderSortIcon
        }, children));
      }
      nextCells.push(cloneCell(cells[i], {
        width: nextWidth,
        children: import_react13.default.createElement(ColumnGroup_default, {
          width: nextWidth,
          headerHeight,
          header: groupHeader,
          align: groupAlign,
          verticalAlign: groupVerticalAlign,
          groupHeaderHeight
        }, groupChildren)
      }));
      continue;
    } else if (colSpan) {
      var _nextWidth = width;
      for (var _j = 0; _j < colSpan; _j += 1) {
        var _nextCell = cells[i + _j];
        if (_nextCell) {
          var _nextCell$props2 = _nextCell.props, rowData = _nextCell$props2.rowData, rowIndex = _nextCell$props2.rowIndex, _children = _nextCell$props2.children, colSpanWidth = _nextCell$props2.width, _isHeaderCell = _nextCell$props2.isHeaderCell, _dataKey = _nextCell$props2.dataKey;
          var cellText = (0, import_isFunction.default)(_children) ? _children(rowData, rowIndex) : (0, import_get2.default)(rowData, _dataKey);
          if (rowData && (0, import_isNil3.default)(cellText) || _isHeaderCell && (0, import_isNil3.default)(_children)) {
            _nextWidth += colSpanWidth;
            cells[i + _j] = cloneCell(_nextCell, {
              removed: true
            });
          }
        }
      }
      nextCells.push(cloneCell(cells[i], {
        width: _nextWidth,
        "aria-colspan": _nextWidth > width ? colSpan : void 0
      }));
      continue;
    }
    nextCells.push(cells[i]);
  }
  return nextCells;
}
var mergeCells_default = mergeCells;

// node_modules/dom-lib/esm/hasClass.js
function hasClass(target, className) {
  if (target.classList) {
    return !!className && target.classList.contains(className);
  }
  return (" " + target.className + " ").indexOf(" " + className + " ") !== -1;
}

// node_modules/dom-lib/esm/addClass.js
function addClass(target, className) {
  if (className) {
    if (target.classList) {
      target.classList.add(className);
    } else if (!hasClass(target, className)) {
      target.className = target.className + " " + className;
    }
  }
  return target;
}

// node_modules/dom-lib/esm/removeClass.js
function removeClass(target, className) {
  if (className) {
    if (target.classList) {
      target.classList.remove(className);
    } else {
      target.className = target.className.replace(new RegExp("(^|\\s)" + className + "(?:\\s|$)", "g"), "$1").replace(/\s+/g, " ").replace(/^\s*|\s*$/g, "");
    }
  }
  return target;
}

// node_modules/rsuite-table/es/utils/toggleClass.js
var toggleClass = function toggleClass2(node, className, condition) {
  if (condition) {
    addClass(node, className);
  } else {
    removeClass(node, className);
  }
};
var toggleClass_default = function(node, className, condition) {
  if (!node) {
    return;
  }
  if (Array.isArray(node) || Object.getPrototypeOf(node).hasOwnProperty("length")) {
    node = node;
    Array.from(node).forEach(function(item) {
      toggleClass(item, className, condition);
    });
    return;
  }
  toggleClass(node, className, condition);
};

// node_modules/rsuite-table/es/utils/flattenData.js
function flattenData(tree, parent) {
  return tree.reduce(function(acc, node) {
    var _extends2;
    var flattened = _extends({}, node, (_extends2 = {}, _extends2[PARENT_KEY] = parent, _extends2));
    acc.push.apply(acc, [flattened].concat(node.children ? flattenData(node.children, flattened) : []));
    return acc;
  }, []);
}
var flattenData_default = flattenData;

// node_modules/rsuite-table/es/utils/findRowKeys.js
function findRowKeys(rows, rowKey, expanded) {
  var keys = [];
  if (!rowKey) {
    return keys;
  }
  for (var i = 0; i < rows.length; i++) {
    var item = rows[i];
    if (item.children) {
      keys.push(item[rowKey]);
      keys = [].concat(keys, findRowKeys(item.children, rowKey));
    } else if (expanded) {
      keys.push(item[rowKey]);
    }
  }
  return keys;
}

// node_modules/rsuite-table/es/utils/findAllParents.js
function findAllParents(node, rowKey) {
  var parents = [];
  var current = node[PARENT_KEY];
  while (current) {
    parents.push(current[rowKey]);
    current = current[PARENT_KEY];
  }
  return parents;
}
var findAllParents_default = findAllParents;

// node_modules/rsuite-table/es/utils/shouldShowRowByExpanded.js
function shouldShowRowByExpanded(expandedRowKeys, parentKeys) {
  if (expandedRowKeys === void 0) {
    expandedRowKeys = [];
  }
  if (parentKeys === void 0) {
    parentKeys = [];
  }
  for (var i = 0; i < ((_parentKeys = parentKeys) === null || _parentKeys === void 0 ? void 0 : _parentKeys.length); i++) {
    var _parentKeys, _expandedRowKeys;
    if (((_expandedRowKeys = expandedRowKeys) === null || _expandedRowKeys === void 0 ? void 0 : _expandedRowKeys.indexOf(parentKeys[i])) === -1) {
      return false;
    }
  }
  return true;
}

// node_modules/rsuite-table/es/utils/resetLeftForCells.js
var import_react14 = __toESM(require_react());
function resetLeftForCells(cells, extraWidth) {
  var left = 0;
  var nextCells = [];
  for (var i = 0; i < cells.length; i++) {
    var cell = cells[i];
    var nextCell = import_react14.default.cloneElement(cell, {
      left,
      width: i === cells.length - 1 && extraWidth ? cell.props.width + extraWidth : cell.props.width
    });
    left += cell.props.width;
    nextCells.push(nextCell);
  }
  return nextCells;
}

// node_modules/rsuite-table/es/utils/isNumberOrTrue.js
function isNumberOrTrue(value) {
  if (typeof value === "undefined") {
    return false;
  }
  return !!value || value === 0;
}

// node_modules/rsuite-table/es/utils/mergeRefs.js
var toFnRef = function toFnRef2(ref) {
  return !ref || typeof ref === "function" ? ref : function(value) {
    ref.current = value;
  };
};
function mergeRefs(refA, refB) {
  var a = toFnRef(refA);
  var b = toFnRef(refB);
  return function(value) {
    if (typeof a === "function") a(value);
    if (typeof b === "function") b(value);
  };
}

// node_modules/rsuite-table/es/utils/requestAnimationTimeout.js
var cancelAnimationTimeout = function cancelAnimationTimeout2(frame) {
  return cancelAnimationFramePolyfill_default(frame.id);
};
var requestAnimationTimeout = function requestAnimationTimeout2(callback, delay) {
  var start;
  Promise.resolve().then(function() {
    start = Date.now();
  });
  var frame = {};
  var _timeout = function timeout() {
    if (Date.now() - start >= delay) {
      callback.call(null);
    } else {
      frame.id = requestAnimationFramePolyfill_default(_timeout);
    }
  };
  frame = {
    id: requestAnimationFramePolyfill_default(_timeout)
  };
  return frame;
};

// node_modules/rsuite-table/es/utils/isSupportTouchEvent.js
function isSupportTouchEvent() {
  return canUseDOM_default && "ontouchstart" in window;
}

// node_modules/rsuite-table/es/utils/convertToFlex.js
var verticalAlignMap = {
  top: "flex-start",
  middle: "center",
  bottom: "flex-end"
};
var alignMap = {
  left: "flex-start",
  center: "center",
  right: "flex-end"
};
function verticalAlignToAlignItems(verticalAlign) {
  return verticalAlignMap[verticalAlign] || verticalAlign;
}
function alignToJustifyContent(align) {
  return alignMap[align] || align;
}
function convertToFlex(props) {
  var verticalAlign = props.verticalAlign, align = props.align;
  if (!verticalAlign && !align) return {};
  return {
    display: "flex",
    flexWrap: "wrap",
    alignItems: verticalAlignToAlignItems(verticalAlign),
    justifyContent: alignToJustifyContent(align)
  };
}

// node_modules/rsuite-table/es/utils/defer.js
var import_defer = __toESM(require_defer());
var defer_default = function(callback) {
  (0, import_defer.default)(callback, "deferred");
};

// node_modules/rsuite-table/es/utils/useUpdateEffect.js
var import_react15 = __toESM(require_react());
var useUpdateEffect = function useUpdateEffect2(effect, deps) {
  var isMounting = (0, import_react15.useRef)(true);
  (0, import_react15.useEffect)(function() {
    if (isMounting.current) {
      isMounting.current = false;
      return;
    }
    effect();
  }, deps);
};
var useUpdateEffect_default = useUpdateEffect;

// node_modules/rsuite-table/es/utils/useUpdateLayoutEffect.js
var import_react17 = __toESM(require_react());

// node_modules/rsuite-table/es/utils/useIsomorphicLayoutEffect.js
var import_react16 = __toESM(require_react());
var useIsomorphicLayoutEffect = canUseDOM_default ? import_react16.useLayoutEffect : import_react16.useEffect;
var useIsomorphicLayoutEffect_default = useIsomorphicLayoutEffect;

// node_modules/rsuite-table/es/utils/useUpdateLayoutEffect.js
var useUpdateLayoutEffect = function useUpdateLayoutEffect2(effect, deps) {
  var isMounting = (0, import_react17.useRef)(true);
  useIsomorphicLayoutEffect_default(function() {
    if (isMounting.current) {
      isMounting.current = false;
      return;
    }
    effect();
  }, deps);
};
var useUpdateLayoutEffect_default = useUpdateLayoutEffect;

// node_modules/rsuite-table/es/utils/useMount.js
var useMount = function useMount2(effect) {
  useIsomorphicLayoutEffect_default(effect, []);
};
var useMount_default = useMount;

// node_modules/rsuite-table/es/utils/useClassNames.js
var import_react18 = __toESM(require_react());
var import_classnames3 = __toESM(require_classnames());
function useClassNames(str, controlled) {
  var _ref = (0, import_react18.useContext)(TableContext_default) || {}, _ref$classPrefix = _ref.classPrefix, contextClassPrefix = _ref$classPrefix === void 0 ? "rs" : _ref$classPrefix;
  var componentName = controlled ? str : prefix(contextClassPrefix, str);
  var prefix2 = (0, import_react18.useCallback)(function() {
    var mergeClasses = arguments.length ? import_classnames3.default.apply(void 0, arguments).split(" ").map(function(item) {
      return prefix(componentName, item);
    }) : [];
    return mergeClasses.filter(function(cls) {
      return cls;
    }).join(" ");
  }, [componentName]);
  var withClassPrefix = (0, import_react18.useCallback)(function() {
    for (var _len = arguments.length, classes = new Array(_len), _key = 0; _key < _len; _key++) {
      classes[_key] = arguments[_key];
    }
    var mergeClasses = prefix2(classes);
    return mergeClasses ? componentName + " " + mergeClasses : componentName;
  }, [componentName, prefix2]);
  var rootPrefix = function rootPrefix2() {
    var mergeClasses = arguments.length ? import_classnames3.default.apply(void 0, arguments).split(" ").map(function(item) {
      return prefix(contextClassPrefix, item);
    }) : [];
    return mergeClasses.filter(function(cls) {
      return cls;
    }).join(" ");
  };
  return {
    withClassPrefix,
    merge: import_classnames3.default,
    prefix: prefix2,
    rootPrefix
  };
}
var useClassNames_default = useClassNames;

// node_modules/rsuite-table/es/utils/useControlled.js
var import_react19 = __toESM(require_react());
function useControlled(controlledValue, defaultValue) {
  var controlledRef = (0, import_react19.useRef)(false);
  controlledRef.current = controlledValue !== void 0;
  var _useState = (0, import_react19.useState)(defaultValue), uncontrolledValue = _useState[0], setUncontrolledValue = _useState[1];
  var value = controlledRef.current ? controlledValue : uncontrolledValue;
  var setValue = (0, import_react19.useCallback)(function(nextValue) {
    if (!controlledRef.current) {
      setUncontrolledValue(nextValue);
    }
  }, [controlledRef]);
  return [value, setValue, controlledRef.current];
}
var useControlled_default = useControlled;

// node_modules/rsuite-table/es/utils/getTableColumns.js
var import_react20 = __toESM(require_react());
var ReactIs = __toESM(require_react_is());
var import_flatten = __toESM(require_flatten());
function getTableColumns(children) {
  var childrenArray = Array.isArray(children) ? children : [children];
  var flattenColumns = (0, import_flatten.default)(childrenArray).map(function(column) {
    if ((column === null || column === void 0 ? void 0 : column.type) === ColumnGroup_default) {
      var _column$props = column === null || column === void 0 ? void 0 : column.props, header = _column$props.header, groupChildren = _column$props.children, align = _column$props.align, fixed = _column$props.fixed, verticalAlign = _column$props.verticalAlign, groupHeaderHeight = _column$props.groupHeaderHeight;
      var childColumns = getTableColumns(groupChildren);
      return childColumns.map(function(childColumn, index) {
        var groupCellProps = _extends({}, childColumn === null || childColumn === void 0 ? void 0 : childColumn.props, {
          groupHeaderHeight,
          fixed,
          // Column extends the properties of Group （align，verticalAlign）
          align: (childColumn === null || childColumn === void 0 ? void 0 : childColumn.props.align) || align,
          verticalAlign: (childColumn === null || childColumn === void 0 ? void 0 : childColumn.props.verticalAlign) || verticalAlign
        });
        if (index === 0) {
          groupCellProps.groupAlign = align;
          groupCellProps.groupVerticalAlign = verticalAlign;
          groupCellProps.groupCount = childColumns.length;
          groupCellProps.groupHeader = header;
          groupCellProps.resizable = false;
        }
        return import_react20.default.cloneElement(childColumn, groupCellProps);
      });
    } else if (ReactIs.isFragment(column)) {
      var _column$props2;
      return getTableColumns((_column$props2 = column.props) === null || _column$props2 === void 0 ? void 0 : _column$props2.children);
    } else if (Array.isArray(column)) {
      return getTableColumns(column);
    }
    return column;
  });
  return (0, import_flatten.default)(flattenColumns).filter(Boolean);
}
var getTableColumns_default = getTableColumns;

// node_modules/rsuite-table/es/utils/useCellDescriptor.js
var import_react21 = __toESM(require_react());

// node_modules/dom-lib/esm/utils/hyphenateStyleName.js
var msPattern = /^ms-/;
var hyphenateStyleName_default = function(string) {
  return hyphenate(string).replace(msPattern, "-ms-");
};

// node_modules/dom-lib/esm/removeStyle.js
function _removeStyle(node, key) {
  var _style, _style$removeProperty;
  (_style = node.style) === null || _style === void 0 ? void 0 : (_style$removeProperty = _style.removeProperty) === null || _style$removeProperty === void 0 ? void 0 : _style$removeProperty.call(_style, key);
}
function removeStyle(node, keys) {
  if (typeof keys === "string") {
    _removeStyle(node, keys);
  } else if (Array.isArray(keys)) {
    keys.forEach(function(key) {
      return _removeStyle(node, key);
    });
  }
}

// node_modules/dom-lib/esm/addStyle.js
function addStyle(node, property, value) {
  var css = "";
  var props = property;
  if (typeof property === "string") {
    if (value === void 0) {
      throw new Error("value is undefined");
    }
    (props = {})[property] = value;
  }
  if (typeof props === "object") {
    for (var _key in props) {
      if (Object.prototype.hasOwnProperty.call(props, _key)) {
        if (!props[_key] && props[_key] !== 0) {
          removeStyle(node, hyphenateStyleName_default(_key));
        } else {
          css += hyphenateStyleName_default(_key) + ":" + props[_key] + ";";
        }
      }
    }
  }
  node.style.cssText += ";" + css;
}
var addStyle_default = addStyle;

// node_modules/rsuite-table/es/utils/useCellDescriptor.js
var import_omit2 = __toESM(require_omit());
var import_merge = __toESM(require_merge());

// node_modules/rsuite-table/es/utils/flushSync.js
var import_react_dom = __toESM(require_react_dom());
var majorVersion = parseInt(import_react_dom.default.version);
var flushSync = function flushSync2(callback) {
  if (majorVersion >= 18) {
    var _ReactDOM$flushSync;
    (_ReactDOM$flushSync = import_react_dom.default.flushSync) === null || _ReactDOM$flushSync === void 0 ? void 0 : _ReactDOM$flushSync.call(import_react_dom.default, callback);
    return;
  }
  callback();
};
var flushSync_default = flushSync;

// node_modules/rsuite-table/es/utils/useCellDescriptor.js
var useCellDescriptor = function useCellDescriptor2(props) {
  var children = props.children, rtl = props.rtl, mouseAreaRef = props.mouseAreaRef, tableRef = props.tableRef, minScrollX = props.minScrollX, scrollX = props.scrollX, tableWidth = props.tableWidth, headerHeight = props.headerHeight, showHeader = props.showHeader, sortTypeProp = props.sortType, defaultSortType = props.defaultSortType, sortColumn = props.sortColumn, rowHeight = props.rowHeight, onSortColumn = props.onSortColumn, onHeaderCellResize = props.onHeaderCellResize, prefix2 = props.prefix;
  var _useControlled = useControlled_default(sortTypeProp, defaultSortType), sortType = _useControlled[0], setSortType = _useControlled[1];
  var _useState = (0, import_react21.useState)(), cacheData = _useState[0], setCacheData = _useState[1];
  var clearCache = (0, import_react21.useCallback)(function() {
    setCacheData(null);
  }, []);
  var setColumnResizing = (0, import_react21.useCallback)(function(resizing) {
    if (!tableRef.current) {
      return;
    }
    if (resizing) {
      addClass(tableRef.current, prefix2("column-resizing"));
    } else {
      removeClass(tableRef.current, prefix2("column-resizing"));
    }
  }, [prefix2, tableRef]);
  var initialColumnWidths = (0, import_react21.useRef)({});
  var columnWidths = (0, import_react21.useRef)({});
  useMount_default(function() {
    clearCache();
  });
  useUpdateEffect_default(function() {
    clearCache();
  }, [children, sortColumn, sortType, tableWidth.current, scrollX.current, minScrollX.current]);
  var handleColumnResizeEnd = (0, import_react21.useCallback)(function(columnWidth, _cursorDelta, dataKey, index) {
    columnWidths.current[dataKey + "_" + index + "_width"] = columnWidth;
    setColumnResizing(false);
    if (mouseAreaRef.current) {
      addStyle_default(mouseAreaRef.current, {
        display: "none"
      });
    }
    flushSync_default(function() {
      return clearCache();
    });
    onHeaderCellResize === null || onHeaderCellResize === void 0 ? void 0 : onHeaderCellResize(columnWidth, dataKey);
  }, [clearCache, mouseAreaRef, onHeaderCellResize, setColumnResizing]);
  var handleColumnResizeMove = (0, import_react21.useCallback)(function(width, left2, fixed) {
    var mouseAreaLeft = width + left2;
    var x = mouseAreaLeft;
    var dir = "left";
    if (rtl) {
      mouseAreaLeft += minScrollX.current + SCROLLBAR_WIDTH;
      dir = "right";
    }
    if (!fixed) {
      x = mouseAreaLeft + (rtl ? -scrollX.current : scrollX.current);
    }
    if (mouseAreaRef.current) {
      var _addStyle;
      addStyle_default(mouseAreaRef.current, (_addStyle = {
        display: "block"
      }, _addStyle[dir] = x + "px", _addStyle));
    }
  }, [minScrollX, mouseAreaRef, rtl, scrollX]);
  var handleColumnResizeStart = (0, import_react21.useCallback)(function(width, left2, fixed) {
    setColumnResizing(true);
    handleColumnResizeMove(width, left2, fixed);
  }, [handleColumnResizeMove, setColumnResizing]);
  var handleSortColumn = (0, import_react21.useCallback)(function(dataKey) {
    var nextSortType = sortType;
    if (sortColumn === dataKey) {
      nextSortType = sortType === SORT_TYPE.ASC ? SORT_TYPE.DESC : SORT_TYPE.ASC;
      setSortType(nextSortType);
    }
    onSortColumn === null || onSortColumn === void 0 ? void 0 : onSortColumn(dataKey, nextSortType);
  }, [onSortColumn, setSortType, sortColumn, sortType]);
  if (cacheData) {
    return cacheData;
  }
  var hasCustomTreeCol = false;
  var left = 0;
  var headerCells = [];
  var bodyCells = [];
  if (!children) {
    var _cacheCell = {
      columns: [],
      headerCells,
      bodyCells,
      hasCustomTreeCol,
      allColumnsWidth: left
    };
    setCacheData(_cacheCell);
    return _cacheCell;
  }
  var columns = getTableColumns_default(children);
  var count = columns.length;
  var _getTotalByColumns = getTotalByColumns_default(columns), totalFlexGrow = _getTotalByColumns.totalFlexGrow, totalWidth = _getTotalByColumns.totalWidth;
  import_react21.default.Children.forEach(columns, function(column, index) {
    if (import_react21.default.isValidElement(column)) {
      var _initialColumnWidths$, _columnWidths$current;
      var columnChildren = column.props.children;
      var columnProps = getColumnProps(column);
      var width = columnProps.width, resizable = columnProps.resizable, flexGrow = columnProps.flexGrow, minWidth = columnProps.minWidth, onResize = columnProps.onResize, treeCol = columnProps.treeCol;
      if (treeCol) {
        hasCustomTreeCol = true;
      }
      if (columnChildren.length !== 2) {
        throw new Error("Component <HeaderCell> and <Cell> is required, column index: " + index + " ");
      }
      var headerCell = columnChildren[0];
      var cell = columnChildren[1];
      var cellWidthId = cell.props.dataKey + "_" + index + "_width";
      var initialColumnWidth = (_initialColumnWidths$ = initialColumnWidths.current) === null || _initialColumnWidths$ === void 0 ? void 0 : _initialColumnWidths$[cellWidthId];
      var currentWidth = (_columnWidths$current = columnWidths.current) === null || _columnWidths$current === void 0 ? void 0 : _columnWidths$current[cellWidthId];
      var cellWidth = currentWidth || width || 0;
      var isControlled = typeof width === "number" && typeof onResize === "function";
      if (resizable && (initialColumnWidth || width) && initialColumnWidth !== width) {
        initialColumnWidths.current[cellWidthId] = width;
        if (currentWidth) {
          columnWidths.current[cellWidthId] = width;
          cellWidth = width;
        }
      }
      if (tableWidth.current && flexGrow && totalFlexGrow) {
        var grewWidth = Math.max((tableWidth.current - totalWidth) / totalFlexGrow * flexGrow, minWidth || 60);
        cellWidth = resizable ? currentWidth || grewWidth : grewWidth;
      }
      var cellProps = _extends({}, (0, import_omit2.default)(columnProps, ["children"]), {
        "aria-colindex": index + 1,
        left,
        headerHeight,
        key: index,
        width: isControlled ? width : cellWidth,
        height: typeof rowHeight === "function" ? rowHeight() : rowHeight,
        firstColumn: index === 0,
        lastColumn: index === count - 1
      });
      if (showHeader && headerHeight) {
        var headerCellProps = {
          // Resizable column
          // `index` is used to define the serial number when dragging the column width
          index,
          dataKey: cell.props.dataKey,
          isHeaderCell: true,
          minWidth: columnProps.minWidth,
          sortable: columnProps.sortable,
          onSortColumn: handleSortColumn,
          sortType,
          sortColumn,
          flexGrow: resizable ? void 0 : flexGrow
        };
        if (resizable) {
          (0, import_merge.default)(headerCellProps, {
            onResize,
            onColumnResizeEnd: handleColumnResizeEnd,
            onColumnResizeStart: handleColumnResizeStart,
            onColumnResizeMove: handleColumnResizeMove
          });
        }
        headerCells.push(import_react21.default.cloneElement(headerCell, _extends({}, cellProps, headerCellProps)));
      }
      bodyCells.push(import_react21.default.cloneElement(cell, cellProps));
      left += cellWidth;
    }
  });
  var cacheCell = {
    columns,
    headerCells,
    bodyCells,
    allColumnsWidth: left,
    hasCustomTreeCol
  };
  setCacheData(cacheCell);
  return cacheCell;
};
var useCellDescriptor_default = useCellDescriptor;

// node_modules/rsuite-table/es/utils/useTableDimension.js
var import_react23 = __toESM(require_react());

// node_modules/dom-lib/esm/getWindow.js
function getWindow(node) {
  if (node === (node === null || node === void 0 ? void 0 : node.window)) {
    return node;
  }
  return (node === null || node === void 0 ? void 0 : node.nodeType) === 9 ? (node === null || node === void 0 ? void 0 : node.defaultView) || (node === null || node === void 0 ? void 0 : node.parentWindow) : null;
}

// node_modules/dom-lib/esm/ownerDocument.js
function ownerDocument(node) {
  return node && node.ownerDocument || document;
}

// node_modules/dom-lib/esm/contains.js
var fallback = function fallback2(context, node) {
  if (!node) return false;
  do {
    if (node === context) {
      return true;
    }
  } while (node.parentNode && (node = node.parentNode));
  return false;
};
var contains = function contains2(context, node) {
  if (!node) return false;
  if (context.contains) {
    return context.contains(node);
  } else if (context.compareDocumentPosition) {
    return context === node || !!(context.compareDocumentPosition(node) & 16);
  }
  return fallback(context, node);
};
var contains_default = /* @__PURE__ */ function() {
  return canUseDOM_default ? contains : fallback;
}();

// node_modules/dom-lib/esm/getOffset.js
function getOffset(node) {
  var doc = ownerDocument(node);
  var win = getWindow(doc);
  var docElem = doc && doc.documentElement;
  var box = {
    top: 0,
    left: 0,
    height: 0,
    width: 0
  };
  if (!doc) {
    return null;
  }
  if (!contains_default(docElem, node)) {
    return box;
  }
  if ((node === null || node === void 0 ? void 0 : node.getBoundingClientRect) !== void 0) {
    box = node.getBoundingClientRect();
  }
  if ((box.width || box.height) && docElem && win) {
    box = {
      top: box.top + (win.pageYOffset || docElem.scrollTop) - (docElem.clientTop || 0),
      left: box.left + (win.pageXOffset || docElem.scrollLeft) - (docElem.clientLeft || 0),
      width: (box.width === null ? node.offsetWidth : box.width) || 0,
      height: (box.height === null ? node.offsetHeight : box.height) || 0
    };
  }
  return box;
}

// node_modules/dom-lib/esm/getWidth.js
function getWidth(node, client) {
  var win = getWindow(node);
  if (win) {
    return win.innerWidth;
  }
  if (client) {
    return node.clientWidth;
  }
  var offset = getOffset(node);
  return offset ? offset.width : 0;
}

// node_modules/dom-lib/esm/getHeight.js
function getHeight(node, client) {
  var win = getWindow(node);
  if (win) {
    return win.innerHeight;
  }
  return client ? node.clientHeight : getOffset(node).height;
}

// node_modules/@juggle/resize-observer/lib/utils/resizeObservers.js
var resizeObservers = [];

// node_modules/@juggle/resize-observer/lib/algorithms/hasActiveObservations.js
var hasActiveObservations = function() {
  return resizeObservers.some(function(ro) {
    return ro.activeTargets.length > 0;
  });
};

// node_modules/@juggle/resize-observer/lib/algorithms/hasSkippedObservations.js
var hasSkippedObservations = function() {
  return resizeObservers.some(function(ro) {
    return ro.skippedTargets.length > 0;
  });
};

// node_modules/@juggle/resize-observer/lib/algorithms/deliverResizeLoopError.js
var msg = "ResizeObserver loop completed with undelivered notifications.";
var deliverResizeLoopError = function() {
  var event;
  if (typeof ErrorEvent === "function") {
    event = new ErrorEvent("error", {
      message: msg
    });
  } else {
    event = document.createEvent("Event");
    event.initEvent("error", false, false);
    event.message = msg;
  }
  window.dispatchEvent(event);
};

// node_modules/@juggle/resize-observer/lib/ResizeObserverBoxOptions.js
var ResizeObserverBoxOptions;
(function(ResizeObserverBoxOptions2) {
  ResizeObserverBoxOptions2["BORDER_BOX"] = "border-box";
  ResizeObserverBoxOptions2["CONTENT_BOX"] = "content-box";
  ResizeObserverBoxOptions2["DEVICE_PIXEL_CONTENT_BOX"] = "device-pixel-content-box";
})(ResizeObserverBoxOptions || (ResizeObserverBoxOptions = {}));

// node_modules/@juggle/resize-observer/lib/utils/freeze.js
var freeze = function(obj) {
  return Object.freeze(obj);
};

// node_modules/@juggle/resize-observer/lib/ResizeObserverSize.js
var ResizeObserverSize = /* @__PURE__ */ function() {
  function ResizeObserverSize2(inlineSize, blockSize) {
    this.inlineSize = inlineSize;
    this.blockSize = blockSize;
    freeze(this);
  }
  return ResizeObserverSize2;
}();

// node_modules/@juggle/resize-observer/lib/DOMRectReadOnly.js
var DOMRectReadOnly = function() {
  function DOMRectReadOnly2(x, y, width, height) {
    this.x = x;
    this.y = y;
    this.width = width;
    this.height = height;
    this.top = this.y;
    this.left = this.x;
    this.bottom = this.top + this.height;
    this.right = this.left + this.width;
    return freeze(this);
  }
  DOMRectReadOnly2.prototype.toJSON = function() {
    var _a = this, x = _a.x, y = _a.y, top = _a.top, right = _a.right, bottom = _a.bottom, left = _a.left, width = _a.width, height = _a.height;
    return { x, y, top, right, bottom, left, width, height };
  };
  DOMRectReadOnly2.fromRect = function(rectangle) {
    return new DOMRectReadOnly2(rectangle.x, rectangle.y, rectangle.width, rectangle.height);
  };
  return DOMRectReadOnly2;
}();

// node_modules/@juggle/resize-observer/lib/utils/element.js
var isSVG = function(target) {
  return target instanceof SVGElement && "getBBox" in target;
};
var isHidden = function(target) {
  if (isSVG(target)) {
    var _a = target.getBBox(), width = _a.width, height = _a.height;
    return !width && !height;
  }
  var _b = target, offsetWidth = _b.offsetWidth, offsetHeight = _b.offsetHeight;
  return !(offsetWidth || offsetHeight || target.getClientRects().length);
};
var isElement = function(obj) {
  var _a;
  if (obj instanceof Element) {
    return true;
  }
  var scope = (_a = obj === null || obj === void 0 ? void 0 : obj.ownerDocument) === null || _a === void 0 ? void 0 : _a.defaultView;
  return !!(scope && obj instanceof scope.Element);
};
var isReplacedElement = function(target) {
  switch (target.tagName) {
    case "INPUT":
      if (target.type !== "image") {
        break;
      }
    case "VIDEO":
    case "AUDIO":
    case "EMBED":
    case "OBJECT":
    case "CANVAS":
    case "IFRAME":
    case "IMG":
      return true;
  }
  return false;
};

// node_modules/@juggle/resize-observer/lib/utils/global.js
var global2 = typeof window !== "undefined" ? window : {};

// node_modules/@juggle/resize-observer/lib/algorithms/calculateBoxSize.js
var cache = /* @__PURE__ */ new WeakMap();
var scrollRegexp = /auto|scroll/;
var verticalRegexp = /^tb|vertical/;
var IE = /msie|trident/i.test(global2.navigator && global2.navigator.userAgent);
var parseDimension = function(pixel) {
  return parseFloat(pixel || "0");
};
var size = function(inlineSize, blockSize, switchSizes) {
  if (inlineSize === void 0) {
    inlineSize = 0;
  }
  if (blockSize === void 0) {
    blockSize = 0;
  }
  if (switchSizes === void 0) {
    switchSizes = false;
  }
  return new ResizeObserverSize((switchSizes ? blockSize : inlineSize) || 0, (switchSizes ? inlineSize : blockSize) || 0);
};
var zeroBoxes = freeze({
  devicePixelContentBoxSize: size(),
  borderBoxSize: size(),
  contentBoxSize: size(),
  contentRect: new DOMRectReadOnly(0, 0, 0, 0)
});
var calculateBoxSizes = function(target, forceRecalculation) {
  if (forceRecalculation === void 0) {
    forceRecalculation = false;
  }
  if (cache.has(target) && !forceRecalculation) {
    return cache.get(target);
  }
  if (isHidden(target)) {
    cache.set(target, zeroBoxes);
    return zeroBoxes;
  }
  var cs = getComputedStyle(target);
  var svg = isSVG(target) && target.ownerSVGElement && target.getBBox();
  var removePadding = !IE && cs.boxSizing === "border-box";
  var switchSizes = verticalRegexp.test(cs.writingMode || "");
  var canScrollVertically = !svg && scrollRegexp.test(cs.overflowY || "");
  var canScrollHorizontally = !svg && scrollRegexp.test(cs.overflowX || "");
  var paddingTop = svg ? 0 : parseDimension(cs.paddingTop);
  var paddingRight = svg ? 0 : parseDimension(cs.paddingRight);
  var paddingBottom = svg ? 0 : parseDimension(cs.paddingBottom);
  var paddingLeft = svg ? 0 : parseDimension(cs.paddingLeft);
  var borderTop = svg ? 0 : parseDimension(cs.borderTopWidth);
  var borderRight = svg ? 0 : parseDimension(cs.borderRightWidth);
  var borderBottom = svg ? 0 : parseDimension(cs.borderBottomWidth);
  var borderLeft = svg ? 0 : parseDimension(cs.borderLeftWidth);
  var horizontalPadding = paddingLeft + paddingRight;
  var verticalPadding = paddingTop + paddingBottom;
  var horizontalBorderArea = borderLeft + borderRight;
  var verticalBorderArea = borderTop + borderBottom;
  var horizontalScrollbarThickness = !canScrollHorizontally ? 0 : target.offsetHeight - verticalBorderArea - target.clientHeight;
  var verticalScrollbarThickness = !canScrollVertically ? 0 : target.offsetWidth - horizontalBorderArea - target.clientWidth;
  var widthReduction = removePadding ? horizontalPadding + horizontalBorderArea : 0;
  var heightReduction = removePadding ? verticalPadding + verticalBorderArea : 0;
  var contentWidth = svg ? svg.width : parseDimension(cs.width) - widthReduction - verticalScrollbarThickness;
  var contentHeight = svg ? svg.height : parseDimension(cs.height) - heightReduction - horizontalScrollbarThickness;
  var borderBoxWidth = contentWidth + horizontalPadding + verticalScrollbarThickness + horizontalBorderArea;
  var borderBoxHeight = contentHeight + verticalPadding + horizontalScrollbarThickness + verticalBorderArea;
  var boxes = freeze({
    devicePixelContentBoxSize: size(Math.round(contentWidth * devicePixelRatio), Math.round(contentHeight * devicePixelRatio), switchSizes),
    borderBoxSize: size(borderBoxWidth, borderBoxHeight, switchSizes),
    contentBoxSize: size(contentWidth, contentHeight, switchSizes),
    contentRect: new DOMRectReadOnly(paddingLeft, paddingTop, contentWidth, contentHeight)
  });
  cache.set(target, boxes);
  return boxes;
};
var calculateBoxSize = function(target, observedBox, forceRecalculation) {
  var _a = calculateBoxSizes(target, forceRecalculation), borderBoxSize = _a.borderBoxSize, contentBoxSize = _a.contentBoxSize, devicePixelContentBoxSize = _a.devicePixelContentBoxSize;
  switch (observedBox) {
    case ResizeObserverBoxOptions.DEVICE_PIXEL_CONTENT_BOX:
      return devicePixelContentBoxSize;
    case ResizeObserverBoxOptions.BORDER_BOX:
      return borderBoxSize;
    default:
      return contentBoxSize;
  }
};

// node_modules/@juggle/resize-observer/lib/ResizeObserverEntry.js
var ResizeObserverEntry = /* @__PURE__ */ function() {
  function ResizeObserverEntry2(target) {
    var boxes = calculateBoxSizes(target);
    this.target = target;
    this.contentRect = boxes.contentRect;
    this.borderBoxSize = freeze([boxes.borderBoxSize]);
    this.contentBoxSize = freeze([boxes.contentBoxSize]);
    this.devicePixelContentBoxSize = freeze([boxes.devicePixelContentBoxSize]);
  }
  return ResizeObserverEntry2;
}();

// node_modules/@juggle/resize-observer/lib/algorithms/calculateDepthForNode.js
var calculateDepthForNode = function(node) {
  if (isHidden(node)) {
    return Infinity;
  }
  var depth = 0;
  var parent = node.parentNode;
  while (parent) {
    depth += 1;
    parent = parent.parentNode;
  }
  return depth;
};

// node_modules/@juggle/resize-observer/lib/algorithms/broadcastActiveObservations.js
var broadcastActiveObservations = function() {
  var shallowestDepth = Infinity;
  var callbacks2 = [];
  resizeObservers.forEach(function processObserver(ro) {
    if (ro.activeTargets.length === 0) {
      return;
    }
    var entries = [];
    ro.activeTargets.forEach(function processTarget(ot) {
      var entry = new ResizeObserverEntry(ot.target);
      var targetDepth = calculateDepthForNode(ot.target);
      entries.push(entry);
      ot.lastReportedSize = calculateBoxSize(ot.target, ot.observedBox);
      if (targetDepth < shallowestDepth) {
        shallowestDepth = targetDepth;
      }
    });
    callbacks2.push(function resizeObserverCallback() {
      ro.callback.call(ro.observer, entries, ro.observer);
    });
    ro.activeTargets.splice(0, ro.activeTargets.length);
  });
  for (var _i = 0, callbacks_1 = callbacks2; _i < callbacks_1.length; _i++) {
    var callback = callbacks_1[_i];
    callback();
  }
  return shallowestDepth;
};

// node_modules/@juggle/resize-observer/lib/algorithms/gatherActiveObservationsAtDepth.js
var gatherActiveObservationsAtDepth = function(depth) {
  resizeObservers.forEach(function processObserver(ro) {
    ro.activeTargets.splice(0, ro.activeTargets.length);
    ro.skippedTargets.splice(0, ro.skippedTargets.length);
    ro.observationTargets.forEach(function processTarget(ot) {
      if (ot.isActive()) {
        if (calculateDepthForNode(ot.target) > depth) {
          ro.activeTargets.push(ot);
        } else {
          ro.skippedTargets.push(ot);
        }
      }
    });
  });
};

// node_modules/@juggle/resize-observer/lib/utils/process.js
var process2 = function() {
  var depth = 0;
  gatherActiveObservationsAtDepth(depth);
  while (hasActiveObservations()) {
    depth = broadcastActiveObservations();
    gatherActiveObservationsAtDepth(depth);
  }
  if (hasSkippedObservations()) {
    deliverResizeLoopError();
  }
  return depth > 0;
};

// node_modules/@juggle/resize-observer/lib/utils/queueMicroTask.js
var trigger;
var callbacks = [];
var notify = function() {
  return callbacks.splice(0).forEach(function(cb) {
    return cb();
  });
};
var queueMicroTask = function(callback) {
  if (!trigger) {
    var toggle_1 = 0;
    var el_1 = document.createTextNode("");
    var config = { characterData: true };
    new MutationObserver(function() {
      return notify();
    }).observe(el_1, config);
    trigger = function() {
      el_1.textContent = "".concat(toggle_1 ? toggle_1-- : toggle_1++);
    };
  }
  callbacks.push(callback);
  trigger();
};

// node_modules/@juggle/resize-observer/lib/utils/queueResizeObserver.js
var queueResizeObserver = function(cb) {
  queueMicroTask(function ResizeObserver2() {
    requestAnimationFrame(cb);
  });
};

// node_modules/@juggle/resize-observer/lib/utils/scheduler.js
var watching = 0;
var isWatching = function() {
  return !!watching;
};
var CATCH_PERIOD = 250;
var observerConfig = { attributes: true, characterData: true, childList: true, subtree: true };
var events = [
  "resize",
  "load",
  "transitionend",
  "animationend",
  "animationstart",
  "animationiteration",
  "keyup",
  "keydown",
  "mouseup",
  "mousedown",
  "mouseover",
  "mouseout",
  "blur",
  "focus"
];
var time = function(timeout) {
  if (timeout === void 0) {
    timeout = 0;
  }
  return Date.now() + timeout;
};
var scheduled = false;
var Scheduler = function() {
  function Scheduler2() {
    var _this2 = this;
    this.stopped = true;
    this.listener = function() {
      return _this2.schedule();
    };
  }
  Scheduler2.prototype.run = function(timeout) {
    var _this2 = this;
    if (timeout === void 0) {
      timeout = CATCH_PERIOD;
    }
    if (scheduled) {
      return;
    }
    scheduled = true;
    var until = time(timeout);
    queueResizeObserver(function() {
      var elementsHaveResized = false;
      try {
        elementsHaveResized = process2();
      } finally {
        scheduled = false;
        timeout = until - time();
        if (!isWatching()) {
          return;
        }
        if (elementsHaveResized) {
          _this2.run(1e3);
        } else if (timeout > 0) {
          _this2.run(timeout);
        } else {
          _this2.start();
        }
      }
    });
  };
  Scheduler2.prototype.schedule = function() {
    this.stop();
    this.run();
  };
  Scheduler2.prototype.observe = function() {
    var _this2 = this;
    var cb = function() {
      return _this2.observer && _this2.observer.observe(document.body, observerConfig);
    };
    document.body ? cb() : global2.addEventListener("DOMContentLoaded", cb);
  };
  Scheduler2.prototype.start = function() {
    var _this2 = this;
    if (this.stopped) {
      this.stopped = false;
      this.observer = new MutationObserver(this.listener);
      this.observe();
      events.forEach(function(name) {
        return global2.addEventListener(name, _this2.listener, true);
      });
    }
  };
  Scheduler2.prototype.stop = function() {
    var _this2 = this;
    if (!this.stopped) {
      this.observer && this.observer.disconnect();
      events.forEach(function(name) {
        return global2.removeEventListener(name, _this2.listener, true);
      });
      this.stopped = true;
    }
  };
  return Scheduler2;
}();
var scheduler = new Scheduler();
var updateCount = function(n) {
  !watching && n > 0 && scheduler.start();
  watching += n;
  !watching && scheduler.stop();
};

// node_modules/@juggle/resize-observer/lib/ResizeObservation.js
var skipNotifyOnElement = function(target) {
  return !isSVG(target) && !isReplacedElement(target) && getComputedStyle(target).display === "inline";
};
var ResizeObservation = function() {
  function ResizeObservation2(target, observedBox) {
    this.target = target;
    this.observedBox = observedBox || ResizeObserverBoxOptions.CONTENT_BOX;
    this.lastReportedSize = {
      inlineSize: 0,
      blockSize: 0
    };
  }
  ResizeObservation2.prototype.isActive = function() {
    var size2 = calculateBoxSize(this.target, this.observedBox, true);
    if (skipNotifyOnElement(this.target)) {
      this.lastReportedSize = size2;
    }
    if (this.lastReportedSize.inlineSize !== size2.inlineSize || this.lastReportedSize.blockSize !== size2.blockSize) {
      return true;
    }
    return false;
  };
  return ResizeObservation2;
}();

// node_modules/@juggle/resize-observer/lib/ResizeObserverDetail.js
var ResizeObserverDetail = /* @__PURE__ */ function() {
  function ResizeObserverDetail2(resizeObserver, callback) {
    this.activeTargets = [];
    this.skippedTargets = [];
    this.observationTargets = [];
    this.observer = resizeObserver;
    this.callback = callback;
  }
  return ResizeObserverDetail2;
}();

// node_modules/@juggle/resize-observer/lib/ResizeObserverController.js
var observerMap = /* @__PURE__ */ new WeakMap();
var getObservationIndex = function(observationTargets, target) {
  for (var i = 0; i < observationTargets.length; i += 1) {
    if (observationTargets[i].target === target) {
      return i;
    }
  }
  return -1;
};
var ResizeObserverController = function() {
  function ResizeObserverController2() {
  }
  ResizeObserverController2.connect = function(resizeObserver, callback) {
    var detail = new ResizeObserverDetail(resizeObserver, callback);
    observerMap.set(resizeObserver, detail);
  };
  ResizeObserverController2.observe = function(resizeObserver, target, options) {
    var detail = observerMap.get(resizeObserver);
    var firstObservation = detail.observationTargets.length === 0;
    if (getObservationIndex(detail.observationTargets, target) < 0) {
      firstObservation && resizeObservers.push(detail);
      detail.observationTargets.push(new ResizeObservation(target, options && options.box));
      updateCount(1);
      scheduler.schedule();
    }
  };
  ResizeObserverController2.unobserve = function(resizeObserver, target) {
    var detail = observerMap.get(resizeObserver);
    var index = getObservationIndex(detail.observationTargets, target);
    var lastObservation = detail.observationTargets.length === 1;
    if (index >= 0) {
      lastObservation && resizeObservers.splice(resizeObservers.indexOf(detail), 1);
      detail.observationTargets.splice(index, 1);
      updateCount(-1);
    }
  };
  ResizeObserverController2.disconnect = function(resizeObserver) {
    var _this2 = this;
    var detail = observerMap.get(resizeObserver);
    detail.observationTargets.slice().forEach(function(ot) {
      return _this2.unobserve(resizeObserver, ot.target);
    });
    detail.activeTargets.splice(0, detail.activeTargets.length);
  };
  return ResizeObserverController2;
}();

// node_modules/@juggle/resize-observer/lib/ResizeObserver.js
var ResizeObserver = function() {
  function ResizeObserver2(callback) {
    if (arguments.length === 0) {
      throw new TypeError("Failed to construct 'ResizeObserver': 1 argument required, but only 0 present.");
    }
    if (typeof callback !== "function") {
      throw new TypeError("Failed to construct 'ResizeObserver': The callback provided as parameter 1 is not a function.");
    }
    ResizeObserverController.connect(this, callback);
  }
  ResizeObserver2.prototype.observe = function(target, options) {
    if (arguments.length === 0) {
      throw new TypeError("Failed to execute 'observe' on 'ResizeObserver': 1 argument required, but only 0 present.");
    }
    if (!isElement(target)) {
      throw new TypeError("Failed to execute 'observe' on 'ResizeObserver': parameter 1 is not of type 'Element");
    }
    ResizeObserverController.observe(this, target, options);
  };
  ResizeObserver2.prototype.unobserve = function(target) {
    if (arguments.length === 0) {
      throw new TypeError("Failed to execute 'unobserve' on 'ResizeObserver': 1 argument required, but only 0 present.");
    }
    if (!isElement(target)) {
      throw new TypeError("Failed to execute 'unobserve' on 'ResizeObserver': parameter 1 is not of type 'Element");
    }
    ResizeObserverController.unobserve(this, target);
  };
  ResizeObserver2.prototype.disconnect = function() {
    ResizeObserverController.disconnect(this);
  };
  ResizeObserver2.toString = function() {
    return "function ResizeObserver () { [polyfill code] }";
  };
  return ResizeObserver2;
}();

// node_modules/rsuite-table/es/utils/useIntersectionObserver.js
var import_react22 = __toESM(require_react());
var useIntersectionObserver = function useIntersectionObserver2(ref) {
  var _useState = (0, import_react22.useState)(false), isVisible = _useState[0], setIsVisible = _useState[1];
  (0, import_react22.useEffect)(function() {
    if (!("IntersectionObserver" in window)) {
      setIsVisible(true);
      return;
    }
    var observer = new IntersectionObserver(function(entries) {
      entries.forEach(function(entry) {
        setIsVisible(entry.isIntersecting);
      });
    });
    var element = ref === null || ref === void 0 ? void 0 : ref.current;
    if (element) {
      observer.observe(element);
    }
    return function() {
      if (element) {
        observer.unobserve(element);
      }
    };
  }, [ref]);
  return isVisible;
};
var useIntersectionObserver_default = useIntersectionObserver;

// node_modules/rsuite-table/es/utils/useTableDimension.js
var import_debounce = __toESM(require_debounce());
var useTableDimension = function useTableDimension2(props) {
  var data = props.data, rowHeight = props.rowHeight, tableRef = props.tableRef, headerWrapperRef = props.headerWrapperRef, prefix2 = props.prefix, widthProp = props.width, affixHeader = props.affixHeader, affixHorizontalScrollbar = props.affixHorizontalScrollbar, headerHeight = props.headerHeight, heightProp = props.height, autoHeightProp = props.autoHeight, minHeight = props.minHeight, maxHeight = props.maxHeight, fillHeight = props.fillHeight, children = props.children, expandedRowKeys = props.expandedRowKeys, showHeader = props.showHeader, bordered = props.bordered, onTableResizeChange = props.onTableResizeChange, onTableScroll = props.onTableScroll;
  var contentHeight = (0, import_react23.useRef)(0);
  var contentWidth = (0, import_react23.useRef)(0);
  var minScrollY = (0, import_react23.useRef)(0);
  var scrollY = (0, import_react23.useRef)(0);
  var scrollX = (0, import_react23.useRef)(0);
  var minScrollX = (0, import_react23.useRef)(0);
  var tableWidth = (0, import_react23.useRef)(widthProp || 0);
  var tableHeight = (0, import_react23.useRef)(heightProp || 0);
  var columnCount = (0, import_react23.useRef)(0);
  var resizeObserver = (0, import_react23.useRef)();
  var containerResizeObserver = (0, import_react23.useRef)();
  var headerOffset = (0, import_react23.useRef)(null);
  var tableOffset = (0, import_react23.useRef)(null);
  var autoHeight = (0, import_react23.useMemo)(function() {
    return autoHeightProp && !maxHeight;
  }, [autoHeightProp, maxHeight]);
  var getRowHeight = (0, import_react23.useCallback)(function(rowData) {
    return typeof rowHeight === "function" ? rowHeight(rowData) : rowHeight;
  }, [rowHeight]);
  var calculateTableContextHeight = (0, import_react23.useCallback)(function() {
    var _table$querySelectorA;
    var prevContentHeight = contentHeight.current;
    var table = tableRef === null || tableRef === void 0 ? void 0 : tableRef.current;
    var rows = (table === null || table === void 0 ? void 0 : table.querySelectorAll("." + (prefix2 === null || prefix2 === void 0 ? void 0 : prefix2("row")))) || [];
    var virtualized = (table === null || table === void 0 ? void 0 : (_table$querySelectorA = table.querySelectorAll(".virtualized")) === null || _table$querySelectorA === void 0 ? void 0 : _table$querySelectorA.length) > 0;
    var nextContentHeight = rows.length ? Array.from(rows).map(function(row, index) {
      return getHeight(row) || getRowHeight(data === null || data === void 0 ? void 0 : data[index]);
    }).reduce(function(x, y) {
      return x + y;
    }) : 0;
    contentHeight.current = Math.round(nextContentHeight - (affixHeader ? headerHeight * 2 : headerHeight));
    var hasHorizontalScrollbar = contentWidth.current > tableWidth.current;
    if (autoHeight && hasHorizontalScrollbar) {
      contentHeight.current += SCROLLBAR_WIDTH;
    }
    var height = fillHeight ? tableHeight.current : Math.max(heightProp, maxHeight || 0);
    var tableBodyHeight = showHeader ? height - headerHeight : height;
    if (!autoHeight) {
      minScrollY.current = -(nextContentHeight - height) - (hasHorizontalScrollbar ? SCROLLBAR_WIDTH : 0);
    }
    if (nextContentHeight < height) {
      onTableScroll === null || onTableScroll === void 0 ? void 0 : onTableScroll({
        y: 0
      });
    }
    var currentScrollTop = Math.abs(scrollY.current);
    var maxScrollTop = nextContentHeight + SCROLLBAR_WIDTH - tableBodyHeight;
    if (maxScrollTop > 0 && currentScrollTop > maxScrollTop) {
      if (virtualized) {
        onTableScroll === null || onTableScroll === void 0 ? void 0 : onTableScroll({
          y: ((data === null || data === void 0 ? void 0 : data.length) || 0) * getRowHeight() - tableBodyHeight
        });
      } else {
        onTableScroll === null || onTableScroll === void 0 ? void 0 : onTableScroll({
          y: maxScrollTop
        });
      }
    }
    if (prevContentHeight !== contentHeight.current) {
      onTableResizeChange === null || onTableResizeChange === void 0 ? void 0 : onTableResizeChange(prevContentHeight, "bodyHeightChanged");
    }
  }, [tableRef, prefix2, affixHeader, headerHeight, autoHeight, maxHeight, fillHeight, heightProp, showHeader, getRowHeight, data, onTableScroll, onTableResizeChange]);
  var setOffsetByAffix = (0, import_react23.useCallback)(function() {
    var headerNode = headerWrapperRef === null || headerWrapperRef === void 0 ? void 0 : headerWrapperRef.current;
    if (isNumberOrTrue(affixHeader) && headerNode) {
      headerOffset.current = getOffset(headerNode);
    }
    if (isNumberOrTrue(affixHorizontalScrollbar) && tableRef !== null && tableRef !== void 0 && tableRef.current) {
      tableOffset.current = getOffset(tableRef === null || tableRef === void 0 ? void 0 : tableRef.current);
    }
  }, [affixHeader, affixHorizontalScrollbar, headerWrapperRef, tableRef]);
  var calculateTableContentWidth = (0, import_react23.useCallback)(function() {
    var prevWidth = contentWidth.current;
    var prevColumnCount = columnCount.current;
    var table = tableRef === null || tableRef === void 0 ? void 0 : tableRef.current;
    var row = table === null || table === void 0 ? void 0 : table.querySelector("." + prefix2("row") + ":not(.virtualized)");
    var nextContentWidth = row ? getWidth(row) : 0;
    var hasHorizontalScrollbar = contentWidth.current > tableWidth.current;
    var scrollbarWidth = hasHorizontalScrollbar ? 0 : SCROLLBAR_WIDTH;
    contentWidth.current = nextContentWidth - (autoHeight ? scrollbarWidth : 0);
    columnCount.current = (row === null || row === void 0 ? void 0 : row.querySelectorAll("." + prefix2("cell")).length) || 0;
    var minScrollWidth = -(nextContentWidth - tableWidth.current) - (autoHeight ? 0 : scrollbarWidth);
    if (minScrollX.current !== minScrollWidth) {
      minScrollX.current = minScrollWidth;
      if (scrollX.current < minScrollWidth) {
        scrollX.current = minScrollWidth;
      }
    }
    if (prevWidth > 0 && prevWidth !== contentWidth.current || prevColumnCount > 0 && prevColumnCount !== columnCount.current) {
      onTableResizeChange === null || onTableResizeChange === void 0 ? void 0 : onTableResizeChange(prevWidth, "bodyWidthChanged");
    }
  }, [autoHeight, onTableResizeChange, prefix2, tableRef]);
  var calculateTableWidth = (0, import_react23.useCallback)(function(nextWidth) {
    var prevWidth = tableWidth.current;
    if (tableRef !== null && tableRef !== void 0 && tableRef.current) {
      tableWidth.current = nextWidth || getWidth(tableRef === null || tableRef === void 0 ? void 0 : tableRef.current);
    }
    if (prevWidth && prevWidth !== tableWidth.current) {
      scrollX.current = 0;
      onTableResizeChange === null || onTableResizeChange === void 0 ? void 0 : onTableResizeChange(prevWidth, "widthChanged");
    }
    setOffsetByAffix();
  }, [onTableResizeChange, setOffsetByAffix, tableRef]);
  var calculateTableHeight = (0, import_react23.useCallback)(function(nextHeight) {
    var prevHeight = tableHeight.current;
    if (nextHeight) {
      tableHeight.current = nextHeight;
    } else if (tableRef !== null && tableRef !== void 0 && tableRef.current) {
      tableHeight.current = getHeight(tableRef.current.parentNode);
    }
    if (prevHeight && prevHeight !== tableHeight.current) {
      onTableResizeChange === null || onTableResizeChange === void 0 ? void 0 : onTableResizeChange(prevHeight, "heightChanged");
    }
  }, [onTableResizeChange, tableRef]);
  useMount_default(function() {
    var _tableRef$current;
    calculateTableContextHeight();
    calculateTableContentWidth();
    calculateTableWidth();
    calculateTableHeight();
    setOffsetByAffix();
    containerResizeObserver.current = new ResizeObserver(function(entries) {
      calculateTableHeight(entries[0].contentRect.height);
    });
    containerResizeObserver.current.observe(tableRef === null || tableRef === void 0 ? void 0 : (_tableRef$current = tableRef.current) === null || _tableRef$current === void 0 ? void 0 : _tableRef$current.parentNode);
    var changeTableWidthWhenResize = (0, import_debounce.default)(function(entries) {
      var width = entries[0].contentRect.width;
      var widthWithBorder = width + 2;
      calculateTableWidth(bordered ? widthWithBorder : width);
    }, 20);
    resizeObserver.current = new ResizeObserver(changeTableWidthWhenResize);
    resizeObserver.current.observe(tableRef === null || tableRef === void 0 ? void 0 : tableRef.current);
    return function() {
      var _resizeObserver$curre, _containerResizeObser;
      (_resizeObserver$curre = resizeObserver.current) === null || _resizeObserver$curre === void 0 ? void 0 : _resizeObserver$curre.disconnect();
      (_containerResizeObser = containerResizeObserver.current) === null || _containerResizeObser === void 0 ? void 0 : _containerResizeObser.disconnect();
    };
  });
  useUpdateLayoutEffect_default(function() {
    calculateTableHeight();
    calculateTableContextHeight();
  }, [fillHeight]);
  useUpdateLayoutEffect_default(function() {
    calculateTableWidth();
    calculateTableContentWidth();
    calculateTableContextHeight();
  }, [data, heightProp, contentHeight.current, expandedRowKeys, children, calculateTableContextHeight, calculateTableContentWidth]);
  var isVisible = useIntersectionObserver_default(tableRef);
  useUpdateLayoutEffect_default(function() {
    if (isVisible) {
      calculateTableWidth();
      calculateTableContentWidth();
    }
  }, [isVisible]);
  var setScrollY = (0, import_react23.useCallback)(function(value) {
    scrollY.current = value;
  }, []);
  var setScrollX = (0, import_react23.useCallback)(function(value) {
    scrollX.current = value;
  }, []);
  var getTableHeight = function getTableHeight2() {
    if (fillHeight) {
      return tableHeight.current;
    }
    if ((data === null || data === void 0 ? void 0 : data.length) === 0 && autoHeight) {
      return heightProp;
    }
    var height = autoHeightProp ? headerHeight + contentHeight.current : heightProp;
    if (maxHeight && height > maxHeight) {
      return maxHeight;
    }
    if (minHeight && height < minHeight) {
      return minHeight;
    }
    return height;
  };
  return {
    contentHeight,
    contentWidth,
    minScrollY,
    minScrollX,
    scrollY,
    scrollX,
    tableWidth,
    headerOffset,
    tableOffset,
    getTableHeight,
    setScrollY,
    setScrollX
  };
};
var useTableDimension_default = useTableDimension;

// node_modules/rsuite-table/es/utils/useTableRows.js
var import_react24 = __toESM(require_react());
var import_isEmpty = __toESM(require_isEmpty());
var useTableRows = function useTableRows2(props) {
  var prefix2 = props.prefix, wordWrap = props.wordWrap, data = props.data, expandedRowKeys = props.expandedRowKeys;
  var _useState = (0, import_react24.useState)([]), tableRowsMaxHeight = _useState[0], setTableRowsMaxHeight = _useState[1];
  var tableRows = (0, import_react24.useRef)({});
  var bindTableRowsRef = function bindTableRowsRef2(index, rowData) {
    return function(ref) {
      if (ref) {
        tableRows.current[index] = [ref, rowData];
      }
    };
  };
  var calculateRowMaxHeight = (0, import_react24.useCallback)(function() {
    if (wordWrap) {
      var nextTableRowsMaxHeight = [];
      var curTableRows = Object.values(tableRows.current);
      for (var i = 0; i < curTableRows.length; i++) {
        var _curTableRows$i = curTableRows[i], row = _curTableRows$i[0];
        if (row) {
          var cells = row.querySelectorAll("." + prefix2("cell-wrap")) || [];
          var cellArray = Array.from(cells);
          var maxHeight = 0;
          for (var j = 0; j < cellArray.length; j++) {
            var cell = cellArray[j];
            var h = getHeight(cell);
            maxHeight = Math.max(maxHeight, h);
          }
          nextTableRowsMaxHeight.push(maxHeight);
        }
      }
      if (!(0, import_isEmpty.default)(tableRows.current)) {
        setTableRowsMaxHeight(nextTableRowsMaxHeight);
      }
    }
  }, [prefix2, wordWrap]);
  useMount_default(function() {
    defer_default(calculateRowMaxHeight);
  });
  useUpdateLayoutEffect_default(function() {
    defer_default(calculateRowMaxHeight);
  }, [data, expandedRowKeys]);
  return {
    bindTableRowsRef,
    tableRowsMaxHeight,
    tableRows
  };
};
var useTableRows_default = useTableRows;

// node_modules/rsuite-table/es/utils/useAffix.js
var import_react25 = __toESM(require_react());
var useAffix = function useAffix2(props) {
  var getTableHeight = props.getTableHeight, contentHeight = props.contentHeight, affixHorizontalScrollbar = props.affixHorizontalScrollbar, affixHeader = props.affixHeader, tableOffset = props.tableOffset, headerOffset = props.headerOffset, headerHeight = props.headerHeight, scrollbarXRef = props.scrollbarXRef, affixHeaderWrapperRef = props.affixHeaderWrapperRef;
  var scrollListener = (0, import_react25.useRef)();
  var handleAffixHorizontalScrollbar = (0, import_react25.useCallback)(function() {
    var _tableOffset$current, _scrollbarXRef$curren;
    var scrollY = window.scrollY || window.pageYOffset;
    var windowHeight = getHeight(window);
    var height = getTableHeight();
    var bottom = typeof affixHorizontalScrollbar === "number" ? affixHorizontalScrollbar : 0;
    var offsetTop = ((_tableOffset$current = tableOffset.current) === null || _tableOffset$current === void 0 ? void 0 : _tableOffset$current.top) || 0;
    var fixedScrollbar = scrollY + windowHeight < height + (offsetTop + bottom) && scrollY + windowHeight - headerHeight > offsetTop + bottom;
    if (scrollbarXRef !== null && scrollbarXRef !== void 0 && (_scrollbarXRef$curren = scrollbarXRef.current) !== null && _scrollbarXRef$curren !== void 0 && _scrollbarXRef$curren.root) {
      toggleClass_default(scrollbarXRef.current.root, "fixed", fixedScrollbar);
      if (fixedScrollbar) {
        addStyle_default(scrollbarXRef.current.root, "bottom", bottom + "px");
      } else {
        removeStyle(scrollbarXRef.current.root, "bottom");
      }
    }
  }, [affixHorizontalScrollbar, headerHeight, scrollbarXRef, getTableHeight, tableOffset]);
  var handleAffixTableHeader = (0, import_react25.useCallback)(function() {
    var _headerOffset$current;
    var top = typeof affixHeader === "number" ? affixHeader : 0;
    var scrollY = window.scrollY || window.pageYOffset;
    var offsetTop = ((_headerOffset$current = headerOffset.current) === null || _headerOffset$current === void 0 ? void 0 : _headerOffset$current.top) || 0;
    var fixedHeader = scrollY - (offsetTop - top) >= 0 && scrollY < offsetTop - top + contentHeight.current;
    if (affixHeaderWrapperRef.current) {
      toggleClass_default(affixHeaderWrapperRef.current, "fixed", fixedHeader);
    }
  }, [affixHeader, affixHeaderWrapperRef, contentHeight, headerOffset]);
  var handleWindowScroll = (0, import_react25.useCallback)(function() {
    if (isNumberOrTrue(affixHeader)) {
      handleAffixTableHeader();
    }
    if (isNumberOrTrue(affixHorizontalScrollbar)) {
      handleAffixHorizontalScrollbar();
    }
  }, [affixHeader, affixHorizontalScrollbar, handleAffixTableHeader, handleAffixHorizontalScrollbar]);
  useUpdateEffect_default(handleWindowScroll, [getTableHeight]);
  (0, import_react25.useEffect)(function() {
    if (isNumberOrTrue(affixHeader) || isNumberOrTrue(affixHorizontalScrollbar)) {
      scrollListener.current = on(window, "scroll", handleWindowScroll);
    }
    return function() {
      var _scrollListener$curre;
      (_scrollListener$curre = scrollListener.current) === null || _scrollListener$curre === void 0 ? void 0 : _scrollListener$curre.off();
    };
  }, [affixHeader, affixHorizontalScrollbar, handleWindowScroll]);
};
var useAffix_default = useAffix;

// node_modules/rsuite-table/es/utils/useScrollListener.js
var import_react26 = __toESM(require_react());

// node_modules/dom-lib/esm/utils/emptyFunction.js
var _this = void 0;
function makeEmptyFunction(arg) {
  return function() {
    return arg;
  };
}
function emptyFunction() {
}
emptyFunction.thatReturns = makeEmptyFunction;
emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
emptyFunction.thatReturnsNull = makeEmptyFunction(null);
emptyFunction.thatReturnsThis = function() {
  return _this;
};
emptyFunction.thatReturnsArgument = function(arg) {
  return arg;
};
var emptyFunction_default = emptyFunction;

// node_modules/dom-lib/esm/utils/UserAgent.js
var populated = false;
var _ie;
var _firefox;
var _opera;
var _webkit;
var _chrome;
var ieRealVersion;
var _osx;
var _windows;
var _linux;
var _android;
var win64;
var _iphone;
var _ipad;
var _native;
var _mobile;
function populate() {
  if (populated) {
    return;
  }
  populated = true;
  var uas = navigator.userAgent;
  var agent = /(?:MSIE.(\d+\.\d+))|(?:(?:Firefox|GranParadiso|Iceweasel).(\d+\.\d+))|(?:Opera(?:.+Version.|.)(\d+\.\d+))|(?:AppleWebKit.(\d+(?:\.\d+)?))|(?:Trident\/\d+\.\d+.*rv:(\d+\.\d+))/.exec(uas);
  var os = /(Mac OS X)|(Windows)|(Linux)/.exec(uas);
  _iphone = /\b(iPhone|iP[ao]d)/.exec(uas);
  _ipad = /\b(iP[ao]d)/.exec(uas);
  _android = /Android/i.exec(uas);
  _native = /FBAN\/\w+;/i.exec(uas);
  _mobile = /Mobile/i.exec(uas);
  win64 = !!/Win64/.exec(uas);
  if (agent) {
    if (agent[1]) {
      _ie = parseFloat(agent[1]);
    } else {
      _ie = agent[5] ? parseFloat(agent[5]) : NaN;
    }
    if (_ie && document && document.documentMode) {
      _ie = document.documentMode;
    }
    var trident = /(?:Trident\/(\d+.\d+))/.exec(uas);
    ieRealVersion = trident ? parseFloat(trident[1]) + 4 : _ie;
    _firefox = agent[2] ? parseFloat(agent[2]) : NaN;
    _opera = agent[3] ? parseFloat(agent[3]) : NaN;
    _webkit = agent[4] ? parseFloat(agent[4]) : NaN;
    if (_webkit) {
      agent = /(?:Chrome\/(\d+\.\d+))/.exec(uas);
      _chrome = agent && agent[1] ? parseFloat(agent[1]) : NaN;
    } else {
      _chrome = NaN;
    }
  } else {
    _ie = NaN;
    _firefox = NaN;
    _opera = NaN;
    _chrome = NaN;
    _webkit = NaN;
  }
  if (os) {
    if (os[1]) {
      var ver = /(?:Mac OS X (\d+(?:[._]\d+)?))/.exec(uas);
      _osx = ver ? parseFloat(ver[1].replace("_", ".")) : true;
    } else {
      _osx = false;
    }
    _windows = !!os[2];
    _linux = !!os[3];
  } else {
    _osx = false;
    _windows = false;
    _linux = false;
  }
}
var UserAgent = {
  /**
   *  Check if the UA is Internet Explorer.
   *
   *
   *  @return float|NaN Version number (if match) or NaN.
   */
  ie: function ie() {
    return populate() || _ie;
  },
  /**
   * Check if we're in Internet Explorer compatibility mode.
   *
   * @return bool true if in compatibility mode, false if
   * not compatibility mode or not ie
   */
  ieCompatibilityMode: function ieCompatibilityMode() {
    return populate() || ieRealVersion > _ie;
  },
  /**
   * Whether the browser is 64-bit IE.  Really, this is kind of weak sauce;  we
   * only need this because Skype can't handle 64-bit IE yet.  We need to remove
   * this when we don't need it -- tracked by #601957.
   */
  ie64: function ie64() {
    return UserAgent.ie() && win64;
  },
  /**
   *  Check if the UA is Firefox.
   *
   *
   *  @return float|NaN Version number (if match) or NaN.
   */
  firefox: function firefox() {
    return populate() || _firefox;
  },
  /**
   *  Check if the UA is Opera.
   *
   *
   *  @return float|NaN Version number (if match) or NaN.
   */
  opera: function opera() {
    return populate() || _opera;
  },
  /**
   *  Check if the UA is WebKit.
   *
   *
   *  @return float|NaN Version number (if match) or NaN.
   */
  webkit: function webkit() {
    return populate() || _webkit;
  },
  /**
   *  For Push
   *  WILL BE REMOVED VERY SOON. Use UserAgent_DEPRECATED.webkit
   */
  safari: function safari() {
    return UserAgent.webkit();
  },
  /**
   *  Check if the UA is a Chrome browser.
   *
   *
   *  @return float|NaN Version number (if match) or NaN.
   */
  chrome: function chrome() {
    return populate() || _chrome;
  },
  /**
   *  Check if the user is running Windows.
   *
   *  @return bool `true' if the user's OS is Windows.
   */
  windows: function windows() {
    return populate() || _windows;
  },
  /**
   *  Check if the user is running Mac OS X.
   *
   *  @return float|bool   Returns a float if a version number is detected,
   *                       otherwise true/false.
   */
  osx: function osx() {
    return populate() || _osx;
  },
  /**
   * Check if the user is running Linux.
   *
   * @return bool `true' if the user's OS is some flavor of Linux.
   */
  linux: function linux() {
    return populate() || _linux;
  },
  /**
   * Check if the user is running on an iPhone or iPod platform.
   *
   * @return bool `true' if the user is running some flavor of the
   *    iPhone OS.
   */
  iphone: function iphone() {
    return populate() || _iphone;
  },
  mobile: function mobile() {
    return populate() || _iphone || _ipad || _android || _mobile;
  },
  // webviews inside of the native apps
  nativeApp: function nativeApp() {
    return populate() || _native;
  },
  android: function android() {
    return populate() || _android;
  },
  ipad: function ipad() {
    return populate() || _ipad;
  }
};
var UserAgent_default = UserAgent;

// node_modules/dom-lib/esm/utils/isEventSupported.js
var useHasFeature;
if (canUseDOM_default) {
  useHasFeature = document.implementation && document.implementation.hasFeature && // always returns true in newer browsers as per the standard.
  // @see http://dom.spec.whatwg.org/#dom-domimplementation-hasfeature
  document.implementation.hasFeature("", "") !== true;
}
function isEventSupported(eventNameSuffix, capture) {
  if (!canUseDOM_default || capture && !("addEventListener" in document)) {
    return false;
  }
  var eventName = "on" + eventNameSuffix;
  var isSupported = eventName in document;
  if (!isSupported) {
    var element = document.createElement("div");
    element.setAttribute(eventName, "return;");
    isSupported = typeof element[eventName] === "function";
  }
  if (!isSupported && useHasFeature && eventNameSuffix === "wheel") {
    isSupported = document.implementation.hasFeature("Events.wheel", "3.0");
  }
  return isSupported;
}
var isEventSupported_default = isEventSupported;

// node_modules/dom-lib/esm/utils/normalizeWheel.js
var PIXEL_STEP = 10;
var LINE_HEIGHT = 40;
var PAGE_HEIGHT = 800;
function normalizeWheel(event) {
  var sX = 0;
  var sY = 0;
  var pX = 0;
  var pY = 0;
  if ("detail" in event) {
    sY = event.detail;
  }
  if ("wheelDelta" in event) {
    sY = -event.wheelDelta / 120;
  }
  if ("wheelDeltaY" in event) {
    sY = -event.wheelDeltaY / 120;
  }
  if ("wheelDeltaX" in event) {
    sX = -event.wheelDeltaX / 120;
  }
  if ("axis" in event && event.axis === event.HORIZONTAL_AXIS) {
    sX = sY;
    sY = 0;
  }
  pX = sX * PIXEL_STEP;
  pY = sY * PIXEL_STEP;
  if ("deltaY" in event) {
    pY = event.deltaY;
  }
  if ("deltaX" in event) {
    pX = event.deltaX;
  }
  if ((pX || pY) && event.deltaMode) {
    if (event.deltaMode === 1) {
      pX *= LINE_HEIGHT;
      pY *= LINE_HEIGHT;
    } else {
      pX *= PAGE_HEIGHT;
      pY *= PAGE_HEIGHT;
    }
  }
  if (pX && !sX) {
    sX = pX < 1 ? -1 : 1;
  }
  if (pY && !sY) {
    sY = pY < 1 ? -1 : 1;
  }
  return {
    spinX: sX,
    spinY: sY,
    pixelX: pX,
    pixelY: pY
  };
}
normalizeWheel.getEventType = function() {
  if (UserAgent_default.firefox()) {
    return "DOMMouseScroll";
  }
  return isEventSupported_default("wheel") ? "wheel" : "mousewheel";
};
var normalizeWheel_default = normalizeWheel;

// node_modules/dom-lib/esm/WheelHandler.js
var swapWheelAxis = function swapWheelAxis2(normalizedEvent) {
  return {
    spinX: normalizedEvent.spinY,
    spinY: normalizedEvent.spinX,
    pixelX: normalizedEvent.pixelY,
    pixelY: normalizedEvent.pixelX
  };
};
var WheelHandler = function() {
  function WheelHandler2(onWheel, handleScrollX, handleScrollY, stopPropagation) {
    this.animationFrameID = null;
    this.deltaX = 0;
    this.deltaY = 0;
    this.handleScrollX = null;
    this.handleScrollY = null;
    this.stopPropagation = null;
    this.onWheelCallback = null;
    this.didWheel = this.didWheel.bind(this);
    if (typeof handleScrollX !== "function") {
      handleScrollX = handleScrollX ? emptyFunction_default.thatReturnsTrue : emptyFunction_default.thatReturnsFalse;
    }
    if (typeof handleScrollY !== "function") {
      handleScrollY = handleScrollY ? emptyFunction_default.thatReturnsTrue : emptyFunction_default.thatReturnsFalse;
    }
    if (typeof stopPropagation !== "function") {
      stopPropagation = stopPropagation ? emptyFunction_default.thatReturnsTrue : emptyFunction_default.thatReturnsFalse;
    }
    this.handleScrollX = handleScrollX;
    this.handleScrollY = handleScrollY;
    this.stopPropagation = stopPropagation;
    this.onWheelCallback = onWheel;
    this.onWheel = this.onWheel.bind(this);
  }
  var _proto = WheelHandler2.prototype;
  _proto.onWheel = function onWheel(event) {
    var normalizedEvent = normalizeWheel_default(event);
    if (navigator.platform !== "MacIntel" && event.shiftKey) {
      normalizedEvent = swapWheelAxis(normalizedEvent);
    }
    var deltaX = this.deltaX + normalizedEvent.pixelX;
    var deltaY = this.deltaY + normalizedEvent.pixelY;
    var handleScrollX = this.handleScrollX(deltaX, deltaY);
    var handleScrollY = this.handleScrollY(deltaY, deltaX);
    if (!handleScrollX && !handleScrollY) {
      return;
    }
    this.deltaX += handleScrollX ? normalizedEvent.pixelX : 0;
    this.deltaY += handleScrollY ? normalizedEvent.pixelY : 0;
    event.preventDefault();
    var changed;
    if (this.deltaX !== 0 || this.deltaY !== 0) {
      if (this.stopPropagation()) {
        event.stopPropagation();
      }
      changed = true;
    }
    if (changed === true && this.animationFrameID === null) {
      this.animationFrameID = requestAnimationFramePolyfill_default(this.didWheel);
    }
  };
  _proto.didWheel = function didWheel() {
    this.animationFrameID = null;
    this.onWheelCallback(this.deltaX, this.deltaY);
    this.deltaX = 0;
    this.deltaY = 0;
  };
  return WheelHandler2;
}();
var WheelHandler_default = WheelHandler;

// node_modules/dom-lib/esm/scrollLeft.js
function scrollLeft(node, val) {
  var win = getWindow(node);
  var left = node.scrollLeft;
  var top = 0;
  if (win) {
    left = win.pageXOffset;
    top = win.pageYOffset;
  }
  if (val !== void 0) {
    if (win) {
      win.scrollTo(val, top);
    } else {
      node.scrollLeft = val;
    }
  }
  return left;
}
var scrollLeft_default = scrollLeft;

// node_modules/dom-lib/esm/scrollTop.js
function scrollTop(node, val) {
  var win = getWindow(node);
  var top = node.scrollTop;
  var left = 0;
  if (win) {
    top = win.pageYOffset;
    left = win.pageXOffset;
  }
  if (val !== void 0) {
    if (win) {
      win.scrollTo(left, val);
    } else {
      node.scrollTop = val;
    }
  }
  return top;
}
var scrollTop_default = scrollTop;

// node_modules/rsuite-table/es/utils/useScrollListener.js
var momentumTimeThreshold = 300;
var momentumYThreshold = 15;
var arrowKeysList = ["ArrowUp", "ArrowDown", "ArrowLeft", "ArrowRight"];
var momentum = function momentum2(current, start, duration) {
  var deceleration = 3e-3;
  var distance = current - start;
  var speed = 2 * Math.abs(distance) / duration;
  var destination = current + speed / deceleration * (distance < 0 ? -1 : 1);
  return {
    delta: current - destination,
    duration: TRANSITION_DURATION,
    bezier: BEZIER
  };
};
var useScrollListener = function useScrollListener2(props) {
  var data = props.data, autoHeight = props.autoHeight, tableBodyRef = props.tableBodyRef, scrollbarXRef = props.scrollbarXRef, scrollbarYRef = props.scrollbarYRef, disabledScroll = props.disabledScroll, loading = props.loading, tableRef = props.tableRef, contentWidth = props.contentWidth, tableWidth = props.tableWidth, scrollY = props.scrollY, minScrollY = props.minScrollY, minScrollX = props.minScrollX, scrollX = props.scrollX, setScrollX = props.setScrollX, setScrollY = props.setScrollY, virtualized = props.virtualized, forceUpdatePosition = props.forceUpdatePosition, deferUpdatePosition = props.deferUpdatePosition, onScroll = props.onScroll, onTouchMove = props.onTouchMove, onTouchStart = props.onTouchStart, onTouchEnd = props.onTouchEnd, heightProp = props.height, getTableHeight = props.getTableHeight, contentHeight = props.contentHeight, headerHeight = props.headerHeight, rtl = props.rtl;
  var wheelListener = (0, import_react26.useRef)();
  var touchStartListener = (0, import_react26.useRef)();
  var touchMoveListener = (0, import_react26.useRef)();
  var touchEndListener = (0, import_react26.useRef)();
  var _useState = (0, import_react26.useState)(false), isScrolling = _useState[0], setScrolling = _useState[1];
  var touchX = (0, import_react26.useRef)(0);
  var touchY = (0, import_react26.useRef)(0);
  var disableEventsTimeoutId = (0, import_react26.useRef)(null);
  var isTouching = (0, import_react26.useRef)(false);
  var momentumStartTime = (0, import_react26.useRef)(0);
  var momentumStartY = (0, import_react26.useRef)(0);
  var shouldHandleWheelX = (0, import_react26.useCallback)(function(delta) {
    if (delta === 0 || disabledScroll || loading) {
      return false;
    }
    return true;
  }, [disabledScroll, loading]);
  var shouldHandleWheelY = (0, import_react26.useCallback)(function(delta) {
    if (delta === 0 || disabledScroll || loading || autoHeight) {
      return false;
    }
    if (typeof scrollY.current === "number" && typeof minScrollY.current === "number") {
      return delta >= 0 && scrollY.current > minScrollY.current || delta < 0 && scrollY.current < 0;
    }
  }, [autoHeight, disabledScroll, loading, minScrollY, scrollY]);
  var debounceScrollEndedCallback = (0, import_react26.useCallback)(function() {
    disableEventsTimeoutId.current = null;
    flushSync_default(function() {
      return setScrolling(false);
    });
  }, []);
  var handleWheel = (0, import_react26.useCallback)(function(deltaX, deltaY, momentumOptions, event) {
    if (!tableRef.current) {
      return;
    }
    var nextScrollX = contentWidth.current <= tableWidth.current ? 0 : scrollX.current - deltaX;
    var nextScrollY = scrollY.current - deltaY;
    var y = Math.min(0, nextScrollY < minScrollY.current ? minScrollY.current : nextScrollY);
    var x = Math.min(0, nextScrollX < minScrollX.current ? minScrollX.current : nextScrollX);
    setScrollX(x);
    setScrollY(y);
    onScroll === null || onScroll === void 0 ? void 0 : onScroll(Math.abs(x), Math.abs(y));
    if (virtualized) {
      flushSync_default(function() {
        return setScrolling(true);
      });
      if (disableEventsTimeoutId.current) {
        cancelAnimationTimeout(disableEventsTimeoutId.current);
      }
      disableEventsTimeoutId.current = requestAnimationTimeout(
        debounceScrollEndedCallback,
        // When momentum is enabled, set a delay of 50ms rendering.
        momentumOptions !== null && momentumOptions !== void 0 && momentumOptions.duration ? 50 : 0
      );
    }
    if ((event === null || event === void 0 ? void 0 : event.type) === "click") {
      deferUpdatePosition(momentumOptions === null || momentumOptions === void 0 ? void 0 : momentumOptions.duration, momentumOptions === null || momentumOptions === void 0 ? void 0 : momentumOptions.bezier);
      return;
    }
    forceUpdatePosition(momentumOptions === null || momentumOptions === void 0 ? void 0 : momentumOptions.duration, momentumOptions === null || momentumOptions === void 0 ? void 0 : momentumOptions.bezier);
  }, [tableRef, contentWidth, tableWidth, scrollX, scrollY, minScrollY, minScrollX, setScrollX, setScrollY, onScroll, forceUpdatePosition, deferUpdatePosition, virtualized, debounceScrollEndedCallback]);
  var onWheel = (0, import_react26.useCallback)(function(deltaX, deltaY, momentumOptions) {
    var _scrollbarXRef$curren, _scrollbarXRef$curren2, _scrollbarYRef$curren, _scrollbarYRef$curren2;
    handleWheel(deltaX, deltaY, momentumOptions);
    (_scrollbarXRef$curren = scrollbarXRef.current) === null || _scrollbarXRef$curren === void 0 ? void 0 : (_scrollbarXRef$curren2 = _scrollbarXRef$curren.onWheelScroll) === null || _scrollbarXRef$curren2 === void 0 ? void 0 : _scrollbarXRef$curren2.call(_scrollbarXRef$curren, deltaX);
    (_scrollbarYRef$curren = scrollbarYRef.current) === null || _scrollbarYRef$curren === void 0 ? void 0 : (_scrollbarYRef$curren2 = _scrollbarYRef$curren.onWheelScroll) === null || _scrollbarYRef$curren2 === void 0 ? void 0 : _scrollbarYRef$curren2.call(_scrollbarYRef$curren, deltaY, momentumOptions !== null && momentumOptions !== void 0 && momentumOptions.duration ? true : false);
  }, [handleWheel, scrollbarXRef, scrollbarYRef]);
  var wheelHandler = (0, import_react26.useRef)();
  var stopScroll = (0, import_react26.useCallback)(function() {
    var _tableBodyRef$current, _scrollbarYRef$curren3;
    var wheelElement = (_tableBodyRef$current = tableBodyRef.current) === null || _tableBodyRef$current === void 0 ? void 0 : _tableBodyRef$current.querySelector(".rs-table-body-wheel-area");
    var handleElement = (_scrollbarYRef$curren3 = scrollbarYRef.current) === null || _scrollbarYRef$curren3 === void 0 ? void 0 : _scrollbarYRef$curren3.handle;
    var transitionCSS = ["transition-duration", "transition-timing-function"];
    if (!virtualized && wheelElement) {
      var matrix = window.getComputedStyle(wheelElement).getPropertyValue("transform");
      var offsetY = Math.round(+matrix.split(")")[0].split(", ")[5]);
      setScrollY(offsetY);
    }
    if (wheelElement) {
      removeStyle(wheelElement, transitionCSS);
    }
    if (handleElement) {
      removeStyle(handleElement, transitionCSS);
    }
  }, [scrollbarYRef, setScrollY, tableBodyRef, virtualized]);
  var handleTouchStart = (0, import_react26.useCallback)(function(event) {
    var _event$touches$ = event.touches[0], pageX = _event$touches$.pageX, pageY = _event$touches$.pageY;
    touchX.current = pageX;
    touchY.current = pageY;
    momentumStartTime.current = (/* @__PURE__ */ new Date()).getTime();
    momentumStartY.current = scrollY.current;
    isTouching.current = true;
    onTouchStart === null || onTouchStart === void 0 ? void 0 : onTouchStart(event);
    stopScroll();
  }, [onTouchStart, scrollY, stopScroll]);
  var handleTouchMove = (0, import_react26.useCallback)(function(event) {
    if (!isTouching.current) {
      return;
    }
    var _event$touches$2 = event.touches[0], pageX = _event$touches$2.pageX, pageY = _event$touches$2.pageY;
    var deltaX = touchX.current - pageX;
    var deltaY = autoHeight ? 0 : touchY.current - pageY;
    if (!shouldHandleWheelY(deltaY) && !shouldHandleWheelX(deltaX)) {
      return;
    }
    if (!autoHeight && shouldHandleWheelY(deltaY)) {
      var _event$preventDefault;
      (_event$preventDefault = event.preventDefault) === null || _event$preventDefault === void 0 ? void 0 : _event$preventDefault.call(event);
    }
    var now = (/* @__PURE__ */ new Date()).getTime();
    onWheel(deltaX, deltaY);
    touchX.current = pageX;
    touchY.current = pageY;
    if (now - momentumStartTime.current > momentumTimeThreshold) {
      momentumStartY.current = scrollY.current;
      momentumStartTime.current = now;
    }
    onTouchMove === null || onTouchMove === void 0 ? void 0 : onTouchMove(event);
  }, [autoHeight, onWheel, onTouchMove, scrollY, shouldHandleWheelX, shouldHandleWheelY]);
  var handleTouchEnd = (0, import_react26.useCallback)(function(event) {
    if (!isTouching.current) {
      return;
    }
    isTouching.current = false;
    var touchDuration = (/* @__PURE__ */ new Date()).getTime() - momentumStartTime.current;
    var absDeltaY = Math.abs(scrollY.current - momentumStartY.current);
    if (touchDuration < momentumTimeThreshold && absDeltaY > momentumYThreshold) {
      var _momentum = momentum(scrollY.current, momentumStartY.current, touchDuration), delta = _momentum.delta, duration = _momentum.duration, bezier = _momentum.bezier;
      onWheel(0, delta, {
        duration,
        bezier
      });
      onTouchEnd === null || onTouchEnd === void 0 ? void 0 : onTouchEnd(event);
    }
  }, [onWheel, onTouchEnd, scrollY]);
  var onScrollBody = (0, import_react26.useCallback)(function(event) {
    if (event.target !== tableBodyRef.current) {
      return;
    }
    var left = scrollLeft_default(event.target);
    var top = scrollTop_default(event.target);
    if (top === 0 && left === 0) {
      return;
    }
    onWheel(left, top);
    scrollLeft_default(event.target, 0);
    scrollTop_default(event.target, 0);
  }, [onWheel, tableBodyRef]);
  var getControlledScrollTopValue = (0, import_react26.useCallback)(function(value) {
    if (autoHeight) {
      return [0, 0];
    }
    var height = getTableHeight();
    value = Math.min(value, Math.max(0, contentHeight.current - (height - headerHeight)));
    return [-value, value / contentHeight.current * (height - headerHeight)];
  }, [autoHeight, contentHeight, getTableHeight, headerHeight]);
  var rerender = function rerender2() {
    setScrolling(true);
    defer_default(function() {
      if (tableBodyRef.current) {
        setScrolling(false);
      }
    });
  };
  var getControlledScrollLeftValue = function getControlledScrollLeftValue2(value) {
    value = Math.min(value, Math.max(0, contentWidth.current - tableWidth.current));
    return [-value, value / contentWidth.current * tableWidth.current];
  };
  var onScrollTop = function onScrollTop2(top) {
    var _scrollbarYRef$curren4, _scrollbarYRef$curren5;
    if (top === void 0) {
      top = 0;
    }
    var _getControlledScrollT = getControlledScrollTopValue(top), nextScrollY = _getControlledScrollT[0], handleScrollY = _getControlledScrollT[1];
    var height = getTableHeight();
    if (!loading && nextScrollY !== scrollY.current) {
      onScroll === null || onScroll === void 0 ? void 0 : onScroll(Math.abs(scrollX.current), Math.abs(nextScrollY));
    }
    setScrollY(nextScrollY);
    scrollbarYRef === null || scrollbarYRef === void 0 ? void 0 : (_scrollbarYRef$curren4 = scrollbarYRef.current) === null || _scrollbarYRef$curren4 === void 0 ? void 0 : (_scrollbarYRef$curren5 = _scrollbarYRef$curren4.resetScrollBarPosition) === null || _scrollbarYRef$curren5 === void 0 ? void 0 : _scrollbarYRef$curren5.call(_scrollbarYRef$curren4, handleScrollY);
    deferUpdatePosition();
    if (virtualized && contentHeight.current > height) {
      rerender();
    }
  };
  var onScrollLeft = function onScrollLeft2(left) {
    var _scrollbarXRef$curren3, _scrollbarXRef$curren4;
    if (left === void 0) {
      left = 0;
    }
    var _getControlledScrollL = getControlledScrollLeftValue(left), nextScrollX = _getControlledScrollL[0], scrollbarX = _getControlledScrollL[1];
    setScrollX(nextScrollX);
    !loading && (onScroll === null || onScroll === void 0 ? void 0 : onScroll(Math.abs(nextScrollX), Math.abs(scrollY.current)));
    scrollbarXRef === null || scrollbarXRef === void 0 ? void 0 : (_scrollbarXRef$curren3 = scrollbarXRef.current) === null || _scrollbarXRef$curren3 === void 0 ? void 0 : (_scrollbarXRef$curren4 = _scrollbarXRef$curren3.resetScrollBarPosition) === null || _scrollbarXRef$curren4 === void 0 ? void 0 : _scrollbarXRef$curren4.call(_scrollbarXRef$curren3, scrollbarX);
    deferUpdatePosition();
  };
  var onScrollTo = function onScrollTo2(coord) {
    var _ref = coord || {}, x = _ref.x, y = _ref.y;
    if (typeof x === "number") {
      onScrollLeft(x);
    }
    if (typeof y === "number") {
      onScrollTop(y);
    }
  };
  useUpdateEffect_default(function() {
    if (scrollY.current !== 0) {
      onScrollTop(Math.abs(scrollY.current));
    }
    deferUpdatePosition();
  }, [heightProp, data]);
  var releaseListeners = (0, import_react26.useCallback)(function() {
    var _wheelListener$curren, _touchStartListener$c, _touchMoveListener$cu, _touchEndListener$cur;
    wheelHandler.current = null;
    (_wheelListener$curren = wheelListener.current) === null || _wheelListener$curren === void 0 ? void 0 : _wheelListener$curren.off();
    (_touchStartListener$c = touchStartListener.current) === null || _touchStartListener$c === void 0 ? void 0 : _touchStartListener$c.off();
    (_touchMoveListener$cu = touchMoveListener.current) === null || _touchMoveListener$cu === void 0 ? void 0 : _touchMoveListener$cu.off();
    (_touchEndListener$cur = touchEndListener.current) === null || _touchEndListener$cur === void 0 ? void 0 : _touchEndListener$cur.off();
  }, []);
  (0, import_react26.useEffect)(function() {
    var options = {
      passive: false
    };
    var tableBody = tableBodyRef.current;
    if (tableBody) {
      releaseListeners();
      wheelHandler.current = new WheelHandler_default(onWheel, shouldHandleWheelX, shouldHandleWheelY, false);
      wheelListener.current = on(tableBody, "wheel", wheelHandler.current.onWheel, options);
      if (isSupportTouchEvent()) {
        touchStartListener.current = on(tableBody, "touchstart", handleTouchStart, options);
        touchMoveListener.current = on(tableBody, "touchmove", handleTouchMove, options);
        touchEndListener.current = on(tableBody, "touchend", handleTouchEnd, options);
      }
    }
    return releaseListeners;
  }, [handleTouchEnd, handleTouchMove, handleTouchStart, onWheel, releaseListeners, shouldHandleWheelX, shouldHandleWheelY, tableBodyRef]);
  var onScrollByKeydown = (0, import_react26.useCallback)(function(event) {
    if (event.currentTarget === event.target && arrowKeysList.indexOf(event.key) > -1) {
      event.preventDefault();
      var step = 40;
      switch (event.key) {
        case "ArrowUp":
          onWheel(0, -step);
          break;
        case "ArrowDown":
          onWheel(0, step);
          break;
        case "ArrowLeft":
          onWheel(-step, 0);
          break;
        case "ArrowRight":
          onWheel(step, 0);
          break;
      }
    }
  }, [onWheel]);
  useMount_default(function() {
    if (rtl) {
      var _scrollbarXRef$curren5, _scrollbarXRef$curren6;
      setScrollX(tableWidth.current - contentWidth.current - SCROLLBAR_WIDTH);
      scrollbarXRef === null || scrollbarXRef === void 0 ? void 0 : (_scrollbarXRef$curren5 = scrollbarXRef.current) === null || _scrollbarXRef$curren5 === void 0 ? void 0 : (_scrollbarXRef$curren6 = _scrollbarXRef$curren5.resetScrollBarPosition) === null || _scrollbarXRef$curren6 === void 0 ? void 0 : _scrollbarXRef$curren6.call(_scrollbarXRef$curren5, -scrollX.current);
      forceUpdatePosition();
    }
  });
  var onScrollHorizontal = (0, import_react26.useCallback)(function(delta) {
    return handleWheel(delta, 0);
  }, [handleWheel]);
  var onScrollVertical = (0, import_react26.useCallback)(function(delta, event) {
    return handleWheel(0, delta, void 0, event);
  }, [handleWheel]);
  return {
    isScrolling,
    onScrollHorizontal,
    onScrollVertical,
    onScrollBody,
    onScrollTop,
    onScrollLeft,
    onScrollTo,
    onScrollByKeydown
  };
};
var useScrollListener_default = useScrollListener;

// node_modules/rsuite-table/es/utils/usePosition.js
var import_react27 = __toESM(require_react());
var usePosition = function usePosition2(props) {
  var data = props.data, height = props.height, tableWidth = props.tableWidth, tableRef = props.tableRef, prefix2 = props.prefix, translateDOMPositionXY3 = props.translateDOMPositionXY, wheelWrapperRef = props.wheelWrapperRef, headerWrapperRef = props.headerWrapperRef, affixHeaderWrapperRef = props.affixHeaderWrapperRef, tableHeaderRef = props.tableHeaderRef, scrollX = props.scrollX, scrollY = props.scrollY, contentWidth = props.contentWidth, shouldFixedColumn = props.shouldFixedColumn;
  var duration = (0, import_react27.useRef)(0);
  var bezier = (0, import_react27.useRef)("linear");
  var getScrollCellGroups = (0, import_react27.useCallback)(function() {
    var _tableRef$current;
    return ((_tableRef$current = tableRef.current) === null || _tableRef$current === void 0 ? void 0 : _tableRef$current.querySelectorAll("." + prefix2("cell-group-scroll"))) || [];
  }, [prefix2, tableRef]);
  var getFixedLeftCellGroups = (0, import_react27.useCallback)(function() {
    var _tableRef$current2;
    return (_tableRef$current2 = tableRef.current) === null || _tableRef$current2 === void 0 ? void 0 : _tableRef$current2.querySelectorAll("." + prefix2("cell-group-fixed-left"));
  }, [prefix2, tableRef]);
  var getFixedRightCellGroups = (0, import_react27.useCallback)(function() {
    var _tableRef$current3;
    return (_tableRef$current3 = tableRef.current) === null || _tableRef$current3 === void 0 ? void 0 : _tableRef$current3.querySelectorAll("." + prefix2("cell-group-fixed-right"));
  }, [prefix2, tableRef]);
  var updateWheelElementPosition = (0, import_react27.useCallback)(function(fixedCell) {
    if (wheelWrapperRef !== null && wheelWrapperRef !== void 0 && wheelWrapperRef.current) {
      var wheelStyle = isSupportTouchEvent() ? {
        "transition-duration": duration.current + "ms",
        "transition-timing-function": bezier.current
      } : {};
      translateDOMPositionXY3.current(wheelStyle, fixedCell ? 0 : scrollX.current, scrollY.current);
      addStyle_default(wheelWrapperRef.current, wheelStyle);
    }
  }, [scrollX, scrollY, translateDOMPositionXY3, wheelWrapperRef]);
  var updatePositionByFixedCell = (0, import_react27.useCallback)(function() {
    var wheelGroupStyle = {};
    var scrollGroups = getScrollCellGroups();
    var fixedLeftGroups = getFixedLeftCellGroups();
    var fixedRightGroups = getFixedRightCellGroups();
    translateDOMPositionXY3.current(wheelGroupStyle, scrollX.current, 0);
    var scrollArrayGroups = Array.from(scrollGroups);
    for (var i = 0; i < scrollArrayGroups.length; i++) {
      var group = scrollArrayGroups[i];
      addStyle_default(group, wheelGroupStyle);
    }
    updateWheelElementPosition(true);
    var hasHorizontalScrollbar = contentWidth.current > tableWidth.current;
    var scrollbarWidth = hasHorizontalScrollbar ? 0 : SCROLLBAR_WIDTH;
    var leftShadowClassName = prefix2("cell-group-left-shadow");
    var rightShadowClassName = prefix2("cell-group-right-shadow");
    var showLeftShadow = scrollX.current < 0;
    var showRightShadow = tableWidth.current - contentWidth.current - scrollbarWidth !== scrollX.current;
    toggleClass_default(fixedLeftGroups, leftShadowClassName, showLeftShadow);
    toggleClass_default(fixedRightGroups, rightShadowClassName, showRightShadow);
  }, [contentWidth, getFixedLeftCellGroups, getFixedRightCellGroups, getScrollCellGroups, updateWheelElementPosition, prefix2, scrollX, tableWidth, translateDOMPositionXY3]);
  var updatePosition = (0, import_react27.useCallback)(function(nextDuration, nextBezier) {
    if (nextDuration) {
      duration.current = nextDuration;
    }
    if (nextBezier) {
      bezier.current = nextBezier;
    }
    if (shouldFixedColumn) {
      updatePositionByFixedCell();
    } else {
      var _affixHeaderElement$h;
      var headerStyle = {};
      translateDOMPositionXY3.current(headerStyle, scrollX.current, 0);
      var headerElement = headerWrapperRef === null || headerWrapperRef === void 0 ? void 0 : headerWrapperRef.current;
      var affixHeaderElement = affixHeaderWrapperRef === null || affixHeaderWrapperRef === void 0 ? void 0 : affixHeaderWrapperRef.current;
      updateWheelElementPosition();
      headerElement && addStyle_default(headerElement, headerStyle);
      if (affixHeaderElement !== null && affixHeaderElement !== void 0 && (_affixHeaderElement$h = affixHeaderElement.hasChildNodes) !== null && _affixHeaderElement$h !== void 0 && _affixHeaderElement$h.call(affixHeaderElement)) {
        addStyle_default(affixHeaderElement === null || affixHeaderElement === void 0 ? void 0 : affixHeaderElement.firstChild, headerStyle);
      }
    }
    if (tableHeaderRef !== null && tableHeaderRef !== void 0 && tableHeaderRef.current) {
      toggleClass_default(tableHeaderRef.current, prefix2("cell-group-shadow"), scrollY.current < 0);
    }
  }, [affixHeaderWrapperRef, updateWheelElementPosition, headerWrapperRef, prefix2, scrollX, scrollY, shouldFixedColumn, tableHeaderRef, translateDOMPositionXY3, updatePositionByFixedCell]);
  useUpdateEffect_default(function() {
    if (scrollY.current !== 0) {
      updatePosition();
    }
  }, [height, data]);
  return {
    forceUpdatePosition: updatePosition,
    deferUpdatePosition: function deferUpdatePosition(nextDuration, nextBezier) {
      defer_default(function() {
        updatePosition(nextDuration, nextBezier);
      });
    }
  };
};
var usePosition_default = usePosition;

// node_modules/rsuite-table/es/utils/useTableData.js
var import_react28 = __toESM(require_react());
var filterTreeData = function filterTreeData2(data, expandedRowKeys, rowKey) {
  return flattenData_default(data).filter(function(rowData) {
    if (rowKey) {
      var parents = findAllParents_default(rowData, rowKey);
      var expanded = shouldShowRowByExpanded(expandedRowKeys, parents);
      rowData[EXPANDED_KEY] = expanded;
      rowData[TREE_DEPTH] = parents.length;
      return expanded;
    }
  });
};
function useTableData(props) {
  var data = props.data, isTree = props.isTree, expandedRowKeys = props.expandedRowKeys, rowKey = props.rowKey;
  var _useState = (0, import_react28.useState)(function() {
    return isTree ? filterTreeData(data, expandedRowKeys, rowKey) : data;
  }), tableData = _useState[0], setData = _useState[1];
  useUpdateEffect_default(function() {
    setData(isTree ? filterTreeData(data, expandedRowKeys, rowKey) : data);
  }, [data, expandedRowKeys, rowKey, isTree]);
  return tableData;
}
var useTableData_default = useTableData;

// node_modules/rsuite-table/es/Row.js
var _excluded5 = ["classPrefix", "height", "headerHeight", "className", "width", "top", "style", "isHeaderRow", "rowRef", "children", "rowSpan"];
var Row = import_react29.default.forwardRef(function(props, ref) {
  var _props$classPrefix = props.classPrefix, classPrefix = _props$classPrefix === void 0 ? "row" : _props$classPrefix, _props$height = props.height, height = _props$height === void 0 ? ROW_HEIGHT : _props$height, _props$headerHeight = props.headerHeight, headerHeight = _props$headerHeight === void 0 ? ROW_HEADER_HEIGHT : _props$headerHeight, className = props.className, width = props.width, top = props.top, style = props.style, isHeaderRow = props.isHeaderRow, rowRef = props.rowRef, children = props.children, rowSpan = props.rowSpan, rest = _objectWithoutPropertiesLoose(props, _excluded5);
  var _useContext = (0, import_react29.useContext)(TableContext_default), translateDOMPositionXY3 = _useContext.translateDOMPositionXY;
  var _useClassNames = useClassNames_default(classPrefix), withClassPrefix = _useClassNames.withClassPrefix, merge2 = _useClassNames.merge;
  var classes = merge2(className, withClassPrefix({
    header: isHeaderRow,
    rowspan: rowSpan
  }));
  var styles = _extends({
    minWidth: width,
    height: isHeaderRow ? headerHeight : height
  }, style);
  translateDOMPositionXY3 === null || translateDOMPositionXY3 === void 0 ? void 0 : translateDOMPositionXY3(styles, 0, top);
  return import_react29.default.createElement("div", _extends({
    role: "row"
  }, rest, {
    ref: mergeRefs(rowRef, ref),
    className: classes,
    style: styles
  }), children);
});
Row.displayName = "Table.Row";
var Row_default = Row;

// node_modules/rsuite-table/es/CellGroup.js
var import_react30 = __toESM(require_react());
var _excluded6 = ["fixed", "width", "left", "height", "style", "classPrefix", "className", "children"];
var CellGroup = import_react30.default.forwardRef(function(props, ref) {
  var _withClassPrefix;
  var fixed = props.fixed, width = props.width, left = props.left, height = props.height, style = props.style, _props$classPrefix = props.classPrefix, classPrefix = _props$classPrefix === void 0 ? "cell-group" : _props$classPrefix, className = props.className, children = props.children, rest = _objectWithoutPropertiesLoose(props, _excluded6);
  var _useContext = (0, import_react30.useContext)(TableContext_default), translateDOMPositionXY3 = _useContext.translateDOMPositionXY;
  var _useClassNames = useClassNames_default(classPrefix), withClassPrefix = _useClassNames.withClassPrefix, merge2 = _useClassNames.merge;
  var classes = merge2(className, withClassPrefix((_withClassPrefix = {}, _withClassPrefix["fixed-" + fixed] = fixed, _withClassPrefix.scroll = !fixed, _withClassPrefix)));
  var styles = _extends({
    width,
    height
  }, style);
  translateDOMPositionXY3 === null || translateDOMPositionXY3 === void 0 ? void 0 : translateDOMPositionXY3(styles, left, 0);
  return import_react30.default.createElement("div", _extends({}, rest, {
    ref,
    className: classes,
    style: styles
  }), children);
});
CellGroup.displayName = "Table.CellGroup";
var CellGroup_default = CellGroup;

// node_modules/rsuite-table/es/Scrollbar.js
var import_react31 = __toESM(require_react());
var _excluded7 = ["length", "scrollLength", "classPrefix", "vertical", "className", "tableId", "onMouseDown", "onScroll"];
var Scrollbar = import_react31.default.forwardRef(function(props, ref) {
  var _barRef$current, _styles;
  var _props$length = props.length, length = _props$length === void 0 ? 1 : _props$length, _props$scrollLength = props.scrollLength, scrollLength = _props$scrollLength === void 0 ? 1 : _props$scrollLength, _props$classPrefix = props.classPrefix, classPrefix = _props$classPrefix === void 0 ? "scrollbar" : _props$classPrefix, vertical = props.vertical, className = props.className, tableId = props.tableId, onMouseDown = props.onMouseDown, onScroll = props.onScroll, rest = _objectWithoutPropertiesLoose(props, _excluded7);
  var _React$useContext = import_react31.default.useContext(TableContext_default), translateDOMPositionXY3 = _React$useContext.translateDOMPositionXY;
  var _useState = (0, import_react31.useState)(false), handlePressed = _useState[0], setHandlePressed = _useState[1];
  var _useState2 = (0, import_react31.useState)({
    top: 0,
    left: 0
  }), barOffset = _useState2[0], setBarOffset = _useState2[1];
  var scrollOffset = (0, import_react31.useRef)(0);
  var scrollRange = (0, import_react31.useRef)(scrollLength);
  var barRef = (0, import_react31.useRef)(null);
  var handleRef = (0, import_react31.useRef)(null);
  var mouseMoveTracker = (0, import_react31.useRef)();
  var _useClassNames = useClassNames_default(classPrefix), withClassPrefix = _useClassNames.withClassPrefix, merge2 = _useClassNames.merge, prefix2 = _useClassNames.prefix;
  var classes = merge2(
    className,
    withClassPrefix({
      vertical,
      horizontal: !vertical,
      pressed: handlePressed
    }),
    // keep the 'fixed' class name if it has already been given by useAffix hook
    ((_barRef$current = barRef.current) === null || _barRef$current === void 0 ? void 0 : _barRef$current.classList.contains("fixed")) && "fixed"
  );
  var width = length / scrollLength * 100;
  var styles = (_styles = {}, _styles[vertical ? "height" : "width"] = width + "%", _styles[vertical ? "minHeight" : "minWidth"] = SCROLLBAR_MIN_WIDTH, _styles);
  var valuenow = scrollOffset.current / length * 100 + width;
  useMount_default(function() {
    defer_default(function() {
      if (barRef.current) {
        setBarOffset(getOffset(barRef.current));
      }
    });
    return function() {
      releaseMouseMoves();
    };
  });
  useUpdateEffect_default(function() {
    if (scrollOffset.current) {
      scrollOffset.current = scrollRange.current / scrollLength * scrollOffset.current;
      updateScrollBarPosition(0);
    }
    scrollRange.current = scrollLength;
  }, [scrollLength]);
  (0, import_react31.useImperativeHandle)(ref, function() {
    return {
      get root() {
        return barRef.current;
      },
      get handle() {
        return handleRef.current;
      },
      onWheelScroll: function onWheelScroll(delta, momentum3) {
        var nextDelta = delta / (scrollLength / length);
        updateScrollBarPosition(nextDelta, void 0, momentum3);
      },
      resetScrollBarPosition: function resetScrollBarPosition(forceDelta) {
        if (forceDelta === void 0) {
          forceDelta = 0;
        }
        scrollOffset.current = 0;
        updateScrollBarPosition(0, forceDelta);
      }
    };
  });
  var updateScrollBarPosition = (0, import_react31.useCallback)(function(delta, forceDelta, momentum3) {
    var max = scrollLength && length ? length - Math.max(length / scrollLength * length, SCROLLBAR_MIN_WIDTH + 2) : 0;
    var styles2 = momentum3 ? {
      "transition-duration": TRANSITION_DURATION + "ms",
      "transition-timing-function": BEZIER
    } : {};
    var getSafeValue = function getSafeValue2(value) {
      if (value === void 0) {
        value = 0;
      }
      return Math.min(Math.max(value, 0), max);
    };
    if (typeof forceDelta === "undefined") {
      scrollOffset.current += delta;
      scrollOffset.current = getSafeValue(scrollOffset.current);
    } else {
      scrollOffset.current = getSafeValue(forceDelta);
    }
    if (vertical) {
      translateDOMPositionXY3 === null || translateDOMPositionXY3 === void 0 ? void 0 : translateDOMPositionXY3(styles2, 0, scrollOffset.current);
    } else {
      translateDOMPositionXY3 === null || translateDOMPositionXY3 === void 0 ? void 0 : translateDOMPositionXY3(styles2, scrollOffset.current, 0);
    }
    if (handleRef.current) {
      addStyle_default(handleRef.current, styles2);
    }
  }, [length, scrollLength, translateDOMPositionXY3, vertical]);
  var handleScroll = (0, import_react31.useCallback)(function(delta, event) {
    var scrollDelta = delta * (scrollLength / length);
    updateScrollBarPosition(delta);
    onScroll === null || onScroll === void 0 ? void 0 : onScroll(scrollDelta, event);
  }, [length, onScroll, scrollLength, updateScrollBarPosition]);
  var handleClick = (0, import_react31.useCallback)(function(event) {
    var _handleRef$current;
    if (handleRef.current && (_handleRef$current = handleRef.current) !== null && _handleRef$current !== void 0 && _handleRef$current.contains(event.target)) {
      return;
    }
    if (typeof (barOffset === null || barOffset === void 0 ? void 0 : barOffset.top) !== "number" || typeof (barOffset === null || barOffset === void 0 ? void 0 : barOffset.left) !== "number") {
      return;
    }
    var offset = vertical ? event.pageY - (barOffset === null || barOffset === void 0 ? void 0 : barOffset.top) : event.pageX - barOffset.left;
    var handleWidth = length / scrollLength * length;
    var delta = offset - handleWidth;
    var nextDelta = offset > scrollOffset.current ? delta - scrollOffset.current : offset - scrollOffset.current;
    handleScroll(nextDelta, event);
  }, [barOffset, handleScroll, length, scrollLength, vertical]);
  var releaseMouseMoves = (0, import_react31.useCallback)(function() {
    var _mouseMoveTracker$cur, _mouseMoveTracker$cur2;
    (_mouseMoveTracker$cur = mouseMoveTracker.current) === null || _mouseMoveTracker$cur === void 0 ? void 0 : (_mouseMoveTracker$cur2 = _mouseMoveTracker$cur.releaseMouseMoves) === null || _mouseMoveTracker$cur2 === void 0 ? void 0 : _mouseMoveTracker$cur2.call(_mouseMoveTracker$cur);
    mouseMoveTracker.current = null;
  }, []);
  var handleDragMove = (0, import_react31.useCallback)(function(deltaX, deltaY, event) {
    var _window, _window$event;
    if (!mouseMoveTracker.current || !mouseMoveTracker.current.isDragging()) {
      return;
    }
    if ((event === null || event === void 0 ? void 0 : event.buttons) === 0 || ((_window = window) === null || _window === void 0 ? void 0 : (_window$event = _window.event) === null || _window$event === void 0 ? void 0 : _window$event["buttons"]) === 0) {
      releaseMouseMoves();
      return;
    }
    handleScroll(vertical ? deltaY : deltaX, event);
  }, [handleScroll, releaseMouseMoves, vertical]);
  var handleDragEnd = (0, import_react31.useCallback)(function() {
    releaseMouseMoves();
    setHandlePressed(false);
  }, [releaseMouseMoves]);
  var getMouseMoveTracker = (0, import_react31.useCallback)(function() {
    return mouseMoveTracker.current || new DOMMouseMoveTracker_default(handleDragMove, handleDragEnd, document.body);
  }, [handleDragEnd, handleDragMove]);
  var handleMouseDown = (0, import_react31.useCallback)(function(event) {
    var _mouseMoveTracker$cur3;
    mouseMoveTracker.current = getMouseMoveTracker();
    mouseMoveTracker === null || mouseMoveTracker === void 0 ? void 0 : (_mouseMoveTracker$cur3 = mouseMoveTracker.current) === null || _mouseMoveTracker$cur3 === void 0 ? void 0 : _mouseMoveTracker$cur3.captureMouseMoves(event);
    setHandlePressed(true);
    onMouseDown === null || onMouseDown === void 0 ? void 0 : onMouseDown(event);
  }, [getMouseMoveTracker, onMouseDown]);
  return import_react31.default.createElement("div", _extends({
    role: "scrollbar",
    "aria-controls": tableId,
    "aria-valuemax": 100,
    "aria-valuemin": 0,
    "aria-valuenow": valuenow,
    "aria-orientation": vertical ? "vertical" : "horizontal"
  }, rest, {
    ref: barRef,
    className: classes,
    onClick: handleClick
  }), import_react31.default.createElement("div", {
    ref: handleRef,
    className: prefix2("handle"),
    style: styles,
    onMouseDown: handleMouseDown,
    role: "button",
    tabIndex: -1
  }));
});
Scrollbar.displayName = "Table.Scrollbar";
var Scrollbar_default = Scrollbar;

// node_modules/rsuite-table/es/MouseArea.js
var import_react32 = __toESM(require_react());
var MouseArea = import_react32.default.forwardRef(function(props, ref) {
  var addPrefix = props.addPrefix, headerHeight = props.headerHeight, height = props.height;
  var styles = {
    height
  };
  var spanStyles = {
    height: headerHeight - 1
  };
  return import_react32.default.createElement("div", {
    ref,
    className: addPrefix("mouse-area"),
    style: styles
  }, import_react32.default.createElement("span", {
    style: spanStyles
  }));
});
MouseArea.displayName = "Table.MouseArea";
var MouseArea_default = MouseArea;

// node_modules/rsuite-table/es/Loader.js
var import_react33 = __toESM(require_react());
var Loader = import_react33.default.forwardRef(function(props, ref) {
  var loadAnimation = props.loadAnimation, loading = props.loading, locale = props.locale, addPrefix = props.addPrefix, renderLoading = props.renderLoading;
  var loadingElement = import_react33.default.createElement("div", {
    ref,
    className: addPrefix("loader-wrapper")
  }, import_react33.default.createElement("div", {
    className: addPrefix("loader")
  }, import_react33.default.createElement("i", {
    className: addPrefix("loader-icon")
  }), import_react33.default.createElement("span", {
    className: addPrefix("loader-text")
  }, locale === null || locale === void 0 ? void 0 : locale.loading)));
  if (typeof renderLoading === "function") {
    return loading ? renderLoading(loadingElement) : null;
  }
  return loading || loadAnimation ? loadingElement : null;
});
Loader.displayName = "Table.Loader";
var Loader_default = Loader;

// node_modules/rsuite-table/es/EmptyMessage.js
var import_react34 = __toESM(require_react());
var EmptyMessage = import_react34.default.forwardRef(function(props, ref) {
  var addPrefix = props.addPrefix, locale = props.locale, renderEmpty = props.renderEmpty, loading = props.loading;
  if (loading) {
    return null;
  }
  var emptyMessage = import_react34.default.createElement("div", {
    ref,
    className: addPrefix("body-info")
  }, locale === null || locale === void 0 ? void 0 : locale.emptyMessage);
  return renderEmpty ? renderEmpty(emptyMessage) : emptyMessage;
});
EmptyMessage.displayName = "Table.EmptyMessage";
var EmptyMessage_default = EmptyMessage;

// node_modules/rsuite-table/es/utils/children.js
var import_react35 = __toESM(require_react());
var ReactIS = __toESM(require_react_is());
function _createForOfIteratorHelperLoose(r, e) {
  var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
  if (t) return (t = t.call(r)).next.bind(t);
  if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) {
    t && (r = t);
    var o = 0;
    return function() {
      return o >= r.length ? { done: true } : { done: false, value: r[o++] };
    };
  }
  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray(r, a) {
  if (r) {
    if ("string" == typeof r) return _arrayLikeToArray(r, a);
    var t = {}.toString.call(r).slice(8, -1);
    return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;
  }
}
function _arrayLikeToArray(r, a) {
  (null == a || a > r.length) && (a = r.length);
  for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e];
  return n;
}
var _flattenChildren = function flattenChildren(children, flattened) {
  if (flattened === void 0) {
    flattened = [];
  }
  for (var _iterator = _createForOfIteratorHelperLoose(import_react35.default.Children.toArray(children)), _step; !(_step = _iterator()).done; ) {
    var child = _step.value;
    if (ReactIS.isFragment(child)) {
      var _childEl$props;
      var childEl = child;
      if ((_childEl$props = childEl.props) !== null && _childEl$props !== void 0 && _childEl$props.children) {
        _flattenChildren(childEl.props.children, flattened);
      }
    } else {
      flattened.push(child);
    }
  }
  return flattened;
};

// node_modules/rsuite-table/es/Table.js
var _excluded8 = ["affixHeader", "children", "classPrefix", "className", "data", "defaultSortType", "width", "expandedRowKeys", "defaultExpandAllRows", "defaultExpandedRowKeys", "style", "id", "isTree", "hover", "bordered", "cellBordered", "wordWrap", "loading", "locale", "showHeader", "sortColumn", "rowHeight", "sortType", "headerHeight", "minHeight", "maxHeight", "height", "autoHeight", "fillHeight", "rtl", "translate3d", "rowKey", "virtualized", "rowClassName", "rowExpandedHeight", "disabledScroll", "affixHorizontalScrollbar", "loadAnimation", "shouldUpdateScroll", "renderRow", "renderRowExpanded", "renderLoading", "renderEmpty", "onSortColumn", "onScroll", "renderTreeToggle", "onRowClick", "onRowContextMenu", "onExpandChange", "onTouchStart", "onTouchMove", "onTouchEnd"];
var _excluded22 = ["depth", "rowIndex"];
var _excluded32 = ["cellHeight"];
var DATA_PLACEHOLDER = [];
var getChildrenProps = {
  Cell: Cell_default,
  HeaderCell: HeaderCell_default,
  Column: Column_default,
  ColumnGroup: ColumnGroup_default
};
var Table = import_react36.default.forwardRef(function(props, ref) {
  var affixHeader = props.affixHeader, getChildren = props.children, _props$classPrefix = props.classPrefix, classPrefix = _props$classPrefix === void 0 ? "rs-table" : _props$classPrefix, className = props.className, _props$data = props.data, dataProp = _props$data === void 0 ? DATA_PLACEHOLDER : _props$data, _props$defaultSortTyp = props.defaultSortType, defaultSortType = _props$defaultSortTyp === void 0 ? SORT_TYPE.DESC : _props$defaultSortTyp, widthProp = props.width, expandedRowKeysProp = props.expandedRowKeys, defaultExpandAllRows = props.defaultExpandAllRows, defaultExpandedRowKeys = props.defaultExpandedRowKeys, style = props.style, id = props.id, isTree = props.isTree, _props$hover = props.hover, hover = _props$hover === void 0 ? true : _props$hover, bordered = props.bordered, cellBordered = props.cellBordered, wordWrap = props.wordWrap, loading = props.loading, _props$locale = props.locale, locale = _props$locale === void 0 ? {
    emptyMessage: "No data found",
    loading: "Loading..."
  } : _props$locale, _props$showHeader = props.showHeader, showHeader = _props$showHeader === void 0 ? true : _props$showHeader, sortColumn = props.sortColumn, _props$rowHeight = props.rowHeight, rowHeight = _props$rowHeight === void 0 ? ROW_HEIGHT : _props$rowHeight, sortTypeProp = props.sortType, _props$headerHeight = props.headerHeight, headerHeightProp = _props$headerHeight === void 0 ? ROW_HEADER_HEIGHT : _props$headerHeight, _props$minHeight = props.minHeight, minHeight = _props$minHeight === void 0 ? 0 : _props$minHeight, maxHeight = props.maxHeight, _props$height = props.height, height = _props$height === void 0 ? 200 : _props$height, autoHeight = props.autoHeight, fillHeight = props.fillHeight, rtlProp = props.rtl, translate3d = props.translate3d, rowKey = props.rowKey, virtualized = props.virtualized, rowClassName = props.rowClassName, _props$rowExpandedHei = props.rowExpandedHeight, rowExpandedHeight = _props$rowExpandedHei === void 0 ? 100 : _props$rowExpandedHei, disabledScroll = props.disabledScroll, affixHorizontalScrollbar = props.affixHorizontalScrollbar, loadAnimation = props.loadAnimation, _props$shouldUpdateSc = props.shouldUpdateScroll, shouldUpdateScroll = _props$shouldUpdateSc === void 0 ? true : _props$shouldUpdateSc, renderRowProp = props.renderRow, renderRowExpandedProp = props.renderRowExpanded, renderLoading = props.renderLoading, renderEmpty = props.renderEmpty, onSortColumn = props.onSortColumn, onScroll = props.onScroll, renderTreeToggle = props.renderTreeToggle, onRowClick = props.onRowClick, onRowContextMenu = props.onRowContextMenu, onExpandChange = props.onExpandChange, onTouchStart = props.onTouchStart, onTouchMove = props.onTouchMove, onTouchEnd = props.onTouchEnd, rest = _objectWithoutPropertiesLoose(props, _excluded8);
  var children = (0, import_react36.useMemo)(function() {
    return _flattenChildren((0, import_isFunction2.default)(getChildren) ? getChildren(getChildrenProps) : getChildren);
  }, [getChildren]);
  var isAutoHeight = (0, import_react36.useMemo)(function() {
    return autoHeight && !maxHeight;
  }, [autoHeight, maxHeight]);
  var _useClassNames = useClassNames_default(classPrefix, typeof classPrefix !== "undefined"), withClassPrefix = _useClassNames.withClassPrefix, mergeCls = _useClassNames.merge, prefix2 = _useClassNames.prefix;
  var _useReducer = (0, import_react36.useReducer)(function(x) {
    return x + 1;
  }, 0), forceUpdate = _useReducer[1];
  var _useControlled = useControlled_default(expandedRowKeysProp, defaultExpandAllRows ? findRowKeys(dataProp, rowKey, (0, import_isFunction2.default)(renderRowExpandedProp)) : defaultExpandedRowKeys || []), expandedRowKeys = _useControlled[0], setExpandedRowKeys = _useControlled[1];
  var data = useTableData_default({
    data: dataProp,
    isTree,
    expandedRowKeys,
    rowKey
  });
  if (isTree) {
    if (!rowKey) {
      throw new Error("The `rowKey` is required when set isTree");
    } else if (data.length > 0) {
      if (!data[0].hasOwnProperty(rowKey)) {
        throw new Error("The `rowKey` is not found in data");
      }
    }
  }
  var _useTableRows = useTableRows_default({
    data: dataProp,
    expandedRowKeys,
    wordWrap,
    prefix: prefix2
  }), tableRowsMaxHeight = _useTableRows.tableRowsMaxHeight, bindTableRowsRef = _useTableRows.bindTableRowsRef;
  var headerHeight = showHeader ? headerHeightProp : 0;
  var rtl = rtlProp || isRTL();
  var getRowHeight = function getRowHeight2() {
    return typeof rowHeight === "function" ? rowHeight() : rowHeight;
  };
  var translateDOMPositionXY3 = (0, import_react36.useRef)(getTranslateDOMPositionXY({
    forceUseTransform: true,
    enable3DTransform: translate3d
  }));
  var shouldFixedColumn = children.some(function(child) {
    var _child$props;
    return ReactIs2.isElement(child) && (child === null || child === void 0 ? void 0 : (_child$props = child.props) === null || _child$props === void 0 ? void 0 : _child$props.fixed);
  });
  var shouldRowSpanColumn = children.some(function(child) {
    var _child$props2;
    return ReactIs2.isElement(child) && (child === null || child === void 0 ? void 0 : (_child$props2 = child.props) === null || _child$props2 === void 0 ? void 0 : _child$props2.rowSpan);
  });
  var visibleRows = (0, import_react36.useRef)([]);
  var mouseAreaRef = (0, import_react36.useRef)(null);
  var tableRef = (0, import_react36.useRef)(null);
  var tableHeaderRef = (0, import_react36.useRef)(null);
  var affixHeaderWrapperRef = (0, import_react36.useRef)(null);
  var headerWrapperRef = (0, import_react36.useRef)(null);
  var tableBodyRef = (0, import_react36.useRef)(null);
  var wheelWrapperRef = (0, import_react36.useRef)(null);
  var scrollbarXRef = (0, import_react36.useRef)(null);
  var scrollbarYRef = (0, import_react36.useRef)(null);
  var handleTableResizeChange = function handleTableResizeChange2(_prevSize, event) {
    forceUpdate();
    if (typeof shouldUpdateScroll === "function") {
      onScrollTo(shouldUpdateScroll(event));
    } else if (shouldUpdateScroll) {
      var vertical = event === "bodyHeightChanged";
      vertical ? onScrollTop(0) : onScrollLeft(0);
    }
    if (event === "bodyWidthChanged") {
      deferUpdatePosition();
    }
  };
  var _useTableDimension = useTableDimension_default({
    // The data should be flattened,
    // otherwise the array length required to calculate the scroll height in the TreeTable is not real.
    data,
    width: widthProp,
    rowHeight,
    tableRef,
    headerWrapperRef,
    prefix: prefix2,
    affixHeader,
    affixHorizontalScrollbar,
    headerHeight,
    height,
    minHeight,
    maxHeight,
    autoHeight,
    fillHeight,
    children,
    expandedRowKeys,
    showHeader,
    bordered,
    onTableScroll: (0, import_debounce2.default)(function(coords) {
      return onScrollTo(coords);
    }, 100),
    onTableResizeChange: handleTableResizeChange
  }), contentHeight = _useTableDimension.contentHeight, contentWidth = _useTableDimension.contentWidth, minScrollY = _useTableDimension.minScrollY, minScrollX = _useTableDimension.minScrollX, scrollY = _useTableDimension.scrollY, scrollX = _useTableDimension.scrollX, tableWidth = _useTableDimension.tableWidth, tableOffset = _useTableDimension.tableOffset, headerOffset = _useTableDimension.headerOffset, setScrollY = _useTableDimension.setScrollY, setScrollX = _useTableDimension.setScrollX, getTableHeight = _useTableDimension.getTableHeight;
  useAffix_default({
    getTableHeight,
    contentHeight,
    affixHorizontalScrollbar,
    affixHeader,
    tableOffset,
    headerOffset,
    headerHeight,
    scrollbarXRef,
    affixHeaderWrapperRef
  });
  var _usePosition = usePosition_default({
    data: dataProp,
    height,
    tableWidth,
    tableRef,
    prefix: prefix2,
    translateDOMPositionXY: translateDOMPositionXY3,
    wheelWrapperRef,
    headerWrapperRef,
    affixHeaderWrapperRef,
    tableHeaderRef,
    scrollX,
    scrollY,
    contentWidth,
    shouldFixedColumn
  }), forceUpdatePosition = _usePosition.forceUpdatePosition, deferUpdatePosition = _usePosition.deferUpdatePosition;
  var _useScrollListener = useScrollListener_default({
    rtl,
    data: dataProp,
    height,
    virtualized,
    getTableHeight,
    contentHeight,
    headerHeight,
    autoHeight: isAutoHeight,
    maxHeight,
    tableBodyRef,
    scrollbarXRef,
    scrollbarYRef,
    disabledScroll,
    loading,
    tableRef,
    contentWidth,
    tableWidth,
    scrollY,
    minScrollY,
    minScrollX,
    scrollX,
    setScrollX,
    setScrollY,
    forceUpdatePosition,
    deferUpdatePosition,
    onScroll,
    onTouchStart,
    onTouchMove,
    onTouchEnd
  }), isScrolling = _useScrollListener.isScrolling, onScrollHorizontal = _useScrollListener.onScrollHorizontal, onScrollVertical = _useScrollListener.onScrollVertical, onScrollBody = _useScrollListener.onScrollBody, onScrollTop = _useScrollListener.onScrollTop, onScrollLeft = _useScrollListener.onScrollLeft, onScrollTo = _useScrollListener.onScrollTo, onScrollByKeydown = _useScrollListener.onScrollByKeydown;
  var _useCellDescriptor = useCellDescriptor_default({
    children,
    rtl,
    mouseAreaRef,
    tableRef,
    minScrollX,
    scrollX,
    tableWidth,
    headerHeight,
    showHeader,
    sortType: sortTypeProp,
    defaultSortType,
    sortColumn,
    prefix: prefix2,
    onSortColumn,
    // Force table update after column width change, so scrollbar re-renders.
    onHeaderCellResize: forceUpdate,
    rowHeight
  }), headerCells = _useCellDescriptor.headerCells, bodyCells = _useCellDescriptor.bodyCells, allColumnsWidth = _useCellDescriptor.allColumnsWidth, hasCustomTreeCol = _useCellDescriptor.hasCustomTreeCol;
  var colCounts = (0, import_react36.useRef)((headerCells === null || headerCells === void 0 ? void 0 : headerCells.length) || 0);
  useUpdateEffect_default(function() {
    if ((headerCells === null || headerCells === void 0 ? void 0 : headerCells.length) !== colCounts.current) {
      onScrollLeft(0);
      colCounts.current = (headerCells === null || headerCells === void 0 ? void 0 : headerCells.length) || 0;
    }
  }, [children]);
  (0, import_react36.useImperativeHandle)(ref, function() {
    return {
      get root() {
        return tableRef.current;
      },
      get body() {
        return wheelWrapperRef.current;
      },
      // The scroll position of the table
      get scrollPosition() {
        return {
          top: Math.abs(scrollY.current),
          left: Math.abs(scrollX.current)
        };
      },
      scrollTop: onScrollTop,
      scrollLeft: onScrollLeft
    };
  });
  var rowWidth = allColumnsWidth > tableWidth.current ? allColumnsWidth : tableWidth.current;
  var hasVerticalScrollbar = !isAutoHeight && contentHeight.current > getTableHeight() - headerHeight;
  var hasHorizontalScrollbar = contentWidth.current > tableWidth.current;
  var classes = mergeCls(className, withClassPrefix({
    bordered,
    loading,
    treetable: isTree,
    hover: hover && !shouldRowSpanColumn,
    "has-rowspan": shouldRowSpanColumn,
    "word-wrap": wordWrap,
    "cell-bordered": cellBordered
  }));
  var styles = _extends({
    width: widthProp || "auto",
    height: getTableHeight()
  }, style);
  var renderRowExpanded = (0, import_react36.useCallback)(function(rowData) {
    var height2 = 0;
    if (typeof rowExpandedHeight === "function") {
      height2 = rowExpandedHeight(rowData);
    } else {
      height2 = rowExpandedHeight;
    }
    var styles2 = {
      height: height2
    };
    if (typeof renderRowExpandedProp === "function") {
      return import_react36.default.createElement("div", {
        className: prefix2("row-expanded"),
        style: styles2
      }, renderRowExpandedProp(rowData));
    }
    return null;
  }, [prefix2, renderRowExpandedProp, rowExpandedHeight]);
  var renderRow = function renderRow2(props2, cells, shouldRenderExpandedRow2, rowData) {
    var depth = props2.depth, rowIndex = props2.rowIndex, restRowProps = _objectWithoutPropertiesLoose(props2, _excluded22);
    if (typeof rowClassName === "function") {
      restRowProps.className = rowClassName(rowData, rowIndex);
    } else {
      restRowProps.className = rowClassName;
    }
    var rowStyles = _extends({}, props2 === null || props2 === void 0 ? void 0 : props2.style);
    var rowRight = 0;
    if (rtl && contentWidth.current > tableWidth.current) {
      rowRight = tableWidth.current - contentWidth.current;
      rowStyles.right = rowRight;
    }
    var rowNode = null;
    if (shouldFixedColumn && contentWidth.current > tableWidth.current) {
      var fixedLeftCells = [];
      var fixedRightCells = [];
      var scrollCells = [];
      var fixedLeftCellGroupWidth = 0;
      var fixedRightCellGroupWidth = 0;
      for (var i = 0; i < cells.length; i++) {
        var cell = cells[i];
        var _cell$props = cell.props, fixed = _cell$props.fixed, width = _cell$props.width;
        var isFixedStart = fixed === "left" || fixed === true;
        var isFixedEnd = fixed === "right";
        if (rtl) {
          isFixedStart = fixed === "right";
          isFixedEnd = fixed === "left" || fixed === true;
        }
        if (isFixedStart) {
          fixedLeftCells.push(cell);
          fixedLeftCellGroupWidth += width;
        } else if (isFixedEnd) {
          fixedRightCells.push(cell);
          fixedRightCellGroupWidth += width;
        } else {
          scrollCells.push(cell);
        }
      }
      if (hasVerticalScrollbar && fixedRightCellGroupWidth) {
        fixedRightCellGroupWidth += SCROLLBAR_WIDTH;
      }
      rowNode = import_react36.default.createElement(import_react36.default.Fragment, null, fixedLeftCellGroupWidth ? import_react36.default.createElement(CellGroup_default, {
        fixed: "left",
        height: props2.isHeaderRow ? props2.headerHeight : props2.height,
        width: fixedLeftCellGroupWidth,
        style: rtl ? {
          right: tableWidth.current - fixedLeftCellGroupWidth - rowRight
        } : void 0
      }, mergeCells_default(resetLeftForCells(fixedLeftCells))) : null, import_react36.default.createElement(CellGroup_default, null, mergeCells_default(scrollCells)), fixedRightCellGroupWidth ? import_react36.default.createElement(CellGroup_default, {
        fixed: "right",
        style: rtl ? {
          right: 0 - rowRight
        } : {
          left: tableWidth.current - fixedRightCellGroupWidth
        },
        height: props2.isHeaderRow ? props2.headerHeight : props2.height,
        width: fixedRightCellGroupWidth
      }, mergeCells_default(resetLeftForCells(fixedRightCells, hasVerticalScrollbar ? SCROLLBAR_WIDTH : 0))) : null, shouldRenderExpandedRow2 && renderRowExpanded(rowData));
    } else {
      rowNode = import_react36.default.createElement(import_react36.default.Fragment, null, import_react36.default.createElement(CellGroup_default, null, mergeCells_default(cells)), shouldRenderExpandedRow2 && renderRowExpanded(rowData));
    }
    return import_react36.default.createElement(Row_default, _extends({}, restRowProps, {
      "data-depth": depth,
      style: rowStyles
    }), renderRowProp ? renderRowProp(rowNode, rowData) : rowNode);
  };
  var renderTableHeader = function renderTableHeader2(headerCells2, rowWidth2) {
    var top = typeof affixHeader === "number" ? affixHeader : 0;
    var rowProps = {
      "aria-rowindex": 1,
      rowRef: tableHeaderRef,
      width: rowWidth2,
      height: getRowHeight(),
      headerHeight,
      isHeaderRow: true,
      top: 0,
      rowIndex: -1
    };
    var fixedStyle = {
      position: "fixed",
      overflow: "hidden",
      height: headerHeight,
      width: tableWidth.current,
      top
    };
    var header = import_react36.default.createElement("div", {
      className: prefix2("affix-header"),
      style: fixedStyle,
      ref: affixHeaderWrapperRef
    }, renderRow(rowProps, headerCells2));
    return import_react36.default.createElement(import_react36.default.Fragment, null, (affixHeader === 0 || affixHeader) && header, import_react36.default.createElement("div", {
      role: "rowgroup",
      className: prefix2("header-row-wrapper"),
      ref: headerWrapperRef
    }, renderRow(rowProps, headerCells2)));
  };
  var shouldRenderExpandedRow = (0, import_react36.useCallback)(function(rowData) {
    if ((0, import_isFunction2.default)(renderRowExpandedProp) && !isTree && rowKey && expandedRowKeys.some(function(key) {
      return key === rowData[rowKey];
    })) {
      return true;
    }
    return false;
  }, [expandedRowKeys, isTree, renderRowExpandedProp, rowKey]);
  var bindRowClick = (0, import_react36.useCallback)(function(rowData) {
    return function(event) {
      onRowClick === null || onRowClick === void 0 ? void 0 : onRowClick(rowData, event);
    };
  }, [onRowClick]);
  var bindRowContextMenu = (0, import_react36.useCallback)(function(rowData) {
    return function(event) {
      onRowContextMenu === null || onRowContextMenu === void 0 ? void 0 : onRowContextMenu(rowData, event);
    };
  }, [onRowContextMenu]);
  var handleTreeToggle = (0, import_react36.useCallback)(function(treeRowKey, _rowIndex, rowData) {
    var open = false;
    var nextExpandedRowKeys = [];
    for (var i = 0; i < expandedRowKeys.length; i++) {
      var key = expandedRowKeys[i];
      if (key === treeRowKey) {
        open = true;
      } else {
        nextExpandedRowKeys.push(key);
      }
    }
    if (!open) {
      nextExpandedRowKeys.push(treeRowKey);
    }
    setExpandedRowKeys(nextExpandedRowKeys);
    onExpandChange === null || onExpandChange === void 0 ? void 0 : onExpandChange(!open, rowData);
  }, [expandedRowKeys, onExpandChange, setExpandedRowKeys]);
  var rowSpanState = (0, import_react36.useRef)({});
  var renderRowData = function renderRowData2(bodyCells2, rowData, props2, shouldRenderExpandedRow2) {
    var hasChildren = isTree && rowData.children && Array.isArray(rowData.children);
    var nextRowKey = rowKey && typeof rowData[rowKey] !== "undefined" ? rowData[rowKey] : props2.key;
    var cellHeight = props2.cellHeight, restRowProps = _objectWithoutPropertiesLoose(props2, _excluded32);
    var rowProps = _extends({}, restRowProps, {
      key: nextRowKey,
      "aria-rowindex": props2.key + 2,
      rowRef: bindTableRowsRef(props2.key, rowData),
      onClick: bindRowClick(rowData),
      onContextMenu: bindRowContextMenu(rowData)
    });
    var expanded = expandedRowKeys.some(function(key) {
      return rowKey && key === rowData[rowKey];
    });
    var cells = [];
    for (var i = 0; i < bodyCells2.length; i++) {
      var _cell$props2, _cell$props2$rowSpan, _cell$props3, _rowSpanState$current, _cell$props4, _rowSpanState$current2;
      var cell = bodyCells2[i];
      var rowSpan = (_cell$props2 = cell.props) === null || _cell$props2 === void 0 ? void 0 : (_cell$props2$rowSpan = (_cell$props3 = _cell$props2).rowSpan) === null || _cell$props2$rowSpan === void 0 ? void 0 : _cell$props2$rowSpan.call(_cell$props3, rowData);
      var dataCellHeight = rowSpan ? rowSpan * (cellHeight || ROW_HEIGHT) : cellHeight;
      var _cellKey = cell.props.dataKey || i;
      if (((_rowSpanState$current = rowSpanState.current[_cellKey]) === null || _rowSpanState$current === void 0 ? void 0 : _rowSpanState$current[1]) > 0) {
        rowSpanState.current[_cellKey][1] -= 1;
        if (rowSpanState.current[_cellKey][1] === 0) {
          rowSpanState.current[_cellKey][0] = 0;
        }
      }
      if (rowSpan) {
        rowSpanState.current[_cellKey] = [rowSpan, rowSpan];
        rowProps.rowSpan = rowSpan;
        rowProps.style = {
          overflow: "inherit"
        };
      }
      var removedCell = (_cell$props4 = cell.props) !== null && _cell$props4 !== void 0 && _cell$props4.rowSpan && !rowSpan && ((_rowSpanState$current2 = rowSpanState.current[_cellKey]) === null || _rowSpanState$current2 === void 0 ? void 0 : _rowSpanState$current2[0]) !== 0 ? true : false;
      cells.push(import_react36.default.cloneElement(cell, {
        "aria-rowspan": rowSpan ? rowSpan : void 0,
        hasChildren,
        rowData,
        rowIndex: props2.rowIndex,
        wordWrap,
        height: dataCellHeight,
        depth: props2.depth,
        renderTreeToggle,
        onTreeToggle: handleTreeToggle,
        rowKey: nextRowKey,
        expanded,
        rowSpan,
        removed: removedCell
      }));
    }
    return renderRow(rowProps, cells, shouldRenderExpandedRow2, rowData);
  };
  var renderScrollbar = function renderScrollbar2() {
    var height2 = getTableHeight();
    if (disabledScroll) {
      return null;
    }
    var scrollbars = [];
    if (hasHorizontalScrollbar) {
      scrollbars.push(import_react36.default.createElement(Scrollbar_default, {
        key: "scrollbar",
        tableId: id,
        style: {
          width: tableWidth.current
        },
        length: tableWidth.current,
        onScroll: onScrollHorizontal,
        scrollLength: contentWidth.current,
        ref: scrollbarXRef
      }));
    }
    if (hasVerticalScrollbar) {
      scrollbars.push(import_react36.default.createElement(Scrollbar_default, {
        vertical: true,
        key: "vertical-scrollbar",
        tableId: id,
        length: height2 - headerHeight,
        onScroll: onScrollVertical,
        scrollLength: contentHeight.current,
        ref: scrollbarYRef
      }));
    }
    return scrollbars;
  };
  var renderTableBody = function renderTableBody2(bodyCells2, rowWidth2) {
    var _visibleRows$current;
    var height2 = getTableHeight();
    var bodyHeight = height2 - headerHeight;
    var bodyStyles = {
      top: headerHeight,
      height: bodyHeight
    };
    var contentHeight2 = 0;
    var topHideHeight = 0;
    var bottomHideHeight = 0;
    visibleRows.current = [];
    if (data) {
      var top = 0;
      var minTop = Math.abs(scrollY.current);
      var startHeight = 0;
      if (typeof rowExpandedHeight === "function") {
        startHeight = data.length ? rowExpandedHeight(data[0]) : 100;
      } else {
        startHeight = rowExpandedHeight;
      }
      var maxTop = minTop + height2 + startHeight;
      var isCustomRowHeight = typeof rowHeight === "function";
      var isUncertainHeight = !!renderRowExpandedProp || isCustomRowHeight || wordWrap;
      if (isUncertainHeight && virtualized || !virtualized) {
        if (isSupportTouchEvent()) {
          var coveredHeight = height2 * 3;
          minTop = Math.max(minTop - coveredHeight, 0);
          maxTop = maxTop + coveredHeight;
        }
        for (var index = 0; index < data.length; index++) {
          var rowData = data[index];
          var _maxHeight = tableRowsMaxHeight[index];
          var expandedRow = shouldRenderExpandedRow(rowData);
          var nextRowHeight = 0;
          var cellHeight = 0;
          if (typeof rowHeight === "function") {
            nextRowHeight = rowHeight(rowData);
            cellHeight = nextRowHeight;
          } else {
            nextRowHeight = _maxHeight ? Math.max(_maxHeight + CELL_PADDING_HEIGHT, rowHeight) : rowHeight;
            cellHeight = nextRowHeight;
            if (expandedRow) {
              if (typeof rowExpandedHeight === "function") {
                nextRowHeight += rowExpandedHeight(rowData);
              } else {
                nextRowHeight += rowExpandedHeight;
              }
            }
          }
          contentHeight2 += nextRowHeight;
          var rowProps = {
            key: index,
            top,
            rowIndex: index,
            width: rowWidth2,
            depth: rowData[TREE_DEPTH],
            height: nextRowHeight,
            cellHeight
          };
          top += nextRowHeight;
          if (virtualized && !wordWrap) {
            if (top + nextRowHeight < minTop) {
              topHideHeight += nextRowHeight;
              continue;
            } else if (top > maxTop) {
              bottomHideHeight += nextRowHeight;
              continue;
            }
          }
          visibleRows.current.push(renderRowData(bodyCells2, rowData, rowProps, expandedRow));
        }
      } else {
        var _nextRowHeight = getRowHeight();
        var startIndex = Math.max(Math.floor(minTop / _nextRowHeight), 0);
        var endIndex = Math.min(startIndex + Math.ceil(bodyHeight / _nextRowHeight) + 5, data.length);
        if (isSupportTouchEvent()) {
          var coveredCount = Math.floor(height2 / _nextRowHeight * 3);
          startIndex = Math.max(startIndex - coveredCount, 0);
          endIndex = Math.min(endIndex + coveredCount, data.length);
        }
        contentHeight2 = data.length * _nextRowHeight;
        topHideHeight = startIndex * _nextRowHeight;
        bottomHideHeight = (data.length - endIndex) * _nextRowHeight;
        for (var _index = startIndex; _index < endIndex; _index++) {
          var _rowData = data[_index];
          var _rowProps = {
            key: _index,
            rowIndex: _index,
            depth: _rowData[TREE_DEPTH],
            top: _index * _nextRowHeight,
            width: rowWidth2,
            height: _nextRowHeight,
            cellHeight: _nextRowHeight
          };
          visibleRows.current.push(renderRowData(bodyCells2, _rowData, _rowProps, false));
        }
      }
    }
    var wheelStyles = {
      position: "absolute",
      height: contentHeight2,
      minHeight: height2,
      pointerEvents: isScrolling ? "none" : void 0
    };
    var topRowStyles = {
      height: topHideHeight
    };
    var bottomRowStyles = {
      height: bottomHideHeight
    };
    return import_react36.default.createElement("div", {
      ref: tableBodyRef,
      role: "rowgroup",
      className: prefix2("body-row-wrapper"),
      style: bodyStyles,
      onScroll: onScrollBody
    }, import_react36.default.createElement("div", {
      style: wheelStyles,
      className: prefix2("body-wheel-area"),
      ref: wheelWrapperRef
    }, topHideHeight ? import_react36.default.createElement(Row_default, {
      style: topRowStyles,
      className: "virtualized"
    }) : null, visibleRows.current, bottomHideHeight ? import_react36.default.createElement(Row_default, {
      style: bottomRowStyles,
      className: "virtualized"
    }) : null), import_react36.default.createElement(EmptyMessage_default, {
      locale,
      renderEmpty,
      addPrefix: prefix2,
      loading: !!((_visibleRows$current = visibleRows.current) !== null && _visibleRows$current !== void 0 && _visibleRows$current.length) || loading
    }), renderScrollbar(), import_react36.default.createElement(Loader_default, {
      locale,
      loadAnimation,
      loading,
      addPrefix: prefix2,
      renderLoading
    }));
  };
  var contextValue = import_react36.default.useMemo(function() {
    return {
      classPrefix,
      translateDOMPositionXY: translateDOMPositionXY3.current,
      rtl,
      isTree,
      hasCustomTreeCol
    };
  }, [classPrefix, hasCustomTreeCol, isTree, rtl]);
  return import_react36.default.createElement(TableContext_default.Provider, {
    value: contextValue
  }, import_react36.default.createElement("div", _extends({
    role: isTree ? "treegrid" : "grid",
    "aria-rowcount": data.length + 1,
    "aria-colcount": colCounts.current,
    "aria-busy": loading
  }, rest, {
    className: classes,
    style: styles,
    ref: tableRef,
    tabIndex: -1,
    onKeyDown: onScrollByKeydown
  }), showHeader && renderTableHeader(headerCells, rowWidth), children && renderTableBody(bodyCells, rowWidth), showHeader && import_react36.default.createElement(MouseArea_default, {
    ref: mouseAreaRef,
    addPrefix: prefix2,
    headerHeight,
    height: getTableHeight()
  })));
});
Table.displayName = "Table";
Table.propTypes = {
  autoHeight: import_prop_types5.default.bool,
  fillHeight: import_prop_types5.default.bool,
  affixHeader: import_prop_types5.default.oneOfType([import_prop_types5.default.bool, import_prop_types5.default.number]),
  affixHorizontalScrollbar: import_prop_types5.default.oneOfType([import_prop_types5.default.bool, import_prop_types5.default.number]),
  bordered: import_prop_types5.default.bool,
  className: import_prop_types5.default.string,
  classPrefix: import_prop_types5.default.string,
  children: import_prop_types5.default.any,
  cellBordered: import_prop_types5.default.bool,
  data: import_prop_types5.default.array,
  defaultExpandAllRows: import_prop_types5.default.bool,
  defaultExpandedRowKeys: import_prop_types5.default.array,
  defaultSortType: import_prop_types5.default.any,
  disabledScroll: import_prop_types5.default.bool,
  expandedRowKeys: import_prop_types5.default.array,
  hover: import_prop_types5.default.bool,
  height: import_prop_types5.default.number,
  headerHeight: import_prop_types5.default.number,
  locale: import_prop_types5.default.object,
  loading: import_prop_types5.default.bool,
  loadAnimation: import_prop_types5.default.bool,
  minHeight: import_prop_types5.default.number,
  maxHeight: import_prop_types5.default.number,
  rowKey: import_prop_types5.default.oneOfType([import_prop_types5.default.string, import_prop_types5.default.number]),
  rowHeight: import_prop_types5.default.oneOfType([import_prop_types5.default.number, import_prop_types5.default.func]),
  renderTreeToggle: import_prop_types5.default.func,
  renderRowExpanded: import_prop_types5.default.func,
  renderRow: import_prop_types5.default.func,
  rowExpandedHeight: import_prop_types5.default.oneOfType([import_prop_types5.default.func, import_prop_types5.default.number]),
  renderEmpty: import_prop_types5.default.func,
  renderLoading: import_prop_types5.default.func,
  rowClassName: import_prop_types5.default.oneOfType([import_prop_types5.default.func, import_prop_types5.default.string]),
  rtl: import_prop_types5.default.bool,
  style: import_prop_types5.default.object,
  sortColumn: import_prop_types5.default.string,
  sortType: import_prop_types5.default.any,
  showHeader: import_prop_types5.default.bool,
  shouldUpdateScroll: import_prop_types5.default.oneOfType([import_prop_types5.default.func, import_prop_types5.default.bool]),
  translate3d: import_prop_types5.default.bool,
  wordWrap: import_prop_types5.default.any,
  width: import_prop_types5.default.number,
  virtualized: import_prop_types5.default.bool,
  isTree: import_prop_types5.default.bool,
  onRowClick: import_prop_types5.default.func,
  onRowContextMenu: import_prop_types5.default.func,
  onScroll: import_prop_types5.default.func,
  onSortColumn: import_prop_types5.default.func,
  onExpandChange: import_prop_types5.default.func,
  onTouchStart: import_prop_types5.default.func,
  onTouchMove: import_prop_types5.default.func,
  onTouchEnd: import_prop_types5.default.func
};
var Table_default = Table;

export {
  _objectWithoutPropertiesLoose,
  require_prop_types,
  require_identity,
  require_Symbol,
  require_baseGetTag,
  require_isObject,
  require_isFunction,
  require_noop,
  require_isArray,
  require_isObjectLike,
  require_arrayEach,
  require_baseFindIndex,
  require_baseIndexOf,
  require_arrayIncludes,
  require_getHolder,
  require_isIndex,
  require_replaceHolders,
  require_baseTrim,
  require_isSymbol,
  require_toNumber,
  require_toInteger,
  require_createWrap,
  require_curry,
  ResizeObserver,
  on,
  require_arrayMap,
  require_baseToString,
  require_toString,
  canUseDOM_default,
  contains_default,
  ownerDocument,
  isEventSupported_default,
  requestAnimationFramePolyfill_default,
  WheelHandler_default,
  cancelAnimationFramePolyfill_default,
  DOMMouseMoveTracker_default,
  hasClass,
  addClass,
  removeClass,
  getWindow,
  scrollTop_default,
  scrollLeft_default,
  getOffset,
  camelize,
  hyphenateStyleName_default,
  getHeight,
  getWidth,
  removeStyle,
  addStyle_default,
  translateDOMPositionXY_default,
  require_eq,
  require_MapCache,
  require_Stack,
  require_baseAssignValue,
  require_assignValue,
  require_copyObject,
  require_isArguments,
  require_isBuffer,
  require_isLength,
  require_baseUnary,
  require_isTypedArray,
  require_isPrototype,
  require_isArrayLike,
  require_keys,
  require_getAllKeys,
  require_getAllKeysIn,
  require_Set,
  require_getTag,
  require_Uint8Array,
  require_baseClone,
  require_isKey,
  require_castPath,
  require_toKey,
  require_baseGet,
  require_baseSlice,
  require_baseUnset,
  require_flatten,
  require_flatRest,
  require_omit,
  require_baseFor,
  require_get,
  require_isEmpty,
  require_baseRest,
  require_isIterateeCall,
  require_createAssigner,
  require_isNil,
  ArrowDown_default2 as ArrowDown_default,
  ArrowRight_default2 as ArrowRight_default,
  require_isArrayLikeObject,
  require_baseDelay,
  require_debounce,
  ColumnGroup_default,
  Column_default,
  Cell_default,
  HeaderCell_default,
  Table_default
};
/*! Bundled license information:

react-is/cjs/react-is.development.js:
  (** @license React v17.0.2
   * react-is.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

react-is/cjs/react-is.development.js:
  (** @license React v16.13.1
   * react-is.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

object-assign/index.js:
  (*
  object-assign
  (c) Sindre Sorhus
  @license MIT
  *)
*/
//# sourceMappingURL=chunk-MQN6I5UL.js.map
